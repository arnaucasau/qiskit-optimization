Search.setIndex({"docnames": ["apidocs/qiskit_optimization", "apidocs/qiskit_optimization.algorithms", "apidocs/qiskit_optimization.algorithms.qrao", "apidocs/qiskit_optimization.applications", "apidocs/qiskit_optimization.converters", "apidocs/qiskit_optimization.problems", "apidocs/qiskit_optimization.translators", "explanations/index", "explanations/qrao", "getting_started", "index", "migration/01_migration_guide_to_v0.5", "migration/02_migration_guide_to_v0.6", "migration/index", "release_notes", "stubs/qiskit_optimization.QiskitOptimizationError", "stubs/qiskit_optimization.QuadraticProgram", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult", "stubs/qiskit_optimization.algorithms.ADMMOptimizer", "stubs/qiskit_optimization.algorithms.ADMMParameters", "stubs/qiskit_optimization.algorithms.ADMMState", "stubs/qiskit_optimization.algorithms.BaseAggregator", "stubs/qiskit_optimization.algorithms.CobylaOptimizer", "stubs/qiskit_optimization.algorithms.CplexOptimizer", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult", "stubs/qiskit_optimization.algorithms.GroverOptimizer", "stubs/qiskit_optimization.algorithms.GurobiOptimizer", "stubs/qiskit_optimization.algorithms.IntermediateResult", "stubs/qiskit_optimization.algorithms.MeanAggregator", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm", "stubs/qiskit_optimization.algorithms.OptimizationResult", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer", "stubs/qiskit_optimization.algorithms.ScipyMilpOptimizer", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer", "stubs/qiskit_optimization.algorithms.SolutionSample", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer", "stubs/qiskit_optimization.algorithms.qrao.EncodingCommutationVerifier", "stubs/qiskit_optimization.algorithms.qrao.MagicRounding", "stubs/qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding", "stubs/qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult", "stubs/qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer", "stubs/qiskit_optimization.algorithms.qrao.RoundingContext", "stubs/qiskit_optimization.algorithms.qrao.RoundingResult", "stubs/qiskit_optimization.algorithms.qrao.RoundingScheme", "stubs/qiskit_optimization.algorithms.qrao.SemideterministicRounding", "stubs/qiskit_optimization.applications.BinPacking", "stubs/qiskit_optimization.applications.Clique", "stubs/qiskit_optimization.applications.ExactCover", "stubs/qiskit_optimization.applications.GraphOptimizationApplication", "stubs/qiskit_optimization.applications.GraphPartition", "stubs/qiskit_optimization.applications.Knapsack", "stubs/qiskit_optimization.applications.Maxcut", "stubs/qiskit_optimization.applications.NumberPartition", "stubs/qiskit_optimization.applications.OptimizationApplication", "stubs/qiskit_optimization.applications.SKModel", "stubs/qiskit_optimization.applications.SetPacking", "stubs/qiskit_optimization.applications.StableSet", "stubs/qiskit_optimization.applications.Tsp", "stubs/qiskit_optimization.applications.VehicleRouting", "stubs/qiskit_optimization.applications.VertexCover", "stubs/qiskit_optimization.converters.InequalityToEquality", "stubs/qiskit_optimization.converters.IntegerToBinary", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty", "stubs/qiskit_optimization.converters.MaximizeToMinimize", "stubs/qiskit_optimization.converters.MinimizeToMaximize", "stubs/qiskit_optimization.converters.QuadraticProgramConverter", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo", "stubs/qiskit_optimization.infinity.INFINITY", "stubs/qiskit_optimization.problems.Constraint", "stubs/qiskit_optimization.problems.LinearConstraint", "stubs/qiskit_optimization.problems.LinearExpression", "stubs/qiskit_optimization.problems.QuadraticConstraint", "stubs/qiskit_optimization.problems.QuadraticExpression", "stubs/qiskit_optimization.problems.QuadraticObjective", "stubs/qiskit_optimization.problems.QuadraticProgramElement", "stubs/qiskit_optimization.problems.Variable", "stubs/qiskit_optimization.translators.from_docplex_mp", "stubs/qiskit_optimization.translators.from_gurobipy", "stubs/qiskit_optimization.translators.from_ising", "stubs/qiskit_optimization.translators.to_docplex_mp", "stubs/qiskit_optimization.translators.to_gurobipy", "stubs/qiskit_optimization.translators.to_ising", "tutorials/01_quadratic_program", "tutorials/02_converters_for_quadratic_programs", "tutorials/03_minimum_eigen_optimizer", "tutorials/04_grover_optimizer", "tutorials/05_admm_optimizer", "tutorials/06_examples_max_cut_and_tsp", "tutorials/07_examples_vehicle_routing", "tutorials/08_cvar_optimization", "tutorials/09_application_classes", "tutorials/10_warm_start_qaoa", "tutorials/11_using_classical_optimization_solvers_and_models", "tutorials/12_quantum_random_access_optimizer", "tutorials/index"], "filenames": ["apidocs/qiskit_optimization.rst", "apidocs/qiskit_optimization.algorithms.rst", "apidocs/qiskit_optimization.algorithms.qrao.rst", "apidocs/qiskit_optimization.applications.rst", "apidocs/qiskit_optimization.converters.rst", "apidocs/qiskit_optimization.problems.rst", "apidocs/qiskit_optimization.translators.rst", "explanations/index.rst", "explanations/qrao.rst", "getting_started.rst", "index.rst", "migration/01_migration_guide_to_v0.5.rst", "migration/02_migration_guide_to_v0.6.rst", "migration/index.rst", "release_notes.rst", "stubs/qiskit_optimization.QiskitOptimizationError.rst", "stubs/qiskit_optimization.QuadraticProgram.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.ADMMOptimizer.rst", "stubs/qiskit_optimization.algorithms.ADMMParameters.rst", "stubs/qiskit_optimization.algorithms.ADMMState.rst", "stubs/qiskit_optimization.algorithms.BaseAggregator.rst", "stubs/qiskit_optimization.algorithms.CobylaOptimizer.rst", "stubs/qiskit_optimization.algorithms.CplexOptimizer.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.GroverOptimizer.rst", "stubs/qiskit_optimization.algorithms.GurobiOptimizer.rst", "stubs/qiskit_optimization.algorithms.IntermediateResult.rst", "stubs/qiskit_optimization.algorithms.MeanAggregator.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.MinimumEigenOptimizer.rst", "stubs/qiskit_optimization.algorithms.MultiStartOptimizer.rst", "stubs/qiskit_optimization.algorithms.OptimizationAlgorithm.rst", "stubs/qiskit_optimization.algorithms.OptimizationResult.rst", "stubs/qiskit_optimization.algorithms.OptimizationResultStatus.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.rst", "stubs/qiskit_optimization.algorithms.ScipyMilpOptimizer.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.SlsqpOptimizer.rst", "stubs/qiskit_optimization.algorithms.SolutionSample.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAFactory.rst", "stubs/qiskit_optimization.algorithms.WarmStartQAOAOptimizer.rst", "stubs/qiskit_optimization.algorithms.qrao.EncodingCommutationVerifier.rst", "stubs/qiskit_optimization.algorithms.qrao.MagicRounding.rst", "stubs/qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.rst", "stubs/qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.rst", "stubs/qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer.rst", "stubs/qiskit_optimization.algorithms.qrao.RoundingContext.rst", "stubs/qiskit_optimization.algorithms.qrao.RoundingResult.rst", "stubs/qiskit_optimization.algorithms.qrao.RoundingScheme.rst", "stubs/qiskit_optimization.algorithms.qrao.SemideterministicRounding.rst", "stubs/qiskit_optimization.applications.BinPacking.rst", "stubs/qiskit_optimization.applications.Clique.rst", "stubs/qiskit_optimization.applications.ExactCover.rst", "stubs/qiskit_optimization.applications.GraphOptimizationApplication.rst", "stubs/qiskit_optimization.applications.GraphPartition.rst", "stubs/qiskit_optimization.applications.Knapsack.rst", "stubs/qiskit_optimization.applications.Maxcut.rst", "stubs/qiskit_optimization.applications.NumberPartition.rst", "stubs/qiskit_optimization.applications.OptimizationApplication.rst", "stubs/qiskit_optimization.applications.SKModel.rst", "stubs/qiskit_optimization.applications.SetPacking.rst", "stubs/qiskit_optimization.applications.StableSet.rst", "stubs/qiskit_optimization.applications.Tsp.rst", "stubs/qiskit_optimization.applications.VehicleRouting.rst", "stubs/qiskit_optimization.applications.VertexCover.rst", "stubs/qiskit_optimization.converters.InequalityToEquality.rst", "stubs/qiskit_optimization.converters.IntegerToBinary.rst", "stubs/qiskit_optimization.converters.LinearEqualityToPenalty.rst", "stubs/qiskit_optimization.converters.LinearInequalityToPenalty.rst", "stubs/qiskit_optimization.converters.MaximizeToMinimize.rst", "stubs/qiskit_optimization.converters.MinimizeToMaximize.rst", "stubs/qiskit_optimization.converters.QuadraticProgramConverter.rst", "stubs/qiskit_optimization.converters.QuadraticProgramToQubo.rst", "stubs/qiskit_optimization.infinity.INFINITY.rst", "stubs/qiskit_optimization.problems.Constraint.rst", "stubs/qiskit_optimization.problems.LinearConstraint.rst", "stubs/qiskit_optimization.problems.LinearExpression.rst", "stubs/qiskit_optimization.problems.QuadraticConstraint.rst", "stubs/qiskit_optimization.problems.QuadraticExpression.rst", "stubs/qiskit_optimization.problems.QuadraticObjective.rst", "stubs/qiskit_optimization.problems.QuadraticProgramElement.rst", "stubs/qiskit_optimization.problems.Variable.rst", "stubs/qiskit_optimization.translators.from_docplex_mp.rst", "stubs/qiskit_optimization.translators.from_gurobipy.rst", "stubs/qiskit_optimization.translators.from_ising.rst", "stubs/qiskit_optimization.translators.to_docplex_mp.rst", "stubs/qiskit_optimization.translators.to_gurobipy.rst", "stubs/qiskit_optimization.translators.to_ising.rst", "tutorials/01_quadratic_program.ipynb", "tutorials/02_converters_for_quadratic_programs.ipynb", "tutorials/03_minimum_eigen_optimizer.ipynb", "tutorials/04_grover_optimizer.ipynb", "tutorials/05_admm_optimizer.ipynb", "tutorials/06_examples_max_cut_and_tsp.ipynb", "tutorials/07_examples_vehicle_routing.ipynb", "tutorials/08_cvar_optimization.ipynb", "tutorials/09_application_classes.ipynb", "tutorials/10_warm_start_qaoa.ipynb", "tutorials/11_using_classical_optimization_solvers_and_models.ipynb", "tutorials/12_quantum_random_access_optimizer.ipynb", "tutorials/index.rst"], "titles": ["Qiskit Optimization API Reference", "Optimization algorithms (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.algorithms</span></code>)", "Quantum Random Access Optimization (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.algorithms.qrao</span></code>)", "Optimization applications (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.applications</span></code>)", "Optimization converters (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.converters</span></code>)", "Optimization problems (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.problems</span></code>)", "Quadratic program translators (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">qiskit_optimization.translators</span></code>)", "Qiskit Optimization \u306e\u8aac\u660e", "\u91cf\u5b50\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u6700\u9069\u5316 (QRAO) \u306e\u80cc\u666f\uff1a <em>\u91cf\u5b50\u7de9\u548c\u3001\u91cf\u5b50\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u7b26\u53f7\u3001\u4e38\u3081\u30b9\u30ad\u30fc\u30e0</em>", "\u306f\u3058\u3081\u306b", "Qiskit Optimization \u306e\u6982\u8981", "Qiskit Optimization v0.5 \u79fb\u884c\u30ac\u30a4\u30c9", "Qiskit Optimization v0.6 \u79fb\u884c\u30ac\u30a4\u30c9", "Qiskit Optimization \u79fb\u884c\u30ac\u30a4\u30c9", "Release Notes", "QiskitOptimizationError", "QuadraticProgram", "ADMMOptimizationResult", "ADMMOptimizer", "ADMMParameters", "ADMMState", "BaseAggregator", "CobylaOptimizer", "CplexOptimizer", "GoemansWilliamsonOptimizationResult", "GoemansWilliamsonOptimizer", "GroverOptimizationResult", "GroverOptimizer", "GurobiOptimizer", "IntermediateResult", "MeanAggregator", "MinimumEigenOptimizationResult", "MinimumEigenOptimizer", "MultiStartOptimizer", "OptimizationAlgorithm", "OptimizationResult", "OptimizationResultStatus", "RecursiveMinimumEigenOptimizationResult", "RecursiveMinimumEigenOptimizer", "ScipyMilpOptimizer", "SlsqpOptimizationResult", "SlsqpOptimizer", "SolutionSample", "WarmStartQAOAFactory", "WarmStartQAOAOptimizer", "EncodingCommutationVerifier", "MagicRounding", "QuantumRandomAccessEncoding", "QuantumRandomAccessOptimizationResult", "QuantumRandomAccessOptimizer", "RoundingContext", "RoundingResult", "RoundingScheme", "SemideterministicRounding", "BinPacking", "Clique", "ExactCover", "GraphOptimizationApplication", "GraphPartition", "Knapsack", "Maxcut", "NumberPartition", "OptimizationApplication", "SKModel", "SetPacking", "StableSet", "Tsp", "VehicleRouting", "VertexCover", "InequalityToEquality", "IntegerToBinary", "LinearEqualityToPenalty", "LinearInequalityToPenalty", "MaximizeToMinimize", "MinimizeToMaximize", "QuadraticProgramConverter", "QuadraticProgramToQubo", "INFINITY", "Constraint", "LinearConstraint", "LinearExpression", "QuadraticConstraint", "QuadraticExpression", "QuadraticObjective", "QuadraticProgramElement", "Variable", "from_docplex_mp", "from_gurobipy", "from_ising", "to_docplex_mp", "to_gurobipy", "to_ising", "\u4e8c\u6b21\u8a08\u753b\u6cd5", "\u4e8c\u6b21\u8a08\u753b\u6cd5\u306e\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc", "\u6700\u5c0f\u56fa\u6709\u5024\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc (Minimum Eigen Optimizer)", "\u30b0\u30ed\u30fc\u30d0\u30fc\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc", "ADMM \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc", "\u6700\u5927\u30ab\u30c3\u30c8\u554f\u984c\u3068\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u5de1\u56de\u554f\u984c", "\u914d\u8eca\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0", "CVaR\u3092\u4f7f\u7528\u3057\u305f\u5909\u5206\u91cf\u5b50\u6700\u9069\u5316\u306e\u6539\u5584", "\u6700\u9069\u5316\u554f\u984c\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30af\u30e9\u30b9", "\u30a6\u30a9\u30fc\u30e0\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u91cf\u5b50\u6700\u9069\u5316", "Qiskit Optimization \u3067\u306e\u53e4\u5178\u7684\u6700\u9069\u5316\u30bd\u30eb\u30d0\u30fc\u3068\u30e2\u30c7\u30eb\u306e\u4f7f\u7528", "\u91cf\u5b50\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u6700\u9069\u5316 (Quantum Random Access Optimization)", "Optimization\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb"], "terms": {"covers": 0, "the": [0, 2, 4, 5, 9, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "whole": 0, "range": [0, 16, 43, 44, 97, 98, 99, 101], "from": [0, 2, 8, 9, 11, 12, 16, 17, 22, 23, 24, 25, 26, 28, 29, 31, 32, 33, 35, 37, 38, 39, 40, 41, 43, 44, 46, 48, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "high": [0, 2, 66, 67], "-level": [0, 2, 85], "modeling": 0, "of": [0, 2, 4, 5, 8, 11, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "problems": [0, 1, 2, 3, 8, 18, 22, 23, 28, 41, 84, 94, 96, 98, 103], "with": [0, 2, 15, 16, 18, 19, 22, 23, 25, 26, 27, 28, 32, 33, 34, 35, 38, 39, 40, 41, 44, 45, 46, 47, 49, 51, 54, 55, 57, 58, 60, 63, 65, 66, 67, 68, 69, 70, 71, 72, 76, 80, 82, 83, 84, 96, 97, 98, 102, 103], "automatic": 0, "conversion": [0, 4, 71, 72, 75, 76], "to": [0, 2, 4, 5, 8, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "different": [0, 2, 4, 27, 32, 38, 40, 44, 99], "required": [0, 75], "representations": [0, 4], "suite": 0, "easy": [0, 57, 62], "-to": [0, 16, 57, 62, 70], "-use": 0, "quantum": [0, 8, 10, 11, 18, 27, 43, 44, 46, 47, 48, 49, 70, 95, 96, 97, 98, 99, 101], "algorithms": [0, 2, 10, 11, 12, 34, 35, 99, 103], "that": [0, 2, 16, 18, 20, 21, 22, 23, 25, 26, 28, 30, 33, 35, 38, 40, 41, 43, 44, 45, 46, 47, 50, 63, 69, 70, 71, 72, 73, 74, 76, 80, 82, 84, 86, 87, 92, 98], "are": [0, 5, 11, 16, 19, 20, 22, 27, 29, 33, 38, 41, 46, 47, 49, 53, 63, 69, 71, 72, 76, 82, 88, 91], "ready": 0, "run": [0, 44, 96, 97, 98, 99], "on": [0, 2, 4, 16, 18, 22, 23, 28, 38, 39, 46, 47, 55, 58, 60, 65, 66, 67, 68, 71, 72, 76, 96, 97, 99, 103], "classical": [0, 2, 18, 94, 96, 97, 98, 99], "simulators": 0, "as": [0, 2, 11, 16, 17, 19, 20, 22, 23, 24, 26, 28, 31, 32, 35, 37, 38, 39, 40, 41, 43, 47, 48, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 72, 76, 80, 82, 85, 87, 88, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103], "well": [0, 16, 32], "real": [0, 102], "devices": 0, "via": [0, 2, 8, 16, 19, 22, 37, 41, 80, 82, 96, 98, 102, 103], "this": [0, 2, 4, 11, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 53, 55, 70, 72, 76, 85, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "enables": 0, "efficient": 0, "using": [0, 16, 18, 22, 23, 27, 28, 32, 33, 34, 38, 39, 41, 44, 46, 57, 62, 72, 75, 80, 82, 92, 94, 96, 97, 99, 101, 102, 103], "docplex": [0, 10, 86, 89, 93, 95, 96, 99, 101], "uniform": 0, "interface": [0, 84], "between": [0, 4, 6, 43, 44, 98, 103], "problem": [0, 2, 4, 5, 11, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 47, 48, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "allows": [0, 2, 35], "users": [0, 2, 35, 44, 72], "solve": [0, 2, 18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 94, 95, 96, 97, 98, 99, 101, 102, 103], "large": 0, "set": [0, 4, 11, 15, 19, 27, 47, 64, 65, 99], "variational": [0, 38, 94, 95, 98, 99], "such": [0, 2, 16, 32], "approximate": [0, 2, 8, 10, 25, 32, 95, 97, 103], "algorithm": [0, 2, 10, 17, 18, 22, 24, 25, 26, 27, 31, 32, 33, 35, 36, 37, 38, 40, 41, 48, 94, 95, 97, 98, 99, 100, 101, 103], "qaoa": [0, 8, 10, 32, 38, 43, 44, 93, 94, 95, 96, 100, 102], "grover": [0, 26, 27, 95], "adaptive": [0, 10, 27, 95], "search": [0, 10, 27, 95], "groveroptimizer": [0, 10, 26, 93, 94, 96], "leveraging": 0, "fundamental": 0, "minimum": [0, 11, 27, 31, 32, 38, 44, 46, 47, 48, 49, 66, 67, 93, 96, 97, 103], "eigensolvers": 0, "provided": [0, 16, 27, 32, 49, 50], "by": [0, 2, 8, 15, 16, 17, 19, 25, 27, 30, 31, 32, 33, 35, 37, 38, 40, 44, 47, 48, 49, 51, 54, 69, 70, 72, 80, 82, 85, 92, 98, 102], "furthermore": 0, "modular": 0, "design": 0, "it": [0, 16, 32, 43, 44, 46, 47, 49, 55, 57, 58, 60, 65, 66, 67, 68, 73, 74, 86, 96], "be": [0, 2, 5, 11, 16, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 38, 39, 40, 41, 43, 44, 46, 47, 49, 55, 57, 58, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 85, 86, 87, 89, 90, 91, 96, 98, 99], "easily": 0, "extended": 0, "and": [0, 4, 6, 8, 11, 15, 16, 17, 18, 19, 22, 24, 25, 26, 27, 29, 31, 32, 33, 35, 37, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 50, 53, 54, 63, 66, 72, 75, 76, 80, 81, 82, 85, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "facilitates": 0, "rapid": 0, "development": 0, "testing": 0, "new": [0, 2, 8, 35, 63, 70, 76, 80, 82, 85], "compatible": [0, 18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76, 98], "optimizers": [0, 33], "also": [0, 28, 96], "for": [0, 2, 5, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 75, 77, 78, 80, 82, 83, 84, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103], "validation": 0, "benchmarking": 0, "supports": [0, 16, 39, 72, 86, 87], "quadratically": [0, 16], "constrained": [0, 16, 95], "quadratic": [0, 16, 25, 32, 41, 47, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 101], "programs": [0, 75], "simplicity": 0, "we": [0, 2, 82, 99, 103], "refer": [0, 80, 82], "them": [0, 22, 30, 41], "just": [0, 24], "binary": [0, 2, 11, 16, 19, 25, 32, 47, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 70, 72, 86, 87, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103], "integer": [0, 16, 32, 47, 49, 69, 70, 86, 87, 91, 92, 93, 98, 102], "continuous": [0, 16, 18, 19, 22, 41, 44, 69, 86, 87, 91, 92, 96, 101], "variables": [0, 2, 11, 16, 17, 19, 20, 22, 24, 26, 31, 32, 35, 37, 38, 40, 41, 42, 43, 44, 47, 48, 49, 69, 70, 71, 72, 73, 74, 78, 79, 80, 81, 82, 83, 85, 86, 87, 88, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103], "equality": [0, 16, 19, 32, 38, 69, 71, 72, 76], "inequality": [0, 16, 69, 71, 72], "constraints": [0, 11, 16, 19, 32, 38, 39, 47, 69, 71, 72, 76, 86, 87, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103], "class": [0, 2, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 98], "has": [0, 2, 16, 27, 32, 33, 39, 46, 47, 49, 73, 74, 88, 92, 102], "vast": 0, "amount": 0, "relevant": [0, 20], "applications": [0, 57, 62], "while": 0, "still": [0, 16], "being": [0, 20, 37, 40, 98], "efficiently": 0, "representable": 0, "matrices": 0, "vectors": 0, "some": [0, 16, 72, 98], "very": 0, "interesting": 0, "sub": [0, 33, 92, 98], "-classes": 0, "convex": [0, 23, 28, 39, 96], "which": [0, 16, 46, 49, 53, 72], "can": [0, 2, 11, 16, 18, 19, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 43, 44, 46, 47, 49, 55, 57, 58, 60, 65, 66, 67, 68, 76, 80, 82, 96], "solved": [0, 18, 20, 22, 23, 25, 27, 28, 32, 33, 34, 35, 38, 39, 41, 44, 49, 69, 70, 71, 72, 76], "unconstrained": [0, 32, 47, 71, 93, 94, 99], "qubo": [0, 8, 18, 19, 26, 27, 31, 32, 38, 44, 47, 49, 72, 76, 93, 96, 97, 98, 100, 101, 103], "cover": [0, 56, 68, 100], "many": [0, 94], "np": [0, 35, 48, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 94, 97, 98, 99, 101, 103], "-complete": 0, ".e": [0, 16, 22, 27, 32, 38, 41, 44, 49, 76, 82, 88, 91], ".,": [0, 2, 8, 16, 18, 19, 22, 27, 32, 38, 41, 44, 49, 63, 76, 82, 88, 91, 92, 93, 94, 99, 102, 103], "classically": [0, 99], "intractable": 0, "representation": [0, 16, 63, 79, 80, 81, 82, 83, 85, 98, 99], "program": [0, 16, 25, 79, 81, 83, 86, 87, 88, 89, 90, 96, 97, 98, 101], "supporting": 0, "in": [0, 2, 8, 11, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 31, 33, 34, 35, 36, 37, 38, 40, 41, 43, 44, 46, 47, 48, 51, 53, 54, 57, 60, 62, 63, 66, 69, 70, 71, 72, 73, 74, 75, 76, 82, 85, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "addition": 0, "standard": [0, 2, 43, 44], "python": [0, 9, 11, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "errors": [0, 15], "will": [0, 18, 19, 27, 28, 32, 38, 44, 49, 69, 71, 72, 76, 98], "raise": [0, 23, 28, 39], "error": [0, 11, 15, 92, 98], "if": [0, 16, 18, 19, 22, 23, 25, 27, 28, 32, 33, 34, 35, 38, 39, 41, 43, 44, 46, 47, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 80, 82, 83, 85, 86, 87, 88, 89, 90, 91, 94, 96, 97, 98, 99, 101, 103], "circumstances": 0, "cannot": [0, 16, 27, 92], "proceed": 0, "completion": [0, 41], "qrao": [2, 7, 103], "module": [2, 15, 22, 23, 28, 29, 32, 34, 36, 39, 41, 75], "is": [2, 4, 8, 11, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 32, 33, 34, 37, 38, 39, 41, 43, 44, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 82, 85, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "designed": [2, 47], "enable": 2, "leverage": 2, "method": [2, 16, 18, 19, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 46, 47, 49, 76, 96, 103], "combinatorial": [2, 8, 103], "].": [2, 18, 38, 43, 44, 59, 63, 72, 94, 98, 99, 101, 103], "approach": 2, "incorporates": 2, "codes": [2, 103], "qracs": 2, "tool": 2, "encode": [2, 47, 49, 103], "multiple": [2, 16], "into": [2, 8, 9, 16, 27, 32, 38, 44, 47, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 86, 87, 103], "single": [2, 102], "qubit": [2, 8, 16, 47, 49, 88, 91, 100, 103], "thereby": 2, "saving": 2, "resources": 2, "enabling": 2, "exploration": 2, "larger": 2, "instances": [2, 16], "computer": 2, "produce": 2, "local": [2, 22, 33, 41], "hamiltonian": [2, 8, 16, 32, 47, 49, 50, 63, 88, 91, 97, 100, 103], "whose": [2, 32, 55, 56, 59, 61, 64, 65, 66, 68], "ground": [2, 32], "state": [2, 17, 20, 32, 38, 43, 44, 47, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 94, 96], "approximated": 2, "vqe": [2, 8, 93, 95, 96, 97, 98, 99, 103], "then": [2, 18, 19, 22, 32, 33, 41, 43, 44, 46], "rounded": [2, 53], "yield": 2, "approximation": [2, 46, 103], "solutions": [2, 8, 24, 44, 98, 103], "original": [2, 4, 17, 24, 26, 31, 32, 35, 37, 40, 47, 48, 55, 57, 58, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 99], "through": 2, "series": 2, "classes": [2, 5], "quantumrandomaccessencoding": [2, 45, 48, 49, 50, 103], "encodes": [2, 25, 47], "relaxed": [2, 8, 19, 43, 44, 47, 48, 49, 50, 101, 103], "requires": [2, 16, 46], "fewer": 2, "semideterministicrounding": [2, 49, 103], "magicrounding": 2, "scheme": [2, 38, 46, 49, 52, 53, 103], "used": [2, 16, 18, 19, 22, 23, 26, 27, 28, 32, 38, 39, 41, 43, 44, 46, 47, 48, 49, 51, 53, 69, 70, 71, 72, 76, 78, 85, 86, 96], "round": [2, 46, 49, 52, 53, 103], "solution": [2, 16, 17, 19, 24, 26, 31, 32, 35, 36, 37, 40, 42, 43, 46, 48, 49, 53, 54, 60, 66, 97, 98, 100, 102, 103], "obtained": [2, 31, 35, 36, 37, 43, 48, 51, 98, 102, 103], "back": [2, 70, 71, 72, 73, 74], "optimizer": [2, 11, 12, 16, 18, 19, 22, 23, 25, 27, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 44, 49, 76, 93, 96, 97, 98, 101, 103], "quantumrandomaccessoptimizer": 2, "performs": 2, "utilizing": 2, "capabilities": 2, "two": [2, 58, 60], "methods": [2, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85], "solving": [2, 19, 20, 49, 97], "()": [2, 11, 12, 22, 23, 28, 32, 35, 38, 41, 49, 63, 69, 70, 76, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "_relaxed": [2, 49, 103], "provides": [2, 22, 23, 28, 32, 39, 41], "seamless": 2, "workflow": 2, "automatically": [2, 71, 72, 76, 86, 99], "managing": 2, "procedures": 2, "demonstrated": 2, "example": [2, 16, 82], "below": 2, "simplified": 2, "streamlined": 2, "user": [2, 29], "experience": 2, "other": [2, 6, 16, 19, 33, 63], "hand": 2, "offers": 2, "flexibility": 2, "break": 2, "computation": [2, 17, 20], "process": [2, 19, 46, 49], "distinct": [2, 103], "steps": 2, "feature": 2, "advantageous": 2, "when": [2, 19, 22, 27, 32, 35, 38, 41, 43, 44, 55, 57, 58, 60, 65, 66, 67, 68], "need": [2, 11, 16, 21, 30, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "compare": 2, "applied": [2, 18, 22, 23, 27, 28, 32, 33, 34, 38, 39, 41, 44], "potential": [2, 22, 33, 41], "_algorithms": [2, 12, 32, 38, 49, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], ".optimizers": [2, 11, 12, 94, 96, 97, 98, 99, 100, 101, 102, 103], "import": [2, 11, 12, 22, 23, 28, 32, 35, 38, 41, 69, 70, 76, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "cobyla": [2, 11, 12, 22, 94, 96, 99, 100, 101, 102, 103], ".circuit": [2, 11, 12, 97, 98, 99, 101, 103], ".library": [2, 11, 12, 97, 98, 99, 103], "realamplitudes": [2, 11, 12, 98, 99, 103], ".primitives": [2, 11, 12, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "estimator": [2, 11, 45, 103], ".problems": [2, 22, 23, 28, 32, 38, 41, 69, 70, 76, 92, 101, 102], "quadraticprogram": [2, 4, 5, 6, 11, 18, 20, 22, 23, 25, 27, 28, 32, 33, 34, 35, 38, 39, 41, 44, 47, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 103], ".binary": [2, 11, 35, 92, 93, 94, 95, 96, 98, 99, 101, 102], "_var": [2, 11, 16, 35, 41, 70, 92, 93, 94, 95, 96, 98, 99, 101, 102], "(\"": [2, 11, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103], "\")": [2, 11, 41, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], ".minimize": [2, 35, 83, 92, 94, 95, 96, 98], "(linear": [2, 11, 16, 35, 41, 92, 93, 94], "={": [2, 11, 35, 92, 93, 94, 102, 103], "\"x": [2, 11, 92, 93, 102, 103], "\":": [2, 11, 92, 93, 101, 102, 103], "})": [2, 8, 11, 35, 92, 93, 94, 97, 98, 101, 102, 103], "ansatz": [2, 99, 103], "=ansatz": [2, 99, 103], "=cobyla": [2, 11, 12, 94, 96, 100, 101, 102, 103], "=estimator": [2, 11, 103], ",\n)": [2, 94, 103], "(min": [2, 11, 12, 98, 100, 103], "_eigen": [2, 11, 12, 31, 32, 44, 49, 94, 98, 99, 100, 103], "_solver": [2, 11, 12, 31, 32, 44, 49, 95, 98, 99, 100, 101, 103], "=vqe": [2, 98, 103], "result": [2, 4, 11, 12, 16, 17, 18, 21, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 44, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 93, 96, 97, 98, 100, 101, 102], ".solve": [2, 11, 12, 22, 23, 28, 32, 35, 38, 41, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "(problem": [2, 11, 12, 22, 23, 28, 32, 35, 38, 41, 69, 70, 76, 101, 103], "only": [2, 11, 22, 25, 29, 32, 39, 41, 44, 46, 69, 71, 73, 74, 87, 102], "must": [2, 11, 44, 46, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "done": 2, "manually": 2, "(max": [2, 103], "_vars": [2, 16, 37, 38, 47, 49, 94, 103], "_per": [2, 47, 49, 103], "_qubit": [2, 47, 49, 103], ".encode": [2, 103], "_results": [2, 17, 24, 26, 31, 35, 37, 40, 48, 98, 103], "_context": [2, 46, 52, 53, 103], "(encoding": [2, 103], "=encoding": [2, 103], ".round": [2, 103], "(rounding": [2, 8, 103], "[1": [2, 8, 18, 38, 44, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 72, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "bryce": [2, 8, 103], "fuller": [2, 8, 103], "et": [2, 8, 38, 44, 72, 98, 99, 103], "al": [2, 8, 38, 44, 72, 98, 99, 103], "relaxations": [2, 8, 103], "arxiv": [2, 8, 18, 38, 44, 46, 53, 63, 70, 72, 93, 94, 95, 96, 97, 98, 101, 103], "common": 3, "having": 4, "convert": [4, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 86, 93, 99, 101, 102], "functionality": 4, "go": 4, "given": [4, 16, 18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 46, 47, 49, 63, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 99], "interpret": [4, 26, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 93], "based": [4, 46, 55, 58, 60, 65, 66, 67, 68, 97, 99], "before": [4, 26, 44, 102], "return": [4, 15, 16, 17, 24, 26, 31, 32, 35, 37, 40, 41, 46, 48, 49, 66, 91, 94, 97, 98, 101], "an": [4, 5, 11, 16, 17, 18, 22, 23, 24, 25, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 47, 49, 52, 53, 55, 56, 57, 58, 60, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 75, 76, 80, 82, 88, 91, 92, 99, 103], "appropriate": 4, "optimizationresult": [4, 17, 22, 23, 24, 26, 27, 28, 31, 33, 34, 37, 38, 39, 40, 41, 48, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 94, 96], "structures": 5, "defining": [5, 98], "following": [5, 47, 72, 86], "not": [5, 8, 11, 16, 18, 19, 22, 23, 27, 28, 32, 35, 39, 43, 44, 46, 47, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 82, 83, 85, 98, 99, 103], "intended": 5, "instantiated": 5, "directly": [5, 55, 57, 58, 60, 65, 66, 67, 68, 102], "objects": [5, 6, 21, 30, 84], "these": 5, "types": [5, 98], "available": [5, 53], "within": [5, 22, 23, 28, 32, 39, 41], "optimization": [6, 9, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 75, 76, 83, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "models": [6, 72], "or": [6, 11, 16, 17, 19, 22, 23, 24, 26, 27, 28, 31, 32, 33, 35, 37, 39, 40, 41, 44, 46, 47, 48, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 80, 82, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8": [7, 8, 11, 12, 92], "\u3053\u306e": [7, 8, 9, 11, 12, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "\u30bb\u30af\u30b7\u30e7\u30f3": [7, 13, 92, 95, 103], "\u6709\u7528": [7, 8, 94, 97, 98], "\u304b\u3064": [7, 96], "\u4f7f\u7528": [7, 8, 9, 10, 11, 12, 92, 93, 94, 96, 97, 101, 103], "\u3044\u308b": [7, 8, 9, 11, 13, 93, 94, 95, 96, 97, 98, 101, 103], "\u30c6\u30af\u30cb\u30c3\u30af": [7, 103], "\u306a\u3069": [7, 10, 11, 93, 94, 95, 96, 97, 98, 102, 103], "\u306b\u3064\u3044\u3066": [7, 8, 9, 92, 93, 94, 95, 96, 97, 98, 99, 102, 103], "\u80cc\u666f": 7, "\u63d0\u4f9b": [7, 8, 10, 11, 12, 93, 94, 97, 98, 99, 100, 103], "\u307e\u3059": [7, 8, 9, 10, 11, 12, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "\u91cf\u5b50": [7, 10, 93, 94, 95, 100], "\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9": 7, "\u6700\u9069": [7, 9, 10, 92, 93, 94, 95, 96, 98], "\u7de9\u548c": 7, "\u7b26\u53f7": [7, 93], "\u4e38\u3081": 7, "\u30b9\u30ad\u30fc\u30e0": [7, 94, 103], "\u8cc7\u6599": 8, "\u80cc\u5f8c": 8, "\u3042\u308b": [8, 9, 10, 11, 12, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103], "\u6982\u5ff5": [8, 94], "\u3088\u308a": [8, 9, 92, 93, 94, 97, 98, 103], "\u6df1\u304f": [8, 103], "\u8003\u5bdf": 8, "\u30d0\u30a4\u30ca\u30ea": [8, 92, 93, 94, 95, 98, 101, 103], "\u5909\u6570": [8, 93, 94, 95, 96, 97, 98, 101, 102, 103], "_i": [8, 63, 72, 92, 93, 97, 98, 101], "{-": [8, 94, 103], "\\}": [8, 16, 63, 88, 93, 94, 95, 96, 98, 101], "\u306b\u5bfe\u3057": [8, 93, 94, 95, 96, 97, 98], "\u5b9a\u7fa9": [8, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103], "\u8003\u3048": [8, 94, 97], "\u307f\u307e\u3057\u3087": [8, 93, 102], "\u4ee3\u308f\u308a": [8, 9, 11, 12, 94, 103], "\\pm": [8, 97], "\u3059\u308b": [8, 9, 10, 11, 12, 93, 95, 96, 97, 98, 99, 100, 101, 102], "\u3068\u3044\u3046": [8, 9, 97, 98, 101], "\u9078\u629e": [8, 96, 97, 98, 100, 103], "\u91cd\u8981": [8, 94, 97, 98, 103], "\u3042\u308a": [8, 9, 11, 12, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103], "\u307e\u305b": [8, 9, 11, 12, 92, 93, 95, 103], "\u89b3\u6e2c": 8, "\u89b3\u70b9": [8, 96, 97], "\u304b\u3089": [8, 9, 10, 11, 12, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103], "\u30ad\u30e3\u30b9\u30c8": 8, "\u59cb\u3081\u308b": [8, 9], "\u3068\u304d": [8, 94, 103], "\u8868\u8a18": [8, 94, 98], "\u4fbf\u5229": 8, "\u3067\u3059": [8, 10, 11, 12, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "\u305f\u3061": [8, 97, 98, 103], "\u5236\u7d04": [8, 93, 94, 95, 96, 97, 98, 101, 103], "\u306a\u3057": [8, 9, 93, 94, 95, 101, 103], "\u5024\u6700": 8, "\u9069\u5316": [8, 96, 98], "\u8208\u5473": [8, 94], "\u6301\u3061": [8, 101], "\u30a2\u30a4\u30c7\u30a2": 8, "\u6b21\u4ee5\u4e0a": 8, "\u542b\u3080": [8, 95], "\u62e1\u5f35": [8, 9, 10, 11, 12, 97, 98], "\u3067\u304d": [8, 9, 10, 11, 12, 92, 93, 94, 95, 96, 97, 98, 101, 102, 103], "\u5024\u5909": 8, "\u307e\u305f": [8, 9, 92, 93, 94, 96, 97, 98], "\u4ed8\u304d": [8, 98], "\u591a\u304f": [8, 93, 96, 97, 98, 103], "\u5834\u5408": [8, 9, 13, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103], "\u3068\u3057\u3066": [8, 9, 11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "\u5909\u63db": [8, 10, 92, 93, 95, 97, 98, 101, 102, 103], "\u7a0b\u5ea6": 8, "\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9": 8, "\u767a\u751f": [8, 11, 92, 97, 103], ")\u3002": [8, 11, 95, 96, 98], "\u7406\u6700": 8, "\u304a\u3044": [8, 97], "\u96e3\u554f": 8, "\u53d6\u308a\u4e0a\u3052": 8, "\u305d\u306e": [8, 9, 92, 94, 95, 97, 98, 101, 103], "\u985e\u4f3c": 8, "\u30d0\u30fc\u30b8\u30e7\u30f3": [8, 9, 13], "\u30de\u30c3\u30d4\u30f3\u30b0": [8, 93, 94], "\u6226\u7565": [8, 97], "\u3001(": [8, 94], "\u901a\u5e38": [8, 94, 97, 98, 103], "\u89e3\u304f": [8, 93, 96, 101, 102], "\u3053\u3068": [8, 9, 11, 12, 92, 93, 94, 96, 98, 100, 101, 102, 103], "\u3053\u3053\u3067": [8, 93, 98], "\u306a\u308b": [8, 11, 93, 94, 97, 98, 100, 101, 103], "\u60c5\u5831": [8, 9, 94, 95, 97, 103], "\u4e0e\u3048": [8, 93, 94, 97, 99, 100, 101, 103], "\u826f\u3044": [8, 94, 99, 100, 101], "\u767a\u898b": [8, 103], "\u53ef\u80fd": [8, 9, 10, 11, 93, 94, 95, 96, 97, 98, 101, 103], "\u4f8b\u3068\u3057\u3066": [8, 100], "\u96e2\u6563": 8, "\u9023\u7d9a": [8, 92, 96, 98, 101], "\u5358\u7d14": [8, 97, 98], "\u306a\u3082\u306e": [8, 97, 98], "\u3089\u308c\u308b": [8, 94, 96, 98], "\u30bd\u30eb\u30d0\u30fc": [8, 94, 95, 98, 101, 103], "\u62bd\u51fa": 8, "\u898b\u3064\u3051": [8, 95, 97, 98, 100], "\u306a\u3051\u308c": 8, "\u306a\u308a": [8, 9, 10, 92, 93, 94, 95, 97, 98, 101, 102, 103], "\u7de9\u548c\u89e3": 8, "\u8a31\u5bb9": [8, 96], "\u89e3\u96c6\u5408": 8, "\u30d7\u30ed\u30bb\u30b9": [8, 11, 12, 103], "\u3057\u3070\u3057\u3070": [8, 101], "\u547c\u3070": [8, 94, 96, 97], "\u5177\u4f53": [8, 95], "maxcut": [8, 97, 103], "goemans": [8, 9, 24, 25], "-williamson": [8, 9, 24, 25], "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0": [8, 9, 10, 11, 12, 93, 94, 95, 97, 98, 99, 101, 103], "\u53c2\u7167": [8, 9, 11, 38, 44, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 72, 93, 94, 95, 97, 98, 102, 103], "\u304f\u3060": [8, 9, 11, 12, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103], "\u3055\u3044": [8, 9, 11, 12, 92, 93, 94, 95, 97, 98, 100, 101, 102, 103], "\u4e00\u822c\u6027": 8, "\u5931\u3046": 8, "\u306a\u304f": [8, 92, 94, 98], "\u6b8b\u308a": 8, "\u90e8\u5206": [8, 92, 93, 98, 100], "\u30b0\u30e9\u30d5": [8, 9, 95, 97, 98, 100, 103], ",e": [8, 97], "\u76ee\u7684": [8, 92, 93, 94, 95, 96, 97, 98, 99, 103], "\u95a2\u6570": [8, 92, 93, 94, 95, 96, 97, 98, 99, 103], "\u6211\u3005": [8, 93], "\u9802\u70b9": [8, 97, 103], "2\u3064": [8, 92, 93, 96, 97, 98, 102], "\u96c6\u5408": [8, 98, 100], "\u5206\u5272": [8, 96, 100, 103], "\u4e21\u65b9": [8, 9, 11, 93, 97, 102, 103], "\u7d50\u3076\u8fba": 8, "\u6700\u5927": [8, 93, 95, 100, 103], "\u3088\u3046": [8, 9, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103], "\u898b\u3064\u3051\u308b": [8, 94, 97, 98, 100], "\u4ee3\u5165": [8, 97], "cut": [8, 25, 60], "\\text": [8, 93], "{cut": 8, "}(": [8, 97, 98], "= \\": [8, 97, 98], "sum": [8, 25, 54, 61, 63, 72, 93, 97, 98, 101], "_{": [8, 25, 63, 72, 95, 96, 97, 98, 101], "ij": [8, 97, 98], "frac": [8, 97], "}{": [8, 72, 97], "-m": [8, 86, 102], "_j": [8, 63, 72, 97, 98], "\u3053\u308c": [8, 9, 11, 12, 93, 94, 95, 96, 97, 98, 101, 103], "\u5358\u4e00\u91cf\u5b50": [8, 97, 98], "\u30d1\u30a6\u30ea": [8, 94], "\u7a7a\u9593": [8, 95, 97], "\u3078\u306e": [8, 94, 98], "\u5b9f\u884c": [8, 9, 10, 92, 95, 96, 98, 103], "\u5165\u529b": [8, 93, 94, 95, 96, 103], "\u7a4d\u72b6": 8, "\u57cb\u3081\u8fbc\u3080": 8, "\u306b\u3088\u3063\u3066": [8, 94, 95, 97, 98, 100, 103], "\u884c\u3044": [8, 96, 101, 103], "\u57cb\u3081\u8fbc\u307f": 8, "\u3068\u3057": [8, 92, 94, 97, 98, 103], "\\{": [8, 63, 96, 98, 101], "^{m": 8, "mapsto": 8, "mathcal": [8, 96], "{d": 8, "mathbb": [8, 96, 98], "{c": [8, 97, 101], "}^": [8, 72, 96, 97, 98, 101], "text": [8, 16, 72, 92], "{tr": 8, "}\\": [8, 63, 92, 97, 98, 100, 103], "big": [8, 86, 98, 102], "(h": 8, "\\cdot": 8, "(m": [8, 98], ")\\": [8, 97, 98], "),": [8, 11, 19, 44, 92, 94, 96, 97, 98, 99, 102], "\u3053\u3053": [8, 9, 92, 93, 94, 95, 96, 97, 98, 101, 103], "|v": [8, 97], "\u3067\u3042\u308a": 8, "\u6709\u52b9": [8, 9], "\u305f\u3081": [8, 9, 11, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103], "geq": [8, 72, 93], "qquad": 8, "forall": [8, 96, 97, 98], "^m": [8, 97, 98], "\u4fdd\u8a3c": [8, 93, 96, 97, 98], "\u5f37\u3044": [8, 97], "\u6761\u4ef6": [8, 96, 97, 98], "\u5f37\u5236": [8, 96, 98], "\u8a00\u3044": [8, 97], "\u63db\u3048\u308b": [8, 12, 92, 97], "\u4e0a\u9650": [8, 92, 93], "\u5b9a\u3081\u308b": 8, "\u306b\u5bfe\u3059\u308b": 8, "\u7b49\u3057\u304f": 8, "\u8a73\u7d30": [8, 9, 11, 12, 93, 94, 97, 102, 103], "\u660e\u793a": 8, "\u3055\u3089\u306b": [8, 10, 97, 98], "\uff08qrac": 8, "\u57fa\u3065\u304f": [8, 94, 97], "\u5b8c\u5168": [8, 97, 98, 100], "\u8aac\u660e": [8, 9, 11, 12, 92, 93, 94, 95, 98, 101, 103], "\u307e\u305a": [8, 9, 93, 94, 96, 97, 98, 101, 102, 103], "\u4e38\u3081\u8fbc\u307f": 8, "\u8a00\u8a9e": [8, 103], "\u8b70\u8ad6": [8, 96, 98], "\u30e6\u30fc\u30b6\u30fc": [8, 10, 11, 100], "\u306b\u3068\u3063": 8, "\u99b4\u67d3": 8, "\u6df1\u3044": [8, 94], "\u7acb\u3064\u304b": 8, "\u3082\u3057\u308c": 8, "\u8003\u616e": [8, 94, 98, 99, 103], "^{": [8, 92, 96], ")}": [8, 16, 92, 94, 96, 98, 101, 103], ": m": 8, "{|": 8, "rangle": [8, 95, 97, 98, 101], ",|": 8, "^{\\": 8, "otimes": [8, 98], "},": [8, 92, 93, 96, 97, 98, 100, 101, 102], "quad": [8, 91, 92, 96, 98], "-z": [8, 92, 97], "\u756a\u76ee": [8, 93, 98], "\u308c\u308b": [8, 9, 11, 92, 94, 95, 96, 97, 98, 99, 100, 102, 103], "pauli": [8, 16, 46, 53, 88, 103], "\u3059\u3079": [8, 13, 95, 96, 97, 98, 103], "\u6052\u7b49": 8, "\u8868\u3057": [8, 92, 95, 96, 97, 98, 103], "\u7d0d\u5f97": 8, "\u5341\u5206": [8, 97, 98, 101, 103], "\u3002\u7279\u306b": 8, "\u73fe\u5728": [8, 9, 93, 95], "\u30d9\u30fc\u30b9": 8, "\u30a2\u30d7\u30ed\u30fc\u30c1": [8, 93, 94, 98], "\u8fd1\u672a": [8, 94], "\u6765\u91cf\u5b50": 8, "\u5f62\u5f0f": [8, 92, 93, 94, 97, 98, 101], "\u6b63\u78ba": [8, 92, 94, 96, 98, 100], "\u518d\u73fe": 8, "\u91cd\u306d\u5408\u308f\u305b": 8, "\u4f7f\u3063": [8, 92, 93], "\u81ea\u7531": [8, 97], "\u8a55\u4fa1": [8, 97, 98, 103], "\u7528\u3044": [8, 96, 103], "\u53e4\u5178": [8, 10, 94, 97, 103], "\u65b9\u6cd5": [8, 9, 92, 93, 94, 96, 97, 98, 99, 101], "\u3089\u308c": [8, 12, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "\u623b\u3059": [8, 93, 94, 103], "\u5b9f\u7528": [8, 97], "\u306e\u307f": [8, 11, 12, 93, 95, 97, 98], "\u7279\u6b8a": 8, "\u5404\u91cf\u5b50": [8, 103], "\u57fa\u5e95": [8, 93, 94, 97, 98, 101, 103], "\u6e2c\u5b9a": [8, 95, 103], "\u4efb\u610f": 8, "\u8a08\u7b97": [8, 93, 98, 101, 103], "\u6295\u5f71": 8, "\u7d50\u679c": [8, 92, 93, 94, 95, 97, 98, 100, 101], "\u30a4\u30e1\u30fc\u30b8": 8, "stephen": 8, "wiesner": 8, "\u521d\u3081\u3066": 8, "\u6982\u8aac": 8, "\u901a\u4fe1": 8, "\u8907\u96d1": [8, 97], "\u6027\u7406": 8, "\u6587\u8108": [8, 103], "\u307e\u3057": [8, 11, 12, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "\u5f53\u521d": 8, "\u305f\u3088\u3046": 8, "\u4f7f\u3046": [8, 9, 93, 94, 103], "\u5229\u7528": [8, 11, 12, 92, 96, 97, 98, 100, 101, 103], "rac": 8, "\u7d39\u4ecb": [8, 92, 94, 96, 98, 99, 100], "\u3057\u307e\u305b": 8, "\u8aad\u8005": 8, "\u8a73\u3057\u3044": 8, "\u63a2\u3059": 8, "\u63a8\u5968": 8, "(k": [8, 98], "-qrac": 8, "\u30b3\u30d4\u30fc": 8, "1\u3064": [8, 94, 95, 97, 98, 103], "\u3042\u308c": [8, 94, 96, 97, 103], "\u4f55\u3089\u304b": 8, "\u884c\u3046": [8, 96, 97, 101], "\u3069\u308c": [8, 97, 103], "\u78ba\u7387": [8, 94, 95, 97, 101, 103], "\u524d\u7bc0": 8, "\u81ea\u660e": 8, "\u4e00\u4f8b": 8, "\u4fbf\u5b9c": 8, "\u305d\u308c\u305e\u308c": [8, 92, 93, 94, 95, 96, 97, 100, 102, 103], "\u66f8\u304d": 8, "(p": [8, 96, 97], "\u4e0d\u53ef\u80fd": [8, 92], "\u8a3c\u660e": 8, "\u3002[": 8, "]<": 8, "https": [8, 9, 16, 22, 23, 39, 41, 46, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 88, 91, 92, 99, 102, 103], ":/": [8, 9, 11, 16, 22, 23, 39, 41, 46, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "iopscience": 8, ".iop": 8, ".org": [8, 11, 22, 23, 39, 41, 46, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "/article": 8, "`_": [8, 103], "\u4e00\u822c\u5316": [8, 94], "\u30a8\u30eb\u30df\u30fc\u30c8": 8, "\u5206\u89e3": [8, 96], "\u66f8\u304d\u51fa\u3059": 8, "\u7acb\u3064": 8, "\u3067\u3057\u3087": [8, 98], "\\rho": [8, 96], "left": [8, 16, 78, 79, 81, 97], "(i": [8, 96, 97, 98, 99], "ax": [8, 97], "cz": [8, 97], "right": [8, 16, 78, 79, 81, 97, 99], "|^": [8, 97, 98], "|b": 8, "|c": 8, "\u95a2\u9023": [8, 93, 97, 98, 103], "\u66f8\u304f": [8, 98], "\\begin": [8, 72, 92, 95, 101], "{array": [8, 72], "|ll": 8, "{qrac": 8, "&\\": 8, "{embedding": 8, "rho": [8, 19, 20, 96], "vert": 8, "psi": [8, 97, 98], "\\langle": [8, 97], "\\psi": [8, 97, 98], "\\\n\\": 8, "hline": 8, ")&": 8, "):": [8, 28, 82, 92, 97, 98, 99, 101, 102, 103], "\\rangle": [8, 95], "langle": [8, 97, 98], "\\vert": 8, "{m": 8, "\\\\": [8, 72, 92], "sqrt": [8, 63, 101], "}}": [8, 97, 98], "({": [8, 98, 102], "\\big": [8, 98], "end": [8, 16, 29, 72, 92, 95, 101, 102], "{table": 8, "states": [8, 44], "\u6301\u3064": [8, 92, 93, 94, 96, 97, 99, 100, 103], "\u3053\u308c\u3089": [8, 93, 97, 98, 102, 103], "\u30c6\u30f3\u30bd\u30eb": 8, "\u5408\u6210": 8, "\u81ea\u7136": 8, "\u30b9\u30b1\u30fc\u30eb": 8, "\u6ce8\u610f": [8, 11, 12, 92, 93, 94, 95, 97, 98, 100, 101, 103], ",\\": [8, 92, 98], "= f": 8, "\u540c\u69d8": [8, 9, 97, 98, 102, 103], "nmid": 8, "\u9069\u5207": [8, 93, 94, 96, 98, 103], "\u30d1\u30c7\u30a3\u30f3\u30b0": 8, "\u3059\u308c": [8, 98], "\u3088\u3044": [8, 95], "\u5bfe\u5fdc": [8, 11, 12, 92, 93, 94, 95, 96, 97, 99, 100, 103], "\u671f\u5f85": [8, 97, 98, 99, 103], "\u63a8\u5b9a": [8, 97, 98, 103], "\u3002qrac": 8, "\u5bc6\u5ea6": 8, "\u4f9d\u5b58": [8, 9, 93, 101, 102, 103], "\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0": [8, 92, 98], "\u4fc2\u6570": [8, 92, 93, 97, 103], "|l": 8, "& m": 8, "(\\": [8, 97, 98, 101], "cdot": 8, "& \\": 8, "bit": 8, "recovery": [8, 47], "\u4e0a\u8a18": [8, 9, 93, 95, 97, 98, 101, 103], "\u30c4\u30fc\u30eb": [8, 103], "\u5404\u6c7a": 8, "\u5b9a\u5909": 8, "\u306e\u3082": 8, "\u3067\u305d\u306e": 8, "\u5272\u308a": [8, 97, 103], "\u5f53\u3066": [8, 97, 103], "\u30e6\u30cb\u30fc\u30af": 8, "\u7f6e\u304d": [8, 12, 93, 94], "{problem": 8, "[i": [8, 25, 94, 97, 98, 99, 101], "]}": [8, 103], "[j": [8, 25, 97, 99, 101], "hamiltonians": 8, "after": [8, 38, 47, 51, 102], "embedding": 8, "\u6c7a\u5b9a": [8, 96, 97, 98, 103], "\u306b\u5bfe\u5fdc": [8, 92, 97, 103], "\u793a\u3057": [8, 11, 12, 92, 93, 94, 95, 96, 97, 98, 99, 103], "\u62ec\u5f27": 8, "\u30a4\u30f3\u30c7\u30c3\u30af\u30b9": [8, 92, 97, 98], "\u306f\u3084": 8, "\u95a2\u4fc2": [8, 102, 103], "\u6301\u305f": 8, "\u306a\u3044": [8, 9, 12, 92, 93, 94, 96, 97, 100, 101, 103], "\u5fc5\u305a\u3057": 8, "\u4f5c\u7528": [8, 97], "\u660e\u78ba": [8, 95, 103], "\u8907\u6570": [8, 92, 94, 97, 103], "\u5272\u308a\u5f53\u3066": 8, "\u3044\u304f\u3064\u304b": [8, 9, 93, 97, 102, 103], "\u30b5\u30d6\u30bb\u30c3\u30c8": [8, 93, 97, 100, 103], "\u540c\u3058": [8, 9, 92, 93, 94, 96, 98, 100, 101, 102], "\u610f\u5473": [8, 93, 97, 98, 103], "\u53ef\u63db": 8, "\u30de\u30c3\u30d7": [8, 93, 98, 103], "\u7570\u306a\u308b": [8, 93, 94], "\u3068\u306a\u308a": [8, 95], "\u901a\u308a": [8, 97, 98], "\u632f\u308b": 8, "\u821e\u3044": 8, "\u3057\u304b\u3057": [8, 11, 12, 94, 103], "\u76f4\u63a5": [8, 94, 97, 102, 103], "\u884c\u5217": [8, 92, 94, 96, 101], "\u5f62\u6210": 8, "\u81ea\u5df1": 8, "\u9006\u884c": 8, "\u601d\u3044\u51fa\u3057": 8, "\u3060\u3055\u3044": [8, 9, 13, 92, 97], "\u304c\u3063": [8, 92, 94], "\u8981\u7d20": [8, 95], "\u3082\u305f\u3089\u3057": 8, "\u305d\u308c": [8, 94, 96, 97, 98, 101, 102, 103], "\u306a\u3089": [8, 12, 98, 101], "\u63a8\u6e2c": 8, "\u5d29\u308c": 8, "\u8ffd\u52a0": [8, 9, 93, 94, 97, 103], "\u5c0e\u5165": [8, 11, 92, 93, 94, 100], "\u5fc5\u8981": [8, 9, 11, 92, 93, 95, 96, 97, 98, 100, 101, 102, 103], "\u30a8\u30c3\u30b8": [8, 97, 98, 100, 103], "\u5171\u6709": [8, 103], "\\forall": 8, "dots": [8, 92, 98], "\u540c\u3058\u8272": 8, "\u30b0\u30e9\u30d5g": 8, "\u30ab\u30e9\u30fc\u30ea\u30f3\u30b0": 8, "\u5f53\u3066\u308b": 8, "\u5b9f\u73fe": [8, 96, 98, 101, 103], "_\\": [8, 97, 98], "{relax": 8, "\u6700\u7d42": [8, 97, 98], "\u753b\u50cf": 8, "\u4f4e\u3044": 8, "\u3067\u304d\u308b": [8, 9, 11, 12, 93, 96, 97, 98, 100, 103], "\u5143\u3005": 8, "\u89e3\u6c7a": [8, 10, 95, 96, 97, 98, 101], "\u4e38\u3081\u308b": [8, 103], "\u3064\u306e": [8, 93, 94, 100, 103], "\u63d0\u6848": [8, 93, 96, 97], "\u5404\u5909": [8, 93], "\u306b\u3059\u3079\u3066": 8, "\u624b\u9806": [8, 9, 13, 95, 96, 98], "\u9069\u7528": [8, 93, 94, 95, 98, 99, 100, 101, 102, 103], "\u5b9f\u969b": [8, 95, 97, 98, 100, 103], "\u3001{": 8, "\u8fd1\u3044\u5024": 8, "\u671f\u5f85\u5024": 8, "\u8fd4\u3059": [8, 96, 103], "\u51e6\u7406": [8, 92, 93, 94, 97], "\u4ee5\u4e0b": [8, 11, 12, 13, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "\u5c0e\u304d\u51fa\u3057": [8, 98], "begin": [8, 101], "rl": 8, "sim": [8, 98], "1\u304b": 8, "\u7b49\u78ba": 8, "\u30b7\u30e7\u30c3\u30c8": [8, 99, 103], "\u5fdc\u3058": [8, 94, 97, 98], "\u6307\u6570": [8, 97, 101], "\u6e1b\u5c11": [8, 95], "\u5931\u6557": 8, "\u5fe0\u5b9f": 8, "3\u3064": [8, 92, 93, 94, 95, 103], "\u304a\u3088\u3073": [8, 10, 11, 93, 94, 95, 96, 97, 98, 102], "\u898f\u5b9a": [8, 92], "\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0": [8, 93], "\u3002(": 8, "\u3042\u305f\u308a": 8, "\u5f15\u7528": 8, "\u72ec\u7acb": [8, 95], "\u533a\u5225": 8, "\u3057\u3088": [8, 94], "\u76f4\u4ea4": 8, "\u7279\u5b9a": [8, 93, 95, 96, 97, 98, 99, 100, 103], "\u30da\u30a2": [8, 92], "bar": 8, "\u30e9\u30f3\u30c0\u30e0": [8, 95, 98, 103], "\\bar": 8, "\u306e\u3059\u3079\u3066": 8, "\u53cd\u8ee2": 8, "\\mathcal": [8, 96], "\u53d7\u3051": 8, "\u53d6\u308a": [8, 94, 100], "\u306b\u3088\u3063": [8, 10, 11, 92, 93, 94, 97, 98, 100, 101, 102, 103], "\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0": [8, 97, 98, 101, 103], "\u3057\u307e\u3059": [8, 9, 96, 98], "{\\": [8, 98], "rightarrow": [8, 72], "\u3060\u3051": [8, 9, 92, 93, 94, 95, 97, 103], "\u65b9\u5f0f": [8, 103], "\u672c\u8cea": [8, 98], "\u534a\u6c7a": [8, 103], "\u5b9a\u8ad6": [8, 103], "\u7b49\u4fa1": [8, 93, 94, 97], "\u6b63\u3057\u3044": [8, 93, 98, 103], "\u9078\u3076": 8, "\u672a\u77e5": 8, "))": [8, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103], "\u3068\u3068\u3082": 8, "^*": [8, 97, 98, 101], "\u306f\u308b": 8, "\u304b\u306b": 8, "\u9ad8\u304f": [8, 101], "\u3059\u3079\u3066": [8, 93, 95, 98, 103], "\u4f4e\u304f": 8, "\u5e78\u3044": 8, "\u8fd1\u4f3c": [8, 10, 93, 95, 98, 101, 103], "\u4e0b\u9650": [8, 92, 93], "\u6700\u9ad8": [8, 103], "\u30a8\u30cd\u30eb\u30ae\u30fc": [8, 97], "\u56fa\u6709": [8, 9, 11, 12, 95, 96, 97, 98, 100, 103], "{s": [8, 96], ".t": [8, 96, 98, 99], ".}": 8, "(f": [8, 94, 100, 102, 103], "\\right": [8, 97], "leq": [8, 72, 92, 93, 96, 98], "\\frac": 8, "{expected": 8, "fval": [8, 11, 17, 24, 26, 31, 35, 37, 40, 42, 48, 93, 94, 96, 102, 103], "{optimal": 8, "{e": 8, "[\\": 8, ",\u201d": 8, "[2": [8, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "conjugate": 8, "coding": 8, "sigact": 8, "news": 8, "vol": 8, "issue": [8, 103], "pp": 8, "link": 8, "[3": [8, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "masahito": 8, "hayashi": 8, ")-": [8, 95, 103], "random": [8, 25, 46, 47, 48, 49, 53, 63, 66, 67, 97, 99], "access": [8, 47, 48, 49], "does": [8, 11, 16, 19, 32, 49, 71, 83], "exist": [8, 16, 91], "\u2014one": 8, "enough": 8, "recover": 8, "one": [8, 11, 16, 22, 24, 27, 32, 33, 38, 41, 44, 47, 69, 70, 76], "four": 8, "bits": 8, "journal": 8, "physics": [8, 97], "number": [8, 16, 19, 22, 25, 26, 27, 33, 38, 40, 41, 44, 46, 47, 49, 51, 53, 54, 61, 63, 66, 67, 71, 72, 73, 74, 83, 97, 98, 99, 103], "qiskit": [9, 15, 22, 23, 28, 32, 34, 35, 38, 39, 41, 49, 51, 69, 70, 75, 76, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "\u30b5\u30dd\u30fc\u30c8": [9, 11, 12, 92, 94, 96, 97, 102], "\u74b0\u5883": 9, "\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0": 9, "\u8a73\u8ff0": 9, "\u307e\u305a\u305d\u308c": 9, "\u5f93\u3063": [9, 11, 13, 98], "\u3057\u307e\u3057\u3087": [9, 93], "\u30c7\u30d5\u30a9\u30eb\u30c8": [9, 92, 93, 98, 103], "\u30b3\u30fc\u30c9": [9, 11, 12, 13, 93], "\u30d7\u30ed\u30b0\u30e9\u30e0": [9, 98], "\u3042\u308b\u3044": [9, 97], "\u305d\u308c\u3089": [9, 11, 93, 97], "\u6a5f\u80fd": [9, 12, 93, 94, 96, 97, 100, 101, 103], "\u3002ibm": 9, "cplex": [9, 16, 23, 92, 93, 94, 96, 102], "cvxpy": 9, "matplotlib": [9, 96, 97, 98, 99, 100], "\u8a72\u5f53": [9, 97], "\u30ed\u30fc\u30ab\u30eb": 9, "\u958b\u59cb": [9, 93], "\u6700\u3082": [9, 95, 97], "\u7c21\u5358": [9, 10, 92, 96, 97, 100, 101], "\u30ac\u30a4\u30c9": [9, 10], "\u4eee\u60f3": 9, "\u8996\u899a": [9, 98], "\u30ea\u30b9\u30c8": [9, 92, 93], "\u3002\u3064\u307e\u308a": [9, 95, 96, 98], "pip": [9, 98, 102], "install": [9, 98, 102], "-optimization": [9, 11, 92, 94, 95, 96, 97, 98, 99, 100, 102, 103], "\u4e92\u63db": [9, 93, 103], "\u307e\u3060": 9, "\u81ea\u52d5": [9, 10, 94, 102], "\u30bd\u30fc\u30b9": [9, 10, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "\u306b\u3088\u308a": [9, 10, 92, 93, 94, 96, 97, 98, 101, 103], "package": 9, "index": [9, 16, 35, 67, 80, 82, 92], "pypi": [9, 23, 102], "\u30ea\u30dd\u30b8\u30c8\u30ea": 9, "\u6700\u65b0": 9, "\u30a2\u30af\u30bb\u30b9": [9, 11, 12, 92, 96], "\u8abf\u67fb": [9, 97, 103], "\u305f\u308a": [9, 94], "\u52b9\u679c": 9, "\u304a\u308a": [9, 93, 95, 97, 103], "\u5909\u66f4": [9, 93, 97, 98], "\u65b0\u898f": [9, 12], "\u306e\u3067": [9, 103], "\u6307\u793a": 9, "installing": 9, "source": [9, 11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "\u3082\u306e": [9, 103], "\u958b\u767a": [9, 10], "\u30af\u30ed\u30fc\u30f3": 9, "git": 9, "clone": 9, "github": [9, 16, 88, 91, 103], ".com": [9, 16, 23, 88, 91], "/qiskit": [9, 16, 88, 91], "-community": 9, ".git": 9, "\u30ec\u30dd\u30b8\u30c8\u30ea": 9, "``": [9, 11, 99, 103], "\u540d\u524d": [9, 92, 97, 101], "\u30fb\u30d5\u30a9\u30eb\u30c0": 9, "\u4f5c\u6210": [9, 92, 94, 95, 96, 97, 98, 101], "cd": 9, "\u3082\u3057": [9, 94, 101, 103], "\u30c6\u30b9\u30c8": [9, 10, 96], "\u6587\u6cd5": 9, "\u30c1\u30a7\u30c3\u30af": [9, 98, 103], "\u305f\u3044": [9, 98, 102, 103], "\u5411\u3051": [9, 97], "\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc": 9, "requirements": 9, "-dev": 9, ".txt": [9, 11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "\u7de8\u96c6": 9, "\u30e2\u30fc\u30c9": 9, "\u30d7\u30ed\u30b8\u30a7\u30af\u30c8": 9, "ibm": [9, 11, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103], "[cplex": [9, 98, 102], "]'": [9, 102], "lp": [9, 16, 102], "\u30d5\u30a1\u30a4\u30eb": 9, "\u8aad\u307f\u53d6\u308a": 9, ".cplex": [9, 23, 98], "\u30e9\u30c3\u30d1\u30fc": 9, "cplexoptimizer": [9, 35, 93, 96, 101, 102], "\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30b3\u30de\u30f3\u30c9": 9, "[cvx": 9, "\u30b3\u30de\u30f3\u30c9": 9, "goemanswilliamsonoptimizer": 9, "\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc": [9, 10, 97, 98, 101, 103], "[matplotlib": 9, "\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3": 9, "\u30af\u30e9\u30b9": [9, 92, 93, 94, 96, 98, 101, 103], "draw": [9, 55, 57, 58, 60, 65, 66, 67, 68, 97], "\u30e1\u30bd\u30c3\u30c9": [9, 92, 93, 97, 98, 103], "gurobipy": [9, 28, 87, 90, 102], "[gurobi": [9, 102], "gurobioptimizer": [9, 102], "dive": 9, "tutorials": 9, "find": [9, 22, 27, 32, 36, 41], "out": [9, 16, 55, 57, 58, 60, 65, 66, 67, 68], "about": [9, 35, 53], "\u554f\u984c": [10, 11, 92, 93, 94, 96, 98, 99, 101, 102], "\u30cf\u30a4\u30ec\u30d9\u30eb": 10, "\u30e2\u30c7\u30ea\u30f3\u30b0": 10, "\u3055\u307e\u3056\u307e\u306a": [10, 93, 96, 97, 98], "\u8981\u6c42": [10, 97], "\u8868\u73fe": [10, 93, 94, 97, 103], "\u5f93\u6765": 10, "\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc": [10, 103], "\u4f7f\u3044": [10, 101, 102], "\u3084\u3059\u3044": [10, 101], "\u30b9\u30a4\u30fc\u30c8": 10, "\u4ecb\u3057": [10, 96, 98], "\u5b9f\u91cf\u5b50": 10, "\u30c7\u30d0\u30a4\u30b9": [10, 94, 96, 97, 103], "\u7bc4\u56f2": [10, 92, 101], "\u5168\u4f53": [10, 94, 97, 98], "\u30ab\u30d0\u30fc": [10, 100], "\u30aa\u30fc\u30d7\u30f3": 10, "\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af": [10, 95], "\u6700\u9069\u5316": [10, 97, 98], "\u30e2\u30b8\u30e5\u30fc\u30eb": [10, 12, 92, 93, 97, 101, 103], "\u52b9\u7387": [10, 96, 97], "\u7d71\u4e00": 10, "\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9": [10, 11, 12], "\u8868\u73fe\u9593": 10, "\u5909\u5206": [10, 95, 96, 98, 103], "\u30b0\u30ed\u30fc\u30d0\u30fc": 10, "\u9069\u5fdc": [10, 97, 98], "\u63a2\u7d22": [10, 97, 103], "\uff08grover": [10, 95], "\u307e\u3067": [10, 11, 95, 96, 97, 98, 103], "\u591a\u6570": [10, 98], "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30bb\u30c3\u30c8": 10, "\u30e2\u30b8\u30e5\u30e9\u30fc": 10, "\u8a2d\u8a08": [10, 96, 98, 103], "\u65b0\u3057\u3044": [10, 11, 12, 96, 97, 98, 103], "\u8fc5\u901f": 10, "\u5bb9\u6613": 10, "\u4e92\u63db\u6027": 10, "\u691c\u8a3c": [10, 96], "\u30d9\u30f3\u30c1\u30de\u30fc\u30af": [10, 94, 96], "\u306f\u3058\u3081": [10, 103], "\u79fb\u884c": 10, "\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb": [10, 11, 12, 92, 93, 94, 96, 97, 103], "\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3": [11, 12], "terra": [11, 12, 94], "primitives": 11, "(estimator": 11, "sampler": [11, 12, 27, 46, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "\u6d3b\u7528": [11, 94, 95, 101, 103], "\u5b9f\u88c5": [11, 95, 96, 97], "opflow": 11, "\u4ee5\u524d": [11, 12, 13, 93, 94, 103], "\u5c06\u6765": [11, 97], "\u30ea\u30ea\u30fc\u30b9": 11, "\u5ec3\u6b62": [11, 12], "\u4e88\u5b9a": [11, 96], "\u975e\u63a8": [11, 13], "\u610f\u56f3": [11, 12], "\u3044\u307e\u305b": [11, 94, 97], "\u30ea\u30bd\u30fc\u30b9": [11, 12, 103], "\u8aad\u3080": [11, 12], "\u304a\u52e7\u3081": [11, 12, 103], ".sampler": 11, ".basesampler": 11, "backendsampler": 11, "(qiskit": 11, "-terra": [11, 16, 88, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103], "aersampler": 11, "-aer": [11, 92, 94, 95, 96, 97, 98, 99, 100, 103], "runtime": [11, 103], "-ibm": 11, "-runtime": 11, ".algorithms": [11, 12, 22, 23, 28, 32, 35, 38, 41, 49, 51, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], ".minimum": [11, 12, 49, 103], "_solvers": [11, 102], "\u5b58\u5728": [11, 12, 93, 97], ".*": [11, 12], "\u4e00\u65b9": [11, 12], "_eigensolvers": [11, 12, 49, 103], "\u9055\u3044": [11, 103], "(\u65e7": 11, "(\u65b0": 11, ".minimumeigensolver": [11, 12], ".samplingminimumeigensolver": [11, 12], "\u306a\u304a": 11, "\u57fa\u672c": [11, 12, 93, 94, 98], "\u6271\u3046": [11, 12, 97, 101], "\u4f8b\u5916": [11, 12, 16, 18, 22, 23, 27, 28, 32, 33, 34, 35, 38, 39, 41, 43, 44, 46, 47, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94], "\u3002minimumeigenoptimizer": 11, "\u7d99\u627f": [11, 94], "_eigensolver": [11, 12, 49], ".numpyminimumeigensolver": [11, 12], "\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0": 11, "\u6301\u3063": [11, 93, 97], ".qaoa": [11, 12], ".vqe": [11, 94, 103], ".samplingvqe": [11, 12, 94], "\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7": [11, 92], "_optimization": [11, 12, 22, 23, 28, 32, 35, 38, 41, 49, 51, 69, 70, 76, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "sample": [11, 30, 42, 46, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 102, 103], ".maximize": [11, 41, 92, 93, 99, 101, 102], "print": [11, 12, 23, 28, 35, 39, 41, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], ".prettyprint": [11, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103], "name": [11, 16, 17, 24, 26, 31, 35, 37, 40, 48, 60, 66, 78, 79, 81, 85, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103], "maximize": [11, 16, 93, 97, 100, 101, 102, 103], "subject": [11, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103], "no": [11, 18, 22, 25, 27, 29, 32, 33, 34, 46, 47, 70, 92, 93, 94, 95, 97, 100, 101, 103], "mes": [11, 12], "meo": [11, 12, 100, 102], "=mes": [11, 12], "(result": [11, 12, 35, 93, 96, 97, 100, 101, 102], "status": [11, 16, 17, 24, 26, 31, 35, 36, 37, 40, 41, 42, 48, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103], "=success": [11, 93], "basicaer": 11, ".utils": [11, 94, 97, 98, 99, 100, 101], "quantuminstance": 11, "backend": [11, 46], ".get": [11, 92, 97, 98], "_backend": 11, "qasm": 11, "_simulator": 11, "shots": [11, 12, 46, 51, 103], "qins": 11, "(backend": 11, "=backend": 11, "=shots": 11, "(optimizer": 11, ", quantum": 11, "_instance": [11, 66, 67, 97, 98], "=qins": 11, "(sampler": [11, 12, 94, 96, 97, 98, 101, 102, 103], "=sampler": [11, 12, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], ", optimizer": [11, 12, 94, 96, 98, 100, 101, 102], "(ansatz": 11, "=realamplitudes": [11, 12, 98], ", ansatz": [11, 12, 97, 98], "\u539f\u56e0": 11, "\u30a8\u30e9\u30fc": [11, 92], "\u30bb\u30eb": [11, 92], "try": [11, 22, 23, 27, 28, 32, 33, 34, 38, 39, 41, 44, 92, 98], "except": [11, 92, 98], "typeerror": [11, 27, 32, 38, 49, 84], "ex": 11, "(ex": 11, "support": [11, 49], "you": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "use": [11, 22, 27, 32, 38, 41, 44, 45, 46, 47, 49, 69, 80, 82, 96, 98, 102, 103], "instead": [11, 55, 96], "slsqpoptimizer": [11, 12, 18], "pre": [11, 12, 19, 44, 97, 101], "=slsqpoptimizer": [11, 12], ", relax": [11, 12, 101], "_for": [11, 12, 44, 93, 94, 101], "_pre": [11, 12, 44, 101], "=true": [11, 12, 92, 94, 96, 97, 98, 101, 102, 103], "=qaoa": [11, 12, 100, 101], "epsilon": [11, 12, 43, 44, 101], "basesampler": [11, 27, 46], "\u306e\u3044": [11, 92, 96], "\u305a\u308c": [11, 92, 96], "\u6307\u5b9a": [11, 92, 97, 103], "(num": [11, 12], "_value": [11, 12, 25, 27, 66, 97, 98, 103], "_qubits": [11, 12, 26, 27, 47, 97, 100, 103], "num": [11, 12, 25, 27, 38, 44, 47, 63, 67, 95, 97, 100, 103], "_iterations": [11, 12, 27, 29, 95], "\u8a2d\u5b9a": [11, 92, 96, 99, 101, 102], "\u4e00\u3064": [11, 100], "raises": [11, 27], "because": 11, "both": [11, 27], "valueerror": [11, 27, 33, 46, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "passed": [11, 22, 41, 44, 71, 72, 76], ".tools": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], ".jupyter": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "_version": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "_table": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "_copyright": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "version": [11, 44, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "informationqiskit": [11, 92, 94, 95, 96, 97, 98, 99, 100, 103], "softwareversionqiskit": [11, 92, 94, 95, 96, 97, 98, 99, 100, 103], "0qiskit": [11, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103], "1qiskit": [11, 92, 93, 95, 96, 98, 101, 102], "-machine": [11, 95, 96, 98], "-learning": [11, 95, 96, 98], "0system": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103], "informationpython": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "compilerclang": [11, 93, 94, 95, 96, 97, 98, 99, 100, 103], "clang": [11, 93, 94, 95, 96, 97, 98, 99, 100, 103], "buildmain": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "oct": [11, 95, 96, 98], "osdarwincpus": [11, 93, 94, 95, 96, 97, 98, 99, 100, 103], "4memory": [11, 92, 94, 95, 96, 97, 98, 99, 100], "gb": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "0tue": [11, 95, 96, 98], "dec": [11, 95, 96, 98, 101, 102], "jst": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 103], "code": [11, 47, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "part": [11, 16, 81, 83, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "&copy": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "copyright": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "licensed": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "under": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "apache": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "license": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "mayobtain": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "copy": [11, 16, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "file": [11, 16, 60, 66, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "root": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "directory": [11, 16, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "tree": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "at": [11, 19, 29, 37, 38, 63, 82, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "http": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "www": [11, 23, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], ".apache": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "/licenses": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "/license": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "any": [11, 16, 17, 22, 23, 24, 26, 31, 33, 35, 37, 40, 41, 48, 72, 78, 79, 80, 81, 82, 83, 85, 88, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "modifications": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "derivative": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "works": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "retain": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "thiscopyright": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "notice": [11, 63, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "modified": [11, 19, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "files": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "carry": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "indicatingthat": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "they": [11, 72, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "have": [11, 84, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "been": [11, 27, 47, 49, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "altered": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "originals": [11, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "\u30b9\u30bf\u30f3\u30c9\u30a2\u30ed\u30f3\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc": 12, "\u53d6\u3063": 12, "\u4ee3\u308f": 12, "\u65e2\u5b58": 12, "\u6271\u3048": 12, "\u306a\u305c": 12, "\u72b6\u614b": [12, 93, 94, 95, 97, 98, 101, 103], "\u306a\u3063": [13, 101], "\u524a\u9664": [13, 93], "\u5207\u308a": [13, 93], "\u66ff\u3048\u308b": 13, "\u8a18\u8f09": [13, 95], "exception": [15, 23, 27, 28, 39], "message": [15, 18, 22, 25, 27, 32, 33, 34, 38, 40, 41, 44, 49, 76], "returned": [15, 16, 20, 29, 40], "add": [15, 92, 97, 103], "_note": 15, ".add": [15, 92, 96, 97, 98, 99, 101, 102], "(note": 15, "note": [15, 16, 72, 86, 87, 102], "_traceback": 15, ".with": 15, "(tb": 15, "self": [15, 98], "._": 15, "traceback": 15, "__": [15, 98, 103], "tb": 15, "\u30d9\u30fc\u30b9\u30af\u30e9\u30b9": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85], "object": [16, 17, 19, 20, 22, 24, 26, 31, 33, 35, 37, 40, 41, 42, 43, 45, 47, 48, 50, 51, 84, 103], "\u30d1\u30e9\u30e1\u30fc\u30bf": [16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 96, 97, 98, 103], "str": [16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 44, 46, 48, 49, 51, 60, 66, 69, 76, 78, 79, 80, 81, 82, 83, 85, 97, 98, 101, 103], "attributes": [16, 17, 18, 22, 23, 24, 26, 28, 29, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 44, 46, 47, 48, 49, 50, 51, 55, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 76, 78, 79, 80, 81, 82, 83, 84, 85], "linear": [16, 32, 38, 39, 72, 76, 79, 80, 81, 83, 86, 87, 88, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102], "_constraints": [16, 98], "returns": [16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 44, 46, 48, 49, 52, 63, 69, 71, 72, 76, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 99], "list": [16, 17, 21, 24, 25, 26, 27, 30, 31, 32, 35, 37, 38, 40, 43, 44, 47, 48, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 94, 97, 98], "\u623b\u308a\u5024": [16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "_index": [16, 47], "dictionary": [16, 17, 24, 26, 31, 35, 37, 40, 48, 80, 82], "maps": [16, 47], "constraint": [16, 19, 22, 70, 71, 72, 79, 81], "its": [16, 19, 40, 66, 80, 82, 97], "objective": [16, 17, 24, 26, 31, 32, 35, 37, 39, 40, 41, 42, 45, 47, 48, 71, 72, 76, 83, 86, 87, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103], "infeasible": [16, 36, 38, 92, 94], "due": [16, 23, 27, 28, 38, 39, 98], "variable": [16, 17, 22, 24, 26, 31, 33, 35, 37, 38, 40, 41, 43, 47, 48, 55, 56, 59, 64, 65, 68, 69, 70, 72, 79, 80, 81, 82, 83, 88, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "substitution": [16, 38, 92], "none": [16, 17, 18, 22, 23, 24, 26, 27, 28, 29, 31, 32, 35, 36, 37, 38, 40, 44, 46, 48, 49, 50, 51, 53, 54, 55, 57, 58, 60, 63, 65, 66, 67, 68, 71, 72, 76, 83, 86, 98, 103], "adds": 16, "\u2019s": [16, 47, 55, 73, 74], "empty": [16, 18, 23, 25, 28, 33, 34, 39, 92], "default": [16, 19, 27, 32, 38, 41, 44, 47, 49, 54, 55, 88, 97, 103], ".g": [16, 32, 38, 63], "added": [16, 71, 72, 76], "qiskitoptimizationerror": [16, 18, 22, 23, 27, 28, 32, 33, 34, 35, 38, 39, 41, 43, 44, 46, 47, 53, 66, 69, 70, 71, 72, 73, 74, 76, 80, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94], "already": [16, 43, 49], "occupied": 16, "_dict": [16, 17, 24, 26, 31, 35, 37, 40, 48, 80, 82, 92], "keys": [16, 80, 82], "key": [16, 37, 101], "_format": [16, 60, 66], "{}": [16, 92, 94], "uses": [16, 27, 44, 46, 49, 80, 82], "var": [16, 35, 47, 70, 94], "construct": [16, 47, 72, 96, 97, 98, 103], "(s": [16, 94, 101], ").": [16, 19, 22, 32, 38, 41, 43, 47, 49, 70, 89, 90, 94, 95, 96, 97, 98, 99], "format": [16, 55, 57, 58, 60, 62, 65, 66, 67, 68, 76, 92, 94, 99, 101, 102], "/index": [16, 92], "int": [16, 19, 22, 25, 26, 27, 33, 37, 38, 40, 41, 44, 46, 47, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 78, 79, 80, 81, 82, 83, 85, 93, 94, 97, 100, 101, 102], "sequence": 16, "interpreted": 16, "otherwise": [16, 18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 69, 72, 73, 74, 76, 88, 99], "elements": [16, 86, 87, 89, 90], "converted": [16, 27, 32, 38, 44, 49, 69, 70, 71, 72, 73, 74, 76], "strings": 16, "substituted": [16, 37, 92], "mapping": [16, 19, 47, 70], "names": [16, 17, 24, 26, 29, 31, 35, 36, 37, 40, 48, 80, 82], "taken": 16, "less": [16, 25], "than": [16, 22, 25, 33, 41, 47, 85, 88], "instantiation": 16, "attempted": 16, "more": [16, 22, 33, 41, 47, 88], "nested": 16, "dict": [16, 23, 26, 37, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 78, 79, 80, 81, 82, 83, 92], "_list": [16, 98, 99], "clear": 16, "clears": 16, "deletes": 16, "all": [16, 19, 23, 24, 28, 29, 46, 67, 69, 84, 99, 101], "function": [16, 17, 22, 24, 26, 27, 31, 32, 35, 37, 39, 40, 41, 42, 45, 47, 48, 72, 83, 86, 87, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "lowerbound": [16, 70, 85, 92, 102], "upperbound": [16, 22, 33, 41, 70, 85, 92, 93, 102], "1e": [16, 41, 53, 77, 85, 93, 97, 101], "float": [16, 17, 19, 20, 22, 24, 25, 26, 27, 31, 32, 33, 35, 37, 38, 40, 41, 42, 43, 44, 48, 49, 53, 66, 69, 70, 71, 72, 73, 74, 76, 78, 79, 80, 81, 82, 83, 85, 86, 88, 91, 94], "lower": [16, 22, 33, 41, 80, 82, 85, 92, 99], "bound": [16, 22, 33, 41, 80, 82, 85, 92], "upper": [16, 22, 33, 41, 80, 82, 92], "export": [16, 92], "_as": [16, 92, 102], "_lp": [16, 92, 102], "_string": [16, 92, 102], "string": [16, 17, 22, 23, 24, 26, 28, 31, 35, 37, 39, 40, 41, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "representing": [16, 17, 24, 26, 31, 32, 35, 37, 40, 48, 55, 57, 58, 60, 65, 66, 67, 68], "_ising": [16, 94, 97, 99, 100], "_op": [16, 47, 88, 91, 103], "offset": [16, 47, 83, 88, 91, 94, 97, 98, 99, 100, 103], "false": [16, 18, 19, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76, 80, 82, 88], "create": [16, 43, 44, 66, 67, 88, 94, 97, 99, 101, 103], "operator": [16, 47, 88, 91, 94], "shift": [16, 88], "value": [16, 17, 19, 20, 22, 24, 25, 26, 27, 29, 31, 33, 35, 36, 37, 38, 40, 41, 42, 44, 47, 48, 53, 66, 67, 72, 80, 82, 83, 86, 88, 91, 94, 95, 96, 97, 99, 100, 101, 102, 103], "mapped": [16, 88, 91], "qubits": [16, 26, 27, 47, 88, 91, 100, 103], "same": [16, 47, 88, 91, 100], "order": [16, 35, 66, 88, 91, 94, 97], "-th": [16, 88, 91], "see": [16, 23, 40, 88, 91], "/issues": [16, 88, 91], "details": [16, 23, 46, 88, 91], "baseoperator": [16, 88], "constant": [16, 47, 77, 83, 88, 91, 92, 98], "ising": [16, 32, 88, 91, 94, 97, 99], "bool": [16, 18, 19, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76, 80, 82, 88, 102], "true": [16, 18, 19, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76, 88, 97, 101], "treated": [16, 88], "term": [16, 25, 72, 81, 88, 99], "since": [16, 23, 28, 46, 88], "else": [16, 23, 28, 97, 98, 99], "there": [16, 25, 27, 38, 63, 69, 72, 88], "xs": [16, 88], "zs": [16, 88], "notimplementederror": 16, "input": [16, 26, 47, 66, 67], "listop": 16, "get": [16, 17, 18, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 44, 48, 49, 54, 60, 76, 94, 98], "_feasibility": 16, "_info": [16, 93], "whether": [16, 18, 22, 23, 25, 27, 28, 29, 32, 33, 34, 38, 39, 41, 44, 47, 49, 53, 76, 80, 82], "feasible": [16, 19, 22, 36, 97, 98], "along": 16, "violations": [16, 22], "param": [16, 66], "[variable": 16, "]:": [16, 44, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 72, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "violated": 16, "[constraint": 16, "len": [16, 97, 103], "total": [16, 61, 66, 97, 101, 102], "vars": [16, 102], "_linear": [16, 92], "_constraint": [16, 92, 93, 96, 99, 101, 102], "corresponding": [16, 17, 24, 26, 31, 32, 35, 37, 38, 40, 47, 48, 50, 51, 55, 56, 59, 64, 65, 68, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90], "indexerror": 16, "size": [16, 22, 55], "keyerror": 16, "linearconstraint": 16, "_num": [16, 37, 38, 94], "_binary": 16, "_continuous": 16, "_integer": 16, "_quadratic": [16, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 92, 93, 97, 100, 103], "vartype": [16, 85, 101], "specified": [16, 18, 22, 27, 32, 33, 38, 41, 44, 51, 55, 57, 58, 60, 65, 66, 67, 68, 69, 103], "type": [16, 27, 29, 32, 35, 36, 38, 66, 69, 70, 85], "filtered": [16, 94], "counted": 16, "quadraticconstraint": 16, "_variable": 16, "_feasible": [16, 97], "ndarray": [16, 17, 22, 24, 25, 26, 31, 33, 35, 37, 40, 41, 42, 43, 48, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83], "sense": [16, 69, 73, 74, 78, 79, 81, 83, 92, 93], "<=": [16, 92, 102], "rhs": [16, 78, 79, 81, 92, 93, 98], "form": [16, 27, 32, 38, 44, 75, 76, 82, 83, 97, 100], "spmatrix": [16, 79, 80, 81, 82, 83], "coefficients": [16, 79, 80, 81, 82, 83, 92], "-hand": [16, 78, 79, 81], "side": 16, "constraintsense": [16, 78, 79, 81, 92], "eq": [16, 70, 92], "denote": 16, "equal": [16, 35, 54, 103], "\u300f.": 16, "ge": [16, 92, 93], "greater": [16, 85], "-than": 16, "-or": 16, "-equal": 16, "le": [16, 92, 93], "exists": [16, 71, 72, 91], "valid": 16, "sets": [16, 47, 60], "maximized": 16, "tuple": [16, 22, 33, 37, 41, 49, 81, 82, 83, 85, 91, 94, 97], "created": [16, 27, 32, 38, 43, 44, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68], "minimize": [16, 22, 33, 41, 92, 94, 95, 96, 97, 100, 101], "minimized": 16, "prettyprint": [16, 17, 24, 26, 31, 35, 37, 40, 48, 92, 99, 102], "wrap": 16, "pretty": [16, 17, 24, 26, 31, 35, 37, 40, 48, 102], "printed": [16, 17, 24, 26, 31, 35, 37, 40, 48], "width": 16, "output": [16, 22, 23, 26, 28, 39, 41, 82], "disabled": 16, "setting": [16, 23, 28, 39], "might": 16, "exceed": 16, "long": 16, "won": 16, "\u2019t": [16, 44], "wrapped": [16, 22, 23, 28, 39, 41], "non": [16, 23, 28, 47, 89, 90, 102], "-printable": 16, "(x": [16, 63, 72, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103], "read": [16, 60, 66], "_from": [16, 97], "_file": [16, 102], "filename": [16, 60, 66], "loads": 16, "loaded": [16, 86, 87], "filenotfounderror": 16, "installed": [16, 23, 28, 96], "present": 16, "pythonpath": 16, "remove": [16, 92, 102], "substitute": [16, 92], "_variables": [16, 43, 92], "constants": [16, 92], "substitutes": 16, "replace": 16, "'x": [16, 92], "':": [16, 35], "means": 16, "weighted": [16, 32, 46, 103], "everything": 16, "reference": [16, 22, 41, 96, 99], "make": [16, 47, 92], "sure": [16, 47], "indices": [16, 47, 54, 55, 58, 59, 60, 65, 66, 68, 80, 82], "matched": 16, "correctly": 16, "bounds": [16, 46, 80, 82, 92, 102], "updated": [16, 20], "accordingly": 16, "('": [16, 35, 92], "',": [16, 70, 92], "substituting": [16, 37], ".status": [16, 92, 94], ".valid": 16, "gets": [16, 92], ".infeasible": [16, 92], "invalid": [16, 27, 32, 38], "follows": [16, 35, 87], "times": [16, 92, 96], "coefficient": [16, 88], "zero": [16, 22, 33, 41, 53], "write": [16, 28], "_to": [16, 101], "writes": 16, "model": [16, 55, 63, 86, 87, 89, 90, 92, 95, 96, 99, 101, 102], "written": 16, "my": [16, 92, 98], "_problem": [16, 54, 59, 61, 66, 67, 98, 101], ".lp": 16, "appended": 16, "\u300f,": 16, "suffix": 16, "oserror": 16, "open": [16, 102], "docplexexception": 16, "admmoptimization": 17, "optimal": [17, 19, 24, 31, 32, 37, 48, 99, 102, 103], "found": [17, 18, 19, 24, 25, 26, 31, 33, 34, 35, 37, 40, 48, 98, 102], "admm": [17, 18, 19, 20], "admmstate": 17, "internal": [17, 20, 38, 99], "optimizationresultstatus": [17, 24, 26, 31, 35, 37, 40, 42, 48, 94], "termination": [17, 24, 26, 31, 35, 36, 37, 40, 48], "raw": [17, 24, 26, 31, 35, 37, 40, 48], "results": [17, 21, 24, 26, 27, 29, 30, 31, 35, 37, 38, 40, 44, 46, 48, 63, 95, 97, 99, 103], "currently": [17, 24, 26, 31, 35, 37, 40, 48], "dump": [17, 24, 26, 31, 35, 37, 40, 48], "leftovers": [17, 24, 26, 31, 35, 37, 40, 48], "additional": [17, 24, 26, 31, 35, 37, 40, 48, 69, 97], "information": [17, 23, 24, 26, 28, 31, 35, 37, 39, 40, 41, 46, 48, 50, 53, 66, 67, 75], "samples": [17, 21, 24, 26, 30, 31, 35, 37, 40, 46, 48, 51, 94, 101, 102, 103], "_names": [17, 24, 26, 31, 35, 37, 40, 48], "values": [17, 19, 20, 22, 24, 25, 26, 31, 33, 35, 37, 40, 41, 42, 43, 46, 47, 48, 49, 50, 51, 53, 59, 78, 79, 80, 81, 82, 83, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103], "case": [17, 23, 24, 26, 31, 35, 37, 38, 40, 44, 48, 69, 70, 71, 72, 73, 74, 76, 96, 97, 99], "failure": [17, 24, 26, 31, 35, 36, 37, 40, 48, 69, 70, 71, 72, 73, 74, 94], "_correlations": [17, 24, 26, 31, 35, 37, 40, 48], "zi": [17, 24, 26, 31, 35, 37, 40, 48], "zj": [17, 24, 26, 31, 35, 37, 40, 48], "correlation": [17, 24, 26, 31, 35, 37, 40, 48], "matrix": [17, 24, 25, 26, 31, 35, 37, 40, 48, 60, 66, 80, 82, 92, 97, 99], "_optimizer": [18, 37, 38, 93, 94, 95, 96, 97, 98, 103], "params": [18, 96, 99], "optimizationalgorithm": [18, 22, 23, 25, 27, 28, 32, 33, 38, 39, 41, 44, 49], "implementation": [18, 19, 20, 43, 44], "-based": 18, "heuristic": 18, "introduced": [18, 38], "references": 18, "gambella": [18, 96], "simonetto": [18, 96], "multi": [18, 22, 33, 41, 96], "-block": [18, 96], "heuristics": [18, 96], "mixed": [18, 96], "-binary": [18, 47, 70, 96], "computers": [18, 96], "preprint": [18, 94, 95, 96], "instance": [18, 27, 31, 32, 33, 37, 38, 44, 47, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 84, 98, 99, 100], "effectively": 18, "minimumeigenoptimizer": [18, 37, 38, 44, 95, 96, 97, 98, 99, 100, 101, 102, 103], "initialized": 18, "numpyminimumeigensolver": [18, 31, 32, 38, 94, 95, 96, 97, 99, 100, 101], "admmparameters": [18, 96], "parameters": [18, 19, 22, 23, 38, 41, 98, 102], "current": 18, "_compatibility": [18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76], "_msg": [18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76], "checks": [18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76], "implementing": [18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76], "check": [18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76, 98], "compatibility": [18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76], "incompatibility": [18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76], "issues": [18, 25, 33, 34], "were": [18, 25, 33, 34], "_compatible": [18, 22, 23, 25, 27, 28, 32, 33, 34, 38, 39, 41, 44, 49, 76], "tries": [18, 22, 23, 27, 28, 32, 33, 34, 38, 39, 41, 44], "solves": [18, 22, 23, 28, 32, 33, 34, 41, 44], "admmoptimizationresult": 18, "_initial": [19, 20, 43, 44, 96], "factor": [19, 27, 32, 38, 44, 49, 71, 72, 76, 96, 99], "_c": [19, 96], "beta": [19, 96, 101], "maxiter": [19, 96, 99], "tol": [19, 96], "max": [19, 25, 47, 49, 54, 59, 60, 97, 98, 100, 101, 103], "_time": [19, 97, 100, 103], "inf": 19, "three": [19, 96], "_block": [19, 96], "vary": 19, "_rho": 19, "tau": 19, "_incr": 19, "_decr": 19, "mu": [19, 99, 101], "_res": [19, 101], "_merit": 19, "warm": [19, 43, 44, 101], "_start": [19, 22, 33, 41, 44, 101], "defines": [19, 29, 40, 98], "their": [19, 25, 44], "initial": [19, 20, 22, 33, 41, 43, 44, 101], "parameter": [19, 20, 22, 33, 41, 43, 44, 98, 101], "penalizing": 19, "penalization": 19, "decision": [19, 47, 49], "maximum": [19, 22, 41, 47, 49, 54, 59, 60, 66, 67, 103], "iterations": [19, 27, 40, 41, 96, 99], "tolerance": [19, 22, 53], "residual": 19, "convergence": 19, "running": 19, "time": [19, 97, 100, 102], "seconds": 19, "boolean": 19, "flag": 19, "select": 19, "block": 19, "rule": 19, "update": 19, "increases": 19, "each": [19, 20, 26, 29, 30, 38, 41, 47, 51, 54, 67, 99, 103], "iteration": [19, 26, 29, 38], "according": [19, 25, 43, 44], "primal": 19, "dual": 19, "residuals": [19, 96], "_by": 19, "_residuals": 19, "boyd": [19, 96], "parikh": [19, 96], "chu": [19, 96], "peleato": [19, 96], "eckstein": [19, 96], "distributed": [19, 96], "statistical": [19, 96], "learning": [19, 96], "alternating": [19, 96], "direction": [19, 96], "multipliers": [19, 96], "foundations": [19, 96], "trends": [19, 96], "machine": [19, 96], "compute": [19, 25, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 98], "merit": 19, "start": [19, 22, 29, 33, 36, 41, 43, 44], "-initialized": 19, "first": [19, 22, 33, 37, 41, 98], "option": 19, "guarantee": 19, "even": [19, 96], "should": [19, 29, 33, 35, 43, 44, 89, 90], "tuning": 19, "options": [19, 69], "help": 19, "considered": 19, "hint": 19, "where": [19, 54, 63, 67, 72, 97], "iterative": [19, 38], "op": [20, 94, 100], "keeps": 20, "track": 20, "various": 20, "stored": [20, 29, 38], "during": [20, 32], "recreated": 20, "third": 20, "abc": [21, 33, 34, 52, 62, 75], "base": [21, 35, 44, 52], "abstract": [21, 33, 34, 52, 57, 62, 75, 78], "aggregates": [21, 30, 44], "aggregate": [21, 30], "minimumeigenoptimizationresult": [21, 30, 32, 37, 44], "combined": [21, 30], "aggregated": [21, 30], "solutionsample": [21, 24, 26, 30, 31, 35, 48, 94, 102, 103], "rhobeg": 22, "rhoend": 22, "maxfun": 22, "disp": [22, 23, 28, 39, 102], "catol": 22, "trials": [22, 33, 41], "clip": [22, 33, 41], "multistartoptimizer": [22, 41], "scipy": [22, 39, 40, 41], "wrapper": [22, 23, 28, 32, 39, 41], ".optimize": [22, 39, 40, 41], ".fmin": [22, 40, 41], "_cobyla": 22, "docs": [22, 39, 41, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102], ".scipy": [22, 39, 41], "/doc": [22, 39, 41], "/scipy": [22, 39, 41], "/generated": [22, 39, 41], ".html": [22, 39, 41, 92, 103], "arguments": [22, 41], "fmin": [22, 41], "constructor": [22, 41, 85], "\u30b5\u30f3\u30d7\u30eb": [22, 23, 28, 32, 35, 38, 41, 69, 70, 76, 97, 98, 103], ">>": [22, 23, 28, 35, 41, 69, 70, 76], "specify": [22, 23, 28, 32, 38, 41], "here": [22, 23, 28, 32, 38, 41], "initializes": [22, 23, 28, 38, 39, 41, 44, 78], "initializer": [22, 32, 38, 41, 98], "takes": [22, 32, 38, 41], "algorithmic": [22, 41], "stores": [22, 41, 80, 82], "later": [22, 41], "invoked": [22, 41], "optimum": [22, 41, 99], "consisting": [22, 32, 41, 81, 85], "reasonable": 22, "changes": [22, 43, 44], "final": [22, 40, 41, 99], "accuracy": [22, 41], "precisely": 22, "guaranteed": 22, "trust": 22, "region": 22, "controls": 22, "frequency": 22, "implies": 22, "}.": [22, 82, 97, 103], "evaluations": 22, "absolute": [22, 53], "-start": [22, 33, 41, 44, 101], "trial": [22, 33, 41], "guess": [22, 33, 41], "guesses": [22, 33, 41], "uniformly": [22, 33, 41, 46, 63], "drawn": [22, 33, 41], "[lowerbound": [22, 33, 41], "clipping": [22, 33, 41], "unbounded": [22, 33, 41, 80, 82], "/or": [22, 33, 41], "replaced": [22, 33, 41], "-clip": [22, 33, 41], "correspondingly": [22, 33, 41], "contains": [22, 24, 41, 47, 70, 80, 82, 86, 87, 89], "explaining": [22, 27, 32, 38, 41, 44, 49, 76], "describing": [22, 27, 32, 38, 39, 40, 41, 44, 49, 76], "_solve": [22, 33, 41], "applies": [22, 33, 38, 41], "callable": [22, 33, 41], "minimizes": [22, 33, 41], "runs": [22, 23, 27, 28, 32, 33, 34, 38, 39, 41], "incompatible": [22, 23, 27, 28, 33, 34, 38, 39, 41, 76], "_parameters": [23, 99, 102, 103], "/project": [23, 102], "/cplex": [23, 102], ".is": [23, 28, 97], "_cplex": 23, "_installed": [23, 28], ".ibm": 23, "/docs": 23, "/en": 23, "/icos": 23, "topic": 23, "=cplex": 23, "-parameters": 23, "display": [23, 28, 39, 102], "accepts": [23, 28], "modeled": [23, 28], "may": [23, 25, 28, 39, 40, 69, 70, 92, 94, 97, 98, 99, 100], "throw": 23, "determined": [23, 72], "-convex": [23, 28], "static": [23, 25, 28, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 76], "depending": [23, 28, 39], "settings": [23, 28, 39], "sdp": 24, "_solution": [24, 97, 98, 102], "properties": [24, 26, 40], "contain": [24, 69, 70, 71], "explore": 24, "possible": [24, 69], "_cuts": 25, "sort": [25, 99], "unique": 25, "seed": [25, 46, 53, 63, 66, 67, 97, 99, 100, 103], "-cut": [25, 60, 97, 98, 100, 103], ",j": [25, 63, 97], "<i": 25, "]*": 25, "])": [25, 35, 92, 94, 97, 98, 99, 100, 101, 103], "therefore": 25, "negative": 25, "adjacency": [25, 60, 66], "graph": [25, 55, 57, 58, 60, 63, 65, 66, 67, 68, 97, 100, 103], "cuts": 25, "generate": [25, 47, 63, 98], "thus": 25, "generator": [25, 46, 53, 63], "_cut": [25, 60, 97], "adj": [25, 66, 97], "_matrix": [25, 66, 80, 82, 97], "numpy": [25, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 94, 97, 98, 99, 100, 101, 103], "array": [25, 55, 57, 58, 60, 62, 65, 66, 67, 68, 80, 82, 92, 103], "generated": [25, 92, 102], "operation": [26, 41], "_counts": [26, 51], "_input": 26, "_output": [26, 41], "intermediate": [26, 29, 37, 38, 99, 100], "_fval": [26, 48, 103], "threshold": [26, 38, 94], "_samples": [26, 31, 94, 101], "constructs": [26, 33, 37, 40, 81, 83], "specific": [26, 40], "defined": [26, 40, 80, 82], "counts": [26, 51, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "performed": 26, "per": [26, 47, 49, 103], "represent": [26, 54], "minimization": [26, 73, 74, 76], "expected": [26, 46, 84, 99], "consistent": 26, "probability": [26, 30, 31, 42, 47, 94, 99, 101, 102, 103], "sampling": [26, 27, 31, 46], "getter": [26, 55, 57, 58, 59, 60, 63, 65, 66, 67, 68], "converters": [27, 32, 35, 38, 44, 75, 93], "penalty": [27, 32, 38, 44, 49, 71, 72, 76, 99], "gas": [27, 95], "improvement": 27, "quadraticprogramconverter": [27, 32, 38, 44, 69, 70, 71, 72, 76], "converting": [27, 32, 38, 44], "internally": [27, 32, 38, 44, 80, 82], "quadraticprogramtoqubo": [27, 32, 38, 44, 49, 93, 97, 100, 101], "converter": [27, 49, 69], "circuits": [27, 43, 44, 46], "attributeerror": 27, "gurobi": [28, 102], "_gurobi": 28, "suppress": 28, "info": 28, "stdout": 28, "sys": 28, "devnull": 28, "...": 28, "def": [28, 94, 97, 98, 99, 101, 102], "noop": 28, "(*": 28, "args": 28, "**": [28, 96, 97, 98, 99, 103], "kwargs": 28, "pass": 28, "..": 28, "close": 28, "flush": 28, "writelines": 28, ".stdout": 28, "qualname": [29, 36], "boundary": [29, 36], "enum": [29, 36], "recursiveminimumeigenoptimizer": 29, "last": [29, 37, 38, 97], "_iteration": [29, 38], "baseaggregator": [30, 44], "averaging": 30, "min": [31, 32, 37, 38, 44, 49, 94, 95, 98, 99, 101], "_result": [31, 48, 49, 60, 94, 95, 99, 100, 101, 102, 103], "eigen": [31, 32, 37, 38, 93, 96, 97], "samplingminimumeigensolver": [31, 32, 94], "samplingminimumeigensolverresult": 31, "numpyminimumeigensolverresult": 31, "underlying": [31, 48], "solvers": [32, 44], "assumes": 32, "thereof": 32, "converts": [32, 72], "expanding": 32, "adding": 32, "terms": [32, 38, 71, 72], "resulting": [32, 51, 99], "translated": [32, 89, 90, 91], "minimal": 32, "vector": [32, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "eigenstate": 32, "correspond": [32, 60, 66], "solver": [32, 38, 44, 94, 96], "good": 32, "outline": [32, 38], "how": [32, 38], "(..": [32, 38], ".)": [32, 38, 92, 103], "(qaoa": [32, 38, 94, 96, 97, 101, 102], "optional": [32, 44], "scale": [32, 38, 71, 72, 76], "computed": 32, "todo": 32, "applying": [32, 44], "logic": [32, 44], "eigensolver": [32, 44, 46, 48, 49, 95, 97, 98, 99, 100], "implements": 33, "-classed": 33, "smaller": 33, "specifying": [35, 79, 81], "')": [35, 92], "x1": [35, 95, 101], "x3": [35, 101], "([": [35, 94, 96, 97, 98, 99, 100, 101, 102, 103], ".name": [35, 94, 102], ".variables": [35, 85, 93, 94, 98, 101], "['": 35, "x2": [35, 95, 101], "']": 35, ".variable": [35, 101], "['x1": 35, ".x": [35, 93, 94, 97, 98, 101, 103], ".]": [35, 93, 94, 97, 98, 102], "1'": 35, ".fval": [35, 94, 99, 101, 103], "{'x1": 35, "maintain": 35, "generating": [35, 97, 98], "union": 35, ".ndarray": [35, 48, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "possibly": 35, "sizes": 35, "do": [35, 72, 99], "match": [35, 72, 83], "success": [36, 94, 95, 96, 97, 99, 100, 101, 102, 103], "succeeded": 36, "ended": 36, "replacements": 37, "history": [37, 38, 99], "recursive": [37, 38], "weight": [37, 54, 59, 66, 97], "either": [37, 44, 46, 53, 80, 82], "containing": [37, 46, 50, 53], "element": [37, 47], "minimumeigenoptimizerresult": 37, "invoking": 37, "iteratively": 37, "second": 37, "step": 37, "intermediateresult": 38, ".last": 38, "meta": [38, 44], "-algorithm": [38, 44], "top": [38, 85, 92, 103], "called": [38, 47, 49], "(internal": 38, "bravyi": [38, 94], "obstacles": [38, 94], "preparation": [38, 94], "symmetry": [38, 94], "protection": [38, 94], "until": 38, "apply": [38, 46, 102], "once": [38, 47], "reached": 38, "every": [38, 71, 72, 76], "remaining": 38, "_min": 38, "milp": [39, 98], ".milp": 39, "/reference": 39, "fx": 40, "imode": 40, "smode": 40, "slsqp": [40, 41], "optimized": 40, "exit": 40, "mode": [40, 69], "documentation": [40, 103], "_slsqp": [40, 41], "actually": 40, "iter": 41, "acc": 41, "iprint": 41, "full": [41, 96, 97, 102], ".continuous": [41, 85, 92, 96, 101], "(name": [41, 70, 92, 95, 96, 102], "=\"": [41, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103], "=[": [41, 92, 94, 97, 100, 101, 103], "],": [41, 70, 92, 94, 97, 98, 99, 100, 101, 103], "[-": [41, 99, 101], "]]": [41, 92, 97, 103], "requested": 41, "verbosity": 41, "silent": 41, "summary": 41, "upon": 41, "iterate": 41, "minimizer": 41, "func": 41, "factory": [43, 44], "produces": 43, "overridden": 43, "modify": 43, "behavior": 43, "generates": 43, "mixer": [43, 44, 101], "regularization": [43, 44], "xi": [43, 44], "corresponds": [43, 44], "_state": [43, 101], "creates": [43, 80, 82, 85], "circuit": [43, 44, 47, 50], "represents": [43, 51], "quantumcircuit": [43, 47, 50, 101], "constructed": 43, "_mixer": [43, 101], "evolved": 43, "ry": [43, 97], "(theta": [43, 101], ")rz": 43, "(-": [43, 95, 99, 101, 102], "2beta": 43, ")ry": 43, "theta": [43, 97, 98, 101], "relax": [44, 101], "_solutions": 44, "_factory": 44, "aggregator": 44, "-solver": 44, "implement": 44, "own": 44, "inheriting": 44, "daniel": 44, "egger": [44, 101], "-starting": [44, 101], "correct": [44, 98], "initialization": 44, "explicit": 44, "warmstartqaoacircuitfactory": 44, "ignored": 44, "passing": 44, "computations": 44, "warmstartqaoafactory": 44, "several": 44, "next": 44, "presolver": 44, "encoding": [45, 47, 48, 49, 50, 70, 92, 102, 103], "verifying": 45, "relaxation": 45, "commutes": [45, 47], "verify": [45, 98], "baseestimator": 45, "verification": 45, "basis": [46, 51], "_sampling": 46, "'uniform": 46, "roundingscheme": [46, 49, 53], "magic": [46, 51, 103], "rounding": [46, 48, 49, 50, 51, 52, 53, 103], "measures": 46, "bases": [46, 51], "measurement": 46, "hardware": 46, "simulator": 46, "described": 46, "/abs": [46, 53, 63], "\"uniform": 46, "(default": 46, "\"weighted": 46, "attempts": 46, "choose": [46, 69], "strategically": 46, "expectation": [46, 50, 51, 53], "however": 46, "configured": 46, "perform": [46, 52, 53], "roundingcontext": [46, 53, 103], "context": [46, 49, 53], "needed": 46, "roundingresult": [46, 48, 49, 52, 53], "did": 46, "specifies": 47, "supported": [47, 49, 69, 70], "compression": [47, 103], "_ratio": [47, 103], "ratio": [47, 103], "divided": [47, 58], "frozen": 47, "_recovery": 47, "_probability": 47, "runtimeerror": 47, "yet": 47, "2vars": [47, 103], "encoded": [47, 49, 103], "2op": 47, "(qubit": 47, "qrac": [47, 103], "accomplishes": 47, "ensure": 47, "inputs": 47, "freeze": 47, "prevent": 47, "further": [47, 99], "modification": 47, "longer": 47, "_preparation": 47, "_circuit": [47, 103], "prepares": 47, "procedure": 48, "minimumeigensolver": [48, 49, 94, 96, 99], "minimumeigensolverresult": [48, 49, 103], "_scheme": [49, 103], "auxiliary": 49, "operators": 49, "so": 49, "quantumrandomaccessoptimizationresult": [49, 103], "ignores": 49, ".minimumeigensolverresult": 49, ".qrao": [49, 103], ".rounding": 49, "_common": 49, ".roundingcontext": 49, "_values": [50, 51, 98, 99], "complex": [50, 51], "_shots": 51, "measuring": 51, ".optimization": [51, 96], "_algorithm": 51, ".solutionsample": 51, "atol": 53, "semi": [53, 103], "-deterministic": [53, 103], "referred": 53, "resolve": 53, "near": 53, "determining": 53, "weights": [54, 59, 98, 100], "_weight": [54, 59, 100], "_number": 54, "_of": 54, "_bins": 54, "optimizationapplication": [54, 56, 57, 59, 61, 63, 64], "application": [54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 100], "bin": 54, "packing": [54, 64], "\u300d,": [54, 56, 58, 59, 60, 61, 63, 64, 66, 67, 68], "en": [54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68], ".wikipedia": [54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68], "/wiki": [54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68], "/bin": 54, "_packing": [54, 64], "items": [54, 59], "capacity": [54, 59], "bins": 54, "_figure": 54, "plot": [54, 94, 97, 99], "calculated": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 76], "respectively": 54, "fig": 54, "item": [54, 59], "lists": [54, 60, 92], "_in": 54, "_most": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 97], "_likely": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 97], "_vector": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "most": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "likely": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "quasidistribution": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "statevector": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "quasi": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "-probabilities": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "ints": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68], "_program": [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 78, 79, 80, 81, 82, 83, 84, 85, 89, 90, 92, 97, 100, 101, 103], "graphoptimizationapplication": [55, 58, 60, 65, 66, 67, 68, 100], "networkx": [55, 57, 58, 60, 65, 66, 67, 68, 97, 100, 103], "theory": [55, 65], ")\u300d": [55, 65], "/clique": 55, "_(": [55, 65], "_theory": [55, 65], "suitable": [55, 57, 58, 60, 65, 66, 67, 68], "build": [55, 57, 58, 60, 65, 66, 67, 68], "makes": 55, "maximal": [55, 59], "pos": [55, 57, 58, 60, 65, 66, 67, 68, 97, 100, 103], "without": [55, 57, 58, 60, 65, 66, 67, 68, 103], "colors": [55, 57, 58, 60, 65, 66, 67, 68, 97], "positions": [55, 57, 58, 60, 65, 66, 67, 68, 82], "nodes": [55, 57, 58, 60, 65, 66, 67, 68, 97, 98, 103], "node": [55, 58, 60, 65, 66, 67, 68, 97, 102], "subsets": [56, 61, 64], "exact": [56, 94, 95, 96, 97, 101, 103], "/exact": 56, "_cover": [56, 68, 100], "calculation": [57, 62], "answer": [57, 62], "-understand": [57, 62], "partition": [58, 61, 103], "/graph": 58, "_partition": [58, 103], "groups": 58, "/knapsack": 59, "/maximum": 60, "_gset": 60, "gset": 60, "parse": [60, 66], "2d": [60, 66], "_set": [61, 65], "/partition": 61, "integers": 61, "half": 61, "partitioning": 61, "_sites": 63, "rng": 63, "_or": [63, 86], "_seed": [63, 94, 97, 98, 99, 100, 101], "sherrington": 63, "kirkpatrick": 63, "sk": 63, "over": [63, 99], "spins": 63, ")=": 63, "/\\": 63, "{n": [63, 96], "<j": [63, 97], "}x": [63, 92, 97, 101], "_ix": 63, "\\in": [63, 96, 98, 101], "pm": 63, "configuration": 63, "disorder": 63, "chosen": 63, "independently": 63, "variants": 63, "disorders": 63, "normal": 63, "distribution": 63, "mean": 63, "variance": [63, 103], "dmitry": 63, "panchenko": 63, "-kirkpatrick": 63, "overview": 63, "sites": 63, "pseudo": 63, "-random": 63, ".random": [63, 94, 97, 98, 99, 100, 101, 103], ".default": 63, "_rng": 63, "(<": 63, ">)": 63, "usage": 63, "/set": 64, "stable": 65, "independent": 65, "/independent": 65, "traveling": [66, 98, 100], "salesman": [66, 97, 98, 100], "travelling": [66, 98], "/travelling": 66, "_salesman": 66, "_random": [66, 67, 97, 103], "low": [66, 67], "coordinate": [66, 67], "coordinates": [66, 67], "prospective": 66, "cycle": 66, "_tsplib": 66, "tsplib": 66, "edge": [66, 97], "euc": 66, "data": [66, 98], "cities": 66, "length": [66, 98], "_vehicles": 67, "depot": [67, 98], "vehicle": 67, "routing": [67, 98], "/vehicle": 67, "_routing": [67, 98], "vehicles": [67, 98], "depart": 67, "_vehicle": [67, 98], "routes": 67, "vertex": [68, 100], "/vertex": 68, "'auto": 69, "introducing": 69, "slack": [69, 72, 93], ".converters": [69, 70, 76, 93, 97, 99, 100, 101], "define": [69, 76, 96, 102], "conv": [69, 70, 76, 93, 100], ".convert": [69, 70, 76, 93, 97, 99, 100], "\u300finteger": 69, "\u300f:": 69, "\u300fcontinuous": 69, "\u300fauto": 69, "unsupported": [69, 72, 86, 87], "selected": 69, "bounded": 70, "-coefficient": 70, "proposed": 70, ".integer": [70, 92, 93, 102], "='": 70, "sahar": 70, "karimi": 70, "pooya": 70, "ronagh": 70, "practical": 70, "annealers": 70, "differs": [71, 72, 73, 74], "require": 72, "}\n\\": 72, "\\\nx": 72, "& p": 72, "-x": [72, 96, 97], "(y": 72, "supplied": 72, "patterns": 72, "kept": 72, "fred": 72, "glover": 72, "tutorial": [72, 96], "formulating": 72, "-type": 72, "_flipproblemsense": [73, 74], "maximization": [73, 74], "unchanged": [73, 74], "flip": [73, 74], "flipped": [73, 74], "another": 75, "keep": 75, "quadraticprogramelement": [78, 80, 82, 83, 85], "parent": [78, 79, 80, 81, 82, 83, 84, 85], "-side": [78, 79, 81], "evaluate": [78, 79, 80, 81, 82, 83, 99], "expression": [79, 80, 81, 82], "evaluated": [79, 80, 81, 82, 83, 99], "sparse": [80, 82, 92], "dok": [80, 82], "_gradient": [80, 82, 83], "gradient": [80, 82, 83], "_array": [80, 82, 92, 97], "_name": [80, 82, 92], "determines": [80, 82], "compressed": 82, "way": [82, 98], "symmetric": [82, 92], "summed": 82, "up": 82, "triangle": 82, "{(": [82, 92, 101], "->": [82, 98, 101], "tuples": 82, "objsense": 83, "shape": 83, "initialize": [84, 96, 98, 99], ".quadraticprogram": [84, 92], "exposed": 85, "meant": 85, "externally": 85, "_tuple": 85, "indicator": 86, "_big": 86, "_m": [86, 95], "translate": [86, 87, 99], ".mp": [86, 89, 92, 95, 96, 99, 101, 102], "features": 86, "logical": 86, "expressions": 86, "_not": 86, "_and": [86, 97, 102], "formulation": [86, 98], "derived": 86, "basic": 87, "functions": [87, 99], "treat": 88, "ys": 88, "imaginary": 88, "-supported": [89, 90], "never": [89, 90], "happen": [89, 90], "_prog": 91, "comprising": 91, "sparsepauliop": [91, 97, 100, 103], "\u30da\u30fc\u30b8": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "/tutorials": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], ".ipynb": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "\u751f\u6210": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "\u30d3\u30eb\u30c9": 92, "\u8a08\u753b": [92, 93, 94, 95, 96, 98], "\u6271\u3044": [92, 97, 101], "{align": [92, 101], "{minimize": 92, "^\\": 92, "{subject": 92, "\u6b21\u5143": [92, 98], "\u30d9\u30af\u30c8\u30eb": [92, 96, 98, 100, 101], "\u6574\u6570": [92, 93, 94, 95, 98, 100, 101], "\u3002\u300c": 92, "\\leq": [92, 93], "\u52a0\u3048": [92, 97, 101], "\\geq": [92, 93], "\u30a4\u30f3\u30dd\u30fc\u30c8": [92, 100], ".translators": [92, 93, 95, 96, 99, 101, 102], "_docplex": [92, 93, 95, 96, 99, 101, 102], "_mp": [92, 93, 95, 96, 99, 101, 102], "\u59cb\u3081": [92, 97, 103], "\u3002docplex": [92, 102], "ibmdecisonoptimization": 92, ".github": 92, ".io": 92, "/docplex": 92, "-doc": 92, "/mp": 92, "\u306b\u3042\u308a": [92, 100], "\u547c\u3073\u51fa\u3059": [92, 93, 103], "\u8aad\u307f\u8fbc\u3080": 92, ".model": [92, 95, 96, 99, 101, 102], "mdl": [92, 96, 99, 101, 102], "(lb": 92, "=-": [92, 94, 102], "ub": [92, 98, 102], "((": [92, 98, 101], "* (": [92, 98], "(mdl": [92, 96, 99, 101, 102], ".export": [92, 102], "=iso": [92, 102], "obj": [92, 99, 102, 103], "qc1": 92, "[ x": [92, 102], "lt": [92, 93, 94, 96, 100, 101, 102, 103], ";=": [92, 93, 96, 100, 101, 102], "binaries": [92, 102], "generals": [92, 102], "\u5305\u62ec": [92, 96, 103], "\u6587\u5b57": 92, "\u5217\u8868": 92, "load": [92, 96], "mod": 92, "(type": 92, "(mod": 92, "&lt": [92, 103], ";class": 92, ".quadratic": [92, 98, 101], "&#": [92, 93, 94, 96, 97, 100, 101, 102, 103], ";&": [92, 103], "gt": [92, 93, 96, 100, 102, 103], "\u307e\u3057\u3087": [92, 103], "[4": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "\u7a2e\u985e": [92, 93], "\u30d0\u30a4\u30ca\u30ea\u30fc": [92, 93, 94, 96, 98, 101, 102], "\u30bf\u30a4\u30d7": [92, 93], "[5": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "\",": [92, 93, 94, 97, 99, 101, 102, 103], "\u8f9e\u66f8": 92, "\u6b21\u9805": 92, "\u5b9a\u6570": [92, 94], "\u5370\u5237": 92, "\u6700\u521d": [92, 93, 94, 95, 96, 97, 98, 100, 101], "\u4e57\u7b97": [92, 95], "\u9664\u7b97": 92, "\u30aa\u30d5\u30bb\u30c3\u30c8": [92, 94, 95], "\uff09\u3001": [92, 94, 95, 98], "\u7dda\u5f62\u9805": 92, "}qx": 92, "\u5ba3\u8a00": 92, "\u30ad\u30fc": 92, "\u518d\u3073": 92, "[6": [92, 93, 94, 96, 97, 98, 99, 100, 101, 103], "dictionaries": [92, 99], "(constant": 92, "(\"x": [92, 94, 102], "\"y": [92, 94, 102], "(\"z": 92, "\"z": [92, 94], "*y": [92, 93, 94, 102], "\u914d\u5217": [92, 93], "\u4e00\u6b21\u9805": 92, "\u6570\u5b66": [92, 97], "\u5b9a\u5f0f": [92, 93, 97, 102], "\u4e8c\u6b21\u9805": 92, "\u9806\u5e8f": [92, 97], "\u30aa\u30d6\u30b8\u30a7\u30af\u30c8": [92, 93, 95, 97, 102, 103], "[7": [92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103], "/arrays": 92, "1]": 92, ".objective": [92, 97, 98, 99], ".{": 92, "\u8abf\u3079\u308b": [92, 98, 103], "\u5bc6\u884c": 92, "\u758e\u884c\u5217": 92, "\u53d6\u5f97": [92, 97, 98], "\u304b\u3069": 92, "\u5727\u7e2e": [92, 103], "\u683c\u7d0d": [92, 103], "\u3068\u3048": [92, 93, 97], "'y": 92, "('y": 92, "(symmetric": 92, "\u5bfe\u79f0": [92, 96], "[8": [92, 93, 94, 96, 97, 98, 99, 100, 101, 103], ":\\": [92, 103], "\\t": 92, ".constant": [92, 98], ".linear": [92, 93, 98, 102], ".to": [92, 94, 97, 99, 100, 103], ".coefficients": 92, "\"\\n": 92, "(use": 92, ", \"": 92, "\\n": [92, 97, 103], "\"\\": 92, "(&": 92, ";)": [92, 94, 102, 103], "\u691c\u51fa": 92, "\u53f3\u5074": [92, 93], "rh": 92, "\u3001 \u300e": 92, "[9": [92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103], "==": [92, 97, 98, 99, 101, 103], "lin": 92, "_eq": [92, 93], "_leq": [92, 93], ">=": 92, "_geq": [92, 93], "10": [92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103], "(\"y": 92, "*z": [92, 93, 94], "11": [92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103], ":\"": [92, 93, 94, 97, 98, 100, 103], ", lin": 92, ".sense": [92, 98], ".rhs": 92, "{&": [92, 94], ";:": [92, 94, 103], ".ge": 92, "12": [92, 93, 94, 96, 97, 98, 99, 100, 103], ".remove": 92, "\u4e00\u90e8": [92, 97, 103], "\u30b1\u30fc\u30b9": [92, 93, 94, 98, 103], "(constants": 92, "=..": 92, "\u304c\u3042\u308a": [92, 93], "leftarrow": 92, "{x": [92, 96, 97], "13": [92, 93, 94, 96, 97, 98, 100, 103], ".substitute": 92, "(sub": 92, "\u751f\u3058\u308b": [92, 101], "\u30b9\u30c6\u30fc\u30bf\u30b9": [92, 94], "\u8fd4\u3057": [92, 95], "\u3001-": 92, "14": [92, 93, 94, 97, 98, 100, 101, 103], "quadraticprogramstatus": 92, "\u56de\u7f6e": 92, "15": [92, 93, 94, 97, 98, 100, 101, 103], "\".": [92, 94, 98, 99], "(e": [92, 98], "itself": 92, ";-": 92, "\u8868\u793a": [92, 93, 95, 98, 102], "\u542b\u307e": [92, 93, 94, 96, 97, 103], "infinity": 92, "\u30d5\u30a9\u30fc\u30de\u30c3\u30c8": 92, "\u3067\u3054": 92, "\u6ce8\u610f\u304f": 92, "16": [92, 93, 94, 97, 100, 101, 103], "_e": 92, "17": [92, 93, 94, 97, 101, 103], "dev": [92, 93, 94, 97, 99, 100, 103], "dbd": 92, "4qiskit": 92, "-ibmq": [92, 94, 97, 99, 100], "-provider": [92, 94, 97, 99, 100], "4python": 92, "compilergcc": [92, 101, 102], "0python": 92, "apr": [92, 94, 97, 99, 100], "oslinuxcpus": [92, 101, 102], "wed": [92, 101, 102], "_programs": 93, "\u8868\u3055": [93, 94, 97, 98], "\u4e00\u822c": [93, 95, 97, 98], "\u5f37\u529b": [93, 98], "\u4e8c\u6b21": [93, 94, 95, 96, 98, 101, 103], "\uff08qubo": [93, 103], ".quantum": 93, ".sparsepauliop": 93, "\u30a4\u30b8\u30f3\u30b0\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3": [93, 94, 97, 98], "\u77e5\u3089": [93, 96, 98], "\u57fa\u790e": [93, 101], "\u30eb\u30fc\u30c1\u30f3": [93, 97], "\u306b\u95a2\u3059\u308b": [93, 94, 95, 96, 103], "\u52d5\u4f5c": [93, 95, 96, 101, 103], "\u5f53\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb": 93, "\u6982\u8981": 93, "\u4e0d\u7b49": [93, 96], "\u5f0f\u5236": [93, 96], "\u30b9\u30e9\u30c3\u30af": 93, "\u7b49\u5f0f": [93, 96, 98], "maximizetominimize": 93, "\u6700\u5c0f": [93, 95, 97, 98, 100, 103], "\u5316\u554f": [93, 95, 97, 103], "minimizetomaximize": 93, "linearinequalitytopenalty": 93, "inequalitytoequalityconverter": 93, "\u5de6\u5074": 93, "\u8a18\u53f7": 93, "\u30e2\u30c7\u30eb": [93, 95, 97, 101], "\u8a18\u8ff0": [93, 95, 97, 98], ".docplex": 93, "qp": [93, 94, 95, 96, 97, 99, 100, 101, 102], "(lowerbound": 93, "xyz": 93, "(qp": [93, 94, 95, 96, 97, 98, 99, 100, 101, 102], "\u547c\u3073\u51fa\u3057": [93, 94, 103], "ineq": 93, "2eq": 93, "@int": 93, "_slack": [93, 100], "\u5909\u63db\u5f8c": 93, "\u51fa\u529b": [93, 103], "\u3054\u89a7": 93, "\u3068\u304a\u308a": [93, 97, 98], "\\_": 93, "leg": 93, "{@": 93, "\u63db\u3048": [93, 94], "\u3069\u306e": [93, 97, 98, 103], "\u305f\u3068\u3048": [93, 95, 97, 98], "\u305f\u304c\u3063": [93, 98, 99], "\u3067\u3082": [93, 98, 102, 103], "\u6e80\u305f": 93, "\u3067\u306a\u3051\u308c": 93, "\u5c0f\u6570": 93, "\u70b9\u4ee5": 93, "\u53d6\u308b": [93, 94], "\u305f\u3060\u3057": [93, 97, 98, 100], "\u30de\u30a4\u30ca\u30b9": 93, "\u304c\u3069": [93, 103], "\u3066\u307f\u307e\u3057\u3087": 93, "\u89e3\u304d": [93, 96, 100, 101, 103], "\u3002\u307e\u305a": [93, 96], ".mp\u30e2\u30c7\u30eb": 93, "_orig": 93, "\u306e\u3088\u3046": 93, "\u6e21\u3059": [93, 101, 103], ".interpret": [93, 97, 100, 103], "\u4f4d\u7f6e": 93, "interpreting": 93, ", ineq": 93, ", result": [93, 97, 100], "\u5171\u901a": 93, "\u53d6\u3089": 93, "\u6c17\u3065\u304d": 93, "\u89e3\u91c8": 93, "\u540c\u3058\u5024": 93, "\u5168\u304f": 93, "\u304a\u3051\u308b": [93, 95, 97, 103], "\u9664\u3051": 93, "\uff08\u5f0f": 93, "\uff09\uff09": 93, "\u6709\u754c": 93, "\u30a8\u30f3\u30b3\u30fc\u30c9": [93, 95, 98, 103], "\u8ad6\u6587": 93, "\u53c2\u7167\u7528": 93, "\u518d\u5ea6": 93, "2bin": 93, "_bin": [93, 99], "\u6ce8\u8a18": 93, "\u53d6\u308a\u5f97\u308b": 93, "ldots": [93, 98], "\u3082\u3064": [93, 96], "\u4e0b\u754c": 93, "\u4e0a\u754c": 93, "\u5f93\u3046": 93, "\u3068\u3063": 93, "\u306b\u3088\u308b": [93, 95, 96, 97, 100, 101], "\u4ed8\u3051": [93, 95, 97, 98, 103], "\u96c6\u7d04": 93, "\u623b\u3057": 93, ", int": 93, "\u7dda\u5f62": [93, 94, 98, 101, 102], "\u30da\u30ca\u30eb\u30c6\u30a3": [93, 94, 96, 97, 101], "\u30b3\u30f3\u30d0\u30fc\u30bf": 93, "\u6027\u5236": 93, "\u4f8b\u3048": [93, 94, 96, 101], "\u6570\u5024": [93, 94], "\u30da\u30ca\u30eb\u30c6\u30a3\u30d5\u30a1\u30af\u30bf\u30fc": 93, "\u5927\u304d\u306a": 93, "(b": [93, 97], ")^": [93, 97, 98], "\u5316\u304b": 93, "lineq": 93, "2penalty": [93, 99], "(qubo": [93, 94, 95, 97, 100, 101], "*xyz": 93, "\u3084\u3063": 93, "18": [93, 94, 97, 101, 103], "19": [93, 94, 97, 101, 103], "_qubo": [93, 101], ", lineq": 93, "\u540c\u3058\u89e3": [93, 98], "\u304c\u308f\u304b\u308a": 93, "\u6700\u5f8c": [93, 94, 96, 97, 98, 103], "\u623b\u3059\u304b": 93, "\u898b\u3066": [93, 102], "informationsoftwareversionqiskit": [93, 101, 102], "dcec": 93, "eqiskit": 93, "aug": [93, 101, 102, 103], "memory": [93, 101, 102, 103], "0thu": [93, 94, 97, 99, 100, 103], "sep": [93, 103], "\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0": 94, "\u4e8c\u5024": [94, 101], "\u3002qubo": [94, 101], "\u6c42\u3081\u308b": [94, 103], "\u30a4\u30b8\u30f3\u30b0": 94, "\u30fb\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3": [94, 97], "\u76f8\u5f53": [94, 95, 97], "\u5316\u5b66": 94, "\u7269\u7406\u5b66": 94, "\u30b9\u30d4\u30f3": 94, "\u7f6e\u63db": 94, "\u3001[": [94, 96], "\u306a\u3059\u3079": [94, 97], "samplingvqe": [94, 96, 97, 98], "\u53b3\u5bc6": [94, 100], "\uff09\u3002": [94, 95, 97], "\u3068\u3082": [94, 97], "\u30e9\u30c3\u30d7": [94, 96], "\u306e\u306b": [94, 98], "\u306b\u3069\u3046": 94, "\u3002qiskit": [94, 101, 102], "2\u6b21": [94, 101], "\u6295\u3052": 94, "\u56de\u8def": [94, 97, 98, 101], "\u6df1\u3055": [94, 97, 98], "\u5927\u304d\u3055": 94, "\u5fc5\u7136": 94, "\u5897\u52a0": [94, 103], "\u306b\u3068\u3063\u3066": 94, "\u969c\u5bb3": 94, "\u56de\u907f": 94, "\u518d\u5e30": 94, "lucas": [94, 97], "formulations": [94, 98], "front": 94, "phys": [94, 97], "kliesch": 94, "koenig": 94, "tang": 94, "_globals": [94, 97, 98, 99, 100, 101], ".visualization": [94, 97], "_histogram": [94, 97], "typing": 94, "\u30aa\u30da\u30ec\u30fc\u30bf": 94, "\u30b7\u30d5\u30c8": [94, 95], "\u3079\u304d": 94, "(offset": 94, "(op": [94, 100], "iiz": 94, "izi": 94, "zii": 94, "izz": 94, "ziz": 94, "zzi": 94, ";]": [94, 97, 100, 101, 103], "coeffs": [94, 97, 100, 103], ".j": [94, 97, 100, 103], "\u5099\u3048": 94, ".from": 94, "x0": [94, 95, 101], "\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc": [94, 100, 101], "\u57fa\u3065\u3044": [94, 96, 98, 103], "\u521d\u671f\u5316": [94, 96, 98], "_mes": [94, 101, 103], ", initial": [94, 101], "_point": [94, 101, 103], "(exact": [94, 95, 103], "\u5c0f\u3055": [94, 98], "\u6c42\u3081": [94, 98, 100, 103], "\u5272\u5408": 94, "\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3": [94, 100, 101], "\u5358\u4e00": [94, 95, 101], "\u7d71\u5408": [94, 103], "\u5c5e\u6027": [94, 96, 103], "\u7dcf\u8a08": 94, ", [": 94, ".samples": [94, 101, 102, 103], "[&": [94, 101], "=array": [94, 102, 103], "=&": [94, 102, 103], ";optimizationresultstatus": [94, 102, 103], ".success": [94, 102, 103], "&gt": [94, 102, 103], "\u30d5\u30a3\u30eb\u30bf\u30fc": 94, "_filtered": 94, "[solutionsample": [94, 103], "allowed": 94, "_status": 94, "[optimizationresultstatus": 94, "= (": [94, 98], ",)": [94, 97], "res": [94, 101], ".probability": [94, 101], ".append": [94, 98, 101], "=(": [94, 97, 99], "\u307f\u305f\u3051\u308c": 94, "\u5024\u3068": 94, "\u306b\u95a2\u3057": 94, "\u7d71\u8a08": [94, 96, 97], "\u5f79\u7acb\u3061": [94, 98], "\u5e73\u5747": [94, 99], "\u6a19\u6e96": [94, 99, 103], "\u504f\u5dee": 94, "\u7406\u89e3": [94, 103], "fvals": 94, "[s": 94, "probabilities": [94, 99], ".mean": 94, "(fvals": 94, ".std": 94, "\u3042\u3089\u3086\u308b": 94, "\u5dee\u3057\u7f6e\u3044": 94, "\u53ef\u8996": [94, 95, 96], "\u65e9\u671f": 94, "_plot": 94, "join": [94, 98, 101], "\"{": [94, 99, 103], "}=": [94, 97], "(v": [94, 96, 97, 98], "enumerate": [94, 101], ": s": 94, "(samples": [94, 101], "\u30b5\u30a4\u30ba": [94, 95, 100], "\u4e00\u5ea6": [94, 97, 100], "\u305a\u3064": 94, "\u5c0f\u3055\u304f": 94, "\u4e2d\u9593": 94, "\u3057\u304d\u3044": [94, 95], "\u4e0b\u56de\u308b": 94, "\u3002\uff08": [94, 98], "\u69cb\u7bc9": [94, 95, 96, 97, 101, 103], "\u7e2e\u5c0f": [94, 95], "\u691c\u8a0e": [94, 95, 97, 98, 103], "rqaoa": 94, "=exact": 94, "(rqaoa": 94, "1d": [94, 97, 99, 100], "ecqiskit": [94, 97, 99, 100], "2qiskit": [94, 97, 99, 100], "-nature": [94, 97, 99, 100], "\u3068\u3068\u3082\u306b": 95, "\u7d44\u307f\u5408\u308f\u305b": [95, 97, 98], "\u691c\u7d22": [95, 97, 100], "\u7e70\u308a\u8fd4\u3057": [95, 97, 103], "\u76f4\u524d": 95, "\u601d\u308f": 95, "\u3002gas": 95, "\u30a2\u30c0\u30d7\u30c6\u30a3\u30d6\u30aa\u30e9\u30af\u30eb": 95, "\u5024\u3088\u308a": 95, "\u4e0a\u307e": 95, "\u4e0b\u306e": 95, "\u8a8d\u8b58": 95, "\u898b\u3064\u304b\u308b": 95, "\u66f4\u65b0": [95, 96], "\u305f\u3073": [95, 97], "\u30b9\u30da\u30fc\u30b9": 95, "\u30ce\u30fc\u30c8\u30d6\u30c3\u30af": [95, 98, 99, 103], "\u624b\u6cd5": [95, 103], "\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8": [95, 100, 103], "gilliam": 95, "woerner": [95, 101], "gonciulea": 95, "polynomial": 95, "\u30b3\u30a2": 95, "\u6750\u6599": 95, "\u5168\u3066": [95, 100], "\u91cd\u306d\u5408\u308f": 95, "\u305b\u308b": 95, "\u6e96\u5099": [95, 98], "\u6f14\u7b97\u5b50": [95, 96, 97, 101, 103], "\u95a2\u5fc3": [95, 97], "\u632f\u5e45": 95, "-1": 95, "\u30aa\u30e9\u30af\u30eb": 95, "_n": [95, 98, 101], "\u639b\u3051\u308b": 95, "\u62e1\u6563": 95, "\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9": [95, 98], "\u5927\u307e\u304b": 95, "\u5f93\u3044": 95, "quadraticprogramtonegativevalueoracle": 95, "_y": [95, 101], "-qubit": 95, "\u30ec\u30b8\u30b9\u30bf": 95, "|x": 95, "|q": 95, "(q": [95, 98], "- y": 95, "\u30d5\u30e9\u30b0": 95, "\u5fc5\u9808": 95, "\u6b63\u5f0f": [95, 97], "\u8a00\u3048": [95, 97, 98], "\u69cb\u6210": [95, 97, 98, 103], "\u30d0\u30a4\u30ca\u30ea\u30fc\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0": 95, "\u95be\u5024": 95, "\u4e0a\u307e\u305f": 95, "\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8": [95, 97], "\u6b8b\u308b": 95, "\u304a\u3082": 95, "\u3061\u3083": 95, "{eqnarray": 95, "2x": 95, "0x": [95, 103], "1x": 95, "3x": 95, "\u30b9\u30c6\u30c3\u30d7": [95, 97, 101], "\u305d\u3057\u3066": 95, "\u8868\u3059": [95, 103], "(model": 95, "_model": [95, 99, 101, 102], "*x": [95, 97, 100, 103], "\u30d3\u30c3\u30c8": [95, 97, 98, 101, 103], "\u9032\u884c": 95, "\u56de\u7e70\u308a\u8fd4\u3055": 95, "\u7d42\u4e86": [95, 96], "(\u3059": 95, "\u306a\u308f\u3061": 95, "\u5909\u5316": 95, "\u5148\u307b\u3069": 95, "\u53d7\u3051\u53d6\u308a": 95, "(results": [95, 99, 103], "\u6700\u9069\u89e3": [95, 98, 102, 103], "\u5f97\u3089\u308c": 95, "\u307b\u3068\u3093\u3069": [95, 98], "\u6642\u9593": [95, 97, 98], "\u30ab\u30b9\u30bf\u30e0": 95, "\u793a\u3055": 95, "\u53cd\u5fa9": 95, "\uff08\uff1d": 95, "\u30ab\u30a6\u30f3\u30bf\u30fc": 95, "\u30bf\u30a4\u30c8\u30eb": 95, "\u3002x": 95, "\uff08\u4f8b": 95, "\\rightarrow": [95, 97], "y\u8ef8": 95, "\u5f37\u5ea6": 95, "\u660e\u308b": 95, "\u9ad8\u3044": [95, 97], "\u30d5\u30a7\u30fc\u30ba": [95, 96], "\u30ab\u30e9\u30fc\u30db\u30a4\u30fc\u30eb": 95, "\u5206\u5e03": [95, 97, 98, 101, 103], "\u5c11\u306a\u304f": 95, "\u6b63\u3057\u304f": 95, "(numpyminimumeigensolver": [95, 96, 97, 99], "\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af": 96, "\u91d1\u878d": [96, 97], "\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u30ba": 96, "\u30fb\u30ea\u30b5\u30fc\u30c1": 96, "\u6df7\u5408": [96, 98], "\u4ee5\u4e0bmbco": 96, "\u53d6\u308a\u7d44\u3080": 96, "\\min": [96, 98], "{u": [96, 98], "subseteq": 96, "{r": [96, 98], "+ \\": [96, 97], "varphi": 96, "(u": [96, 102], "\u5bfe\u8c61": [96, 97, 98], "\\mathrm": [96, 97], ".:": 96, "~}": 96, "ell": 96, "\u4eee\u5b9a": [96, 97, 103], "\u6b63\u65b9": 96, "intercal": 96, "= x": 96, "^n": [96, 98], "\\mathbb": 96, "'}": 96, "\\varphi": 96, "\u51f8\u96c6\u5408": 96, "\\ell": 96, "\\times": [96, 101], "\u4e00\u4f53": 96, "mbo": 96, "\u4ea4\u4e92": 96, "\u65b9\u5411": 96, "\u4e57\u6570": 96, ")[": [96, 97, 98], "\u30d2\u30e5\u30fc\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u30b9": 96, "\u3002admm": 96, "\u51f8\u6700": 96, "\u9577\u3044": 96, "\u6b74\u53f2": 96, "\u51f8\u6027": 96, "\u6210\u308a\u7acb\u3064": 96, "\u6b8b\u5dee": 96, "\u53cc\u5bfe": 96, "\u53ce\u675f": [96, 97, 103], "\u7279\u6027": 96, "qubo\u30b5\u30d6": 96, "\u51f8\u5236": 96, "\u7d04\u4ed8": 96, "\u30b5\u30d6": 96, ");": 96, "\u5404\u53cd": 96, "($": 96, "\\ldots": 96, "\u51f8\u554f\u984c": 96, "\u30b3\u30b9\u30c8": [96, 98], "\u30d6\u30ed\u30c3\u30af": 96, "\u30d0\u30ea\u30a2\u30f3\u30c8": 96, "\u3064\u307e\u308a": [96, 97, 98], "\u30d1\u30c3\u30b1\u30fc\u30b8": [96, 98, 100], "\u30ed\u30fc\u30c9": [96, 98, 102], ".pyplot": [96, 97, 98, 99], "plt": [96, 97, 98, 99], "cobylaoptimizer": 96, ".admm": 96, "admmoptimizer": 96, "uncomment": 96, "line": 96, "but": 96, "\uff08cplex": 96, "\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb": [96, 98, 100, 102], "\u305d\u3057": 96, "\u3069\u3061\u3089\u304b": 96, "\u4ee3\u66ff": [96, 98], "\u51f8\u9023": 96, "\u3001qubo": 96, "minimeigenoptimizer": 96, "handle": 96, "benchmark": 96, "qubos": 96, "ex6": 96, "cons": 96, "\u51f8\u554f": 96, "\u5f8c\u8ff0": 96, "\u3044\u308c": 96, "\u30ab\u30b9\u30bf\u30de\u30a4\u30ba": 96, "\u5f15\u6570": [96, 103], "\u304c\u305d\u308c\u305e\u308c": 96, "gx": 96, "\u4e00\u6b21": 96, "\u8aa4\u5dee": 96, "\u5b9a\u7406": 96, "\u30a2\u30af\u30c6\u30a3\u30d6": [96, 98], "=false": 96, "\u5b9f\u8cea": 96, "_params": 96, "0e": 96, "\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9": [96, 97, 98, 99, 100, 101, 103], "\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6": 96, "\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30fc": 96, "\u5206\u96e2": 96, "=admm": 96, "=qubo": 96, "=convex": 96, "\u30d7\u30ea\u30f3\u30c8": 96, "\u306f\u305d\u306e": 96, "\u30d5\u30a3\u30fc\u30eb\u30c9": 96, "\u89e3\u6790": 96, "\u539f\u59cb": 96, ".plot": [96, 98, 99], ".state": 96, ".residuals": 96, ".xlabel": [96, 99], ".ylabel": [96, 99], ".show": [96, 98, 99], "\u30b7\u30df\u30e5\u30ec\u30fc\u30c8": 96, "\u30bd\u30eb\u30d0\u30fcqaoa": 96, "\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u30d0\u30c3\u30af\u30a8\u30f3\u30c9": 96, "_q": 96, ".clf": 96, "examples": [97, 98], "_max": 97, "_tsp": 97, "\u5de5\u5b66": 97, "\u5b9a\u91cf": 97, "\u5206\u91ce": 97, "\u610f\u601d": 97, "\u4e2d\u5fc3": 97, "\u7d44\u5408": [97, 98, 100], "\u6709\u9650": 97, "\u52a0\u7b97": 97, "\u7121\u9650": 97, "\u6f5c\u5728": 97, "\u7b56\u96c6": 97, "\u57fa\u6e96": 97, "\u5178\u578b": 97, "\u6700\u5c0f\u5316": 97, "\u8ddd\u96e2": [97, 98, 100], "\u30c8\u30e9\u30d0\u30fc\u30b5\u30eb": 97, "\u9577\u3055": 97, "\u91cd\u91cf": [97, 100], "\u8cc7\u6750": 97, "\u6d88\u8cbb": 97, "\u6700\u5927\u5316": 97, "\u5229\u76ca": 97, "\u4fa1\u5024": [97, 98, 99], "\u751f\u7523": 97, "\u30ea\u30bf\u30fc\u30f3": 97, "\u5229\u56de\u308a": 97, "\u5bb9\u91cf": [97, 100], "\u306b\u3059\u308c": 97, "\u624b\u52d5": 97, "\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0": 97, "\u30cd\u30c3\u30c8\u30ef\u30fc\u30af": 97, "\u30b5\u30a4\u30a8\u30f3\u30b9": 97, "\u7269\u7406": 97, "\u5fdc\u7528": 97, "\u628a\u63e1": 97, "\u4eba\u3005": 97, "\u76f8\u4e92": 97, "\u5f71\u97ff": [97, 103], "\u53ca\u307c": 97, "\u3042\u3046": 97, "\u30b7\u30b9\u30c6\u30e0": 97, "\u307f\u3066": 97, "\u500b\u4eba": 97, "\u30da\u30a2\u30ef\u30a4\u30ba": [97, 98], "\u63a5\u7d9a": [97, 98, 100], "\u5ff5\u982d": 97, "\u7f6e\u304f": 97, "\u30de\u30fc\u30b1\u30c6\u30a3\u30f3\u30b0": 97, "\u304a\u4e92\u3044": 97, "\u8cfc\u8cb7": 97, "\u60f3\u5b9a": 97, "\u307b\u3069": 97, "\u77e5\u8b58": 97, "\u88fd\u54c1": 97, "\u7121\u6599": 97, "\u4e88\u6e2c": 97, "\u53ce\u76ca": 97, "\u5165\u624b": 97, "\u554f\u3046": 97, "\u3002:": 97, "-node": 97, "\u7121\u5411": [97, 100], "= n": 97, "\u306b\u304a\u3051\u308b": 97, "}>": [97, 98], "ji": [97, 98], "\u30bb\u30c3\u30c8v": 97, "\uff12\u3064": [97, 100], "\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3": [97, 103], "\u4ea4\u5dee": 97, "\u5408\u8a08": [97, 98, 100, 103], "\u30ce\u30fc\u30c9": [97, 98, 100, 103], "\u5272\u308a\u5f53\u3066\u308b": 97, "\u5229\u6f64": 97, "\u5316\u3057": 97, "\u3053\u3053\u3068": 97, ",\u2026": 97, "\\tilde": 97, "textbf": 97, "\u30de\u30fc\u30b1\u30c6\u30a3\u30f3\u30b0\u30e2\u30c7\u30eb": 97, "\u5165\u308c": 97, "\u8cfc\u5165": 97, "\u539f\u5247": 97, "\u5927\u304d\u304f": 97, "\u500b\u3005": [97, 98], "\u7dcf\u8cfc": 97, "\u5165\u78ba": 97, "\u7dcf\u5229": 97, "\u597d\u90fd\u5408": 97, "\u81ea\u4f53": 97, "\u306a\u3059": 97, ")+": 97, "\u89e3\u6c7a\u7b56": 97, ")/": 97, "\u30d1\u30a6\u30eaz": 97, "{z": 97, "{w": 97, ")(": [97, 98], "+z": 97, "-\\": [97, 102], "mathrm": [97, 98], "{const": 97, "}w": 97, "}/": 97, "+\\": 97, "_iz": 97, "\u8fd1\u5e74": 97, "\u6027\u8cea": [97, 98, 103], "\u8003\u3048\u308b": [97, 98], "\u6700\u826f": [97, 103], "\u6bd4\u8f03": [97, 101, 102, 103], "\u52a0\u901f": 97, "\u3002\u3057\u304b\u3057": [97, 101, 103], "\u306a\u304c\u3089": 97, "\u9ad8\u901f": [97, 98], "\u5f97\u308b": [97, 102, 103], "\u30d2\u30e5\u30fc\u30ea\u30b9\u30c6\u30a3\u30c3\u30af": [97, 98], "\u307f\u3044": 97, "\u3060\u305b": 97, "farhi": [97, 98], "goldstone": [97, 98], "gutmann": [97, 98], "\u524d\u63d0": [97, 98], "\u30bf\u30fc\u30b2\u30c3\u30c8": 97, "\u7d2f\u4e57": 97, "\u8a31\u53ef": [97, 98], "\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb": [97, 98], "\\theta": [97, 98, 101], "\u30bb\u30c3\u30c8": [97, 98, 99, 100, 103], "\u6210\u5206": [97, 98, 101], "\u5236\u5fa1": [97, 98, 101, 103], "\u4f4d\u76f8": [97, 98], "\u30b2\u30fc\u30c8": [97, 98], "\u56de\u8ee2": [97, 98, 101], "\u8a66\u884c": [97, 98], "boldsymbol": [97, 98], ")~": 97, "|h": [97, 98], "|~": 97, "\\boldsymbol": [97, 98], "\u5468\u8fba": [97, 98], "\u6700\u5c0f\u5024": [97, 98, 99], "\u9054\u3059\u308b": [97, 98], "\u7d9a\u3051": [97, 98], "\u8fd1\u3065\u3051": [97, 98], "~|": 97, "\\;": [97, 98], "\u7b54\u3048": [97, 98], "\u512a\u308c": 97, "\u96e3\u3057": 97, "\u6ce2\u52d5": [97, 98], "\u5e30\u7740": [97, 101], "\u4fe1\u5ff5": 97, "\u30a8\u30f3\u30bf\u30f3\u30b0\u30eb\u30e1\u30f3\u30c8": 97, "\u3088\u304f": [97, 103], "\u4e00\u81f4": [97, 98, 103], "= [": [97, 98], "{single": [97, 98], "{entangler": [97, 98], "}]": [97, 98], "\u7d61\u307f\u5408\u3046": 97, "\u30b3\u30ec\u30af\u30b7\u30e7\u30f3": [97, 100], "prod": [97, 98], "\u52d5\u6a5f": 97, "\u901f\u304f": 97, "\u65ad\u71b1": 97, "\u5229\u70b9": 97, "\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2": [97, 103], "\u9650\u5b9a": 97, "_jz": 97, "_k": 97, "\u9ad8\u6b21": 97, "\u30a2\u30cb\u30fc\u30ea\u30f3\u30b0": 97, "\u975e\u73fe": 97, "\u5b9f\u7684": 97, "\u53c2\u8003": [97, 103], "\u6587\u732e": [97, 103], "frontiers": 97, "-print": [97, 98, 102], "wecker": 97, "hastings": 97, "troyer": 97, "rev": 97, "neven": 97, "\u984c\u7528": 97, "\u3001\u300c": [97, 98, 103], "useful": 97, "packages": 97, "nx": [97, 100, 103], "twolocal": 97, ".applications": [97, 100, 103], "tsp": 97, "spsa": [97, 98], ".graph": 97, "_nodes": [97, 103], "(np": [97, 98, 99, 101], ".arange": 97, "elist": 97, ")]": [97, 98, 99], "_weighted": 97, "_edges": 97, "(elist": 97, "[\"": 97, ".nodes": 97, ".spring": [97, 100, 103], "_layout": [97, 100, 103], "(g": [97, 98], "_graph": [97, 100, 103], "_axes": 97, ".axes": 97, "(frameon": 97, ".draw": [97, 100, 101, 103], "_networkx": 97, "_color": 97, "=colors": 97, "_size": 97, "alpha": [97, 99], "=default": 97, "=pos": [97, 100], "_labels": [97, 103], "_edge": 97, "_attributes": 97, "=edge": 97, "computing": 97, ".zeros": [97, 98, 99], "(n": [97, 98, 99], "temp": 97, "_data": 97, "\"]": 97, "(w": [97, 98], "[[": 97, "\u8a66\u3057": 97, "best": [97, 102], "_cost": [97, 98], "_brute": 97, "(t": 97, "reversed": [97, 99], "(list": 97, "(bin": 97, ":]": [97, 98], "zfill": 97, "cost": [97, 98, 101, 103], "* x": [97, 99, 101], "xbest": 97, "(cost": [97, 101], "nbest": 97, "(xbest": 97, "(best": 97, "\u4ed5\u69d8": 97, "qubitop": 97, ", offset": 97, "(str": [97, 98], "(qubitop": 97, "iizz": 97, "iziz": 97, "izzi": 97, "ziiz": 97, "zzii": 97, "\u4e00\u81f4\u3057": [97, 98], "making": 97, "getting": 97, "lowest": 97, "eigenvalue": [97, 103], "eigenvector": 97, "ee": 97, ".compute": [97, 98], "_minimum": 97, "_eigenvalue": 97, ".sample": 97, ".eigenstate": [97, 99], "energy": 97, ".eigenvalue": 97, ".real": [97, 99], ", x": 97, ".evaluate": [97, 99], "\u30a8\u30f3\u30bf\u30f3\u30b0\u30e9\u30fc": 97, "\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u30eb\u30fc\u30d7": 97, "(maxiter": [97, 99, 102], ".num": [97, 99, 100, 103], "reps": [97, 99], "entanglement": 97, "=ry": 97, "=optimizer": [97, 99], ".optimizer": [97, 100], "(vqe": [97, 99], "\u4e16\u7d00": 97, "\u4ee5\u4e0a": [97, 98], "\u306b\u308f\u305f\u308a": 97, "\u79d1\u5b66": 97, "\u5f15\u3044": 97, "\u60aa\u540d": 97, "\uff08traveling": 97, "\u793a\u5506": 97, "\u8ca1\u52d9": 97, "\u901a\u4fd7": 97, "\u5546\u54c1": 97, "\u8ca9\u58f2": 97, "\u90fd\u5e02": 97, "\u884c\u304f": 97, "\u8a2a\u308c": [97, 100], "\u6545\u90f7": 97, "\u65c5\u884c": 97, "\u623b\u308b": [97, 98], "\u6700\u77ed": 97, "\u58f2\u4e0a": 97, "\u96e3\u6613\u5ea6": 97, "\u666e\u904d": 97, "\u8d77\u56e0": 97, "\u521d\u982d": 97, "\u3001w": 97, ".r": [97, 99], "\u30cf\u30df\u30eb\u30c8\u30f3": 97, "\u521d\u671f": [97, 98, 101], "\u5206\u6790": 97, "\u4f34\u3046": 97, "\u62bd\u8c61": 97, "\u901a\u904e": 97, "\u30b5\u30a4\u30af\u30eb": 97, "\u9589\u3058": 97, "\u7d4c\u8def": 97, "\u4e0d\u660e": 97, "\u591a\u9805": [97, 98], "\u4e88\u60f3": 97, "=|": 97, "\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u30b5\u30a4\u30af\u30eb": 97, ",p": 97, "\u30d7\u30ed\u30b9\u30da\u30af\u30c6\u30a3\u30d6": 97, "\u3068\u308a": 97, "\u3002\u3059\u3079\u3066": 97, "\u51fa\u73fe": 97, "\u4ee5\u964d": 97, "\u52a0\u548c": 97, "\u6e21\u308a": 97, "\\sum": [97, 98], "~\\": 97, "notin": 97, "\u30fb\u30da\u30ca\u30eb\u30c6\u30a3": 97, "\u306f\u305a": 97, "\\notin": 97, "=n": [97, 98], "equiv": 97, "\u5883\u754c": [97, 98], "=\\": [97, 101], "\u3053\u308c\u3089\u3059\u3079\u3066": 97, "\u76ee\u6a19": 97, "\u307e\u3068\u3081\u3066": 97, "}+": 97, "_p": 97, "\\left": 97, "+a": 97, "\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc": [97, 98, 102], "\u5c0a\u91cd": 97, "\u5927\u304d\u3044": [97, 98], "{max": 97, "\u3068\u306a\u308b": 97, ".create": 97, "_numpy": 97, "(tsp": 97, "distance": [97, 98], "[node": 97, "][": [97, 98, 99], "itertools": 97, "permutations": 97, "brute": 97, "_force": 97, "(permutations": 97, "(range": [97, 99], "_best": 97, "_distance": 97, "[pre": 97, "_order": 97, "(order": 97, "(distance": 97, "(adj": 97, "force": 97, "g2": 97, ".digraph": 97, "% n": 97, "=g": 97, "[order": 97, "font": 97, "qp2qubo": 97, "2qubo": 97, "iiiiiiiiz": [97, 100], "iiiiiiizi": [97, 100], "iiiiiizii": [97, 100], "iiiiiziii": [97, 100], "iiiiziiii": [97, 100], "iiiziiiii": [97, 100], "iiziiiiii": [97, 100], "iziiiiiii": [97, 100], "ziiiiiiii": [97, 100], "iiiiiiizz": [97, 100], "iiiiiiziz": [97, 100], "iiiiiizzi": [97, 100], "iiiiiziiz": [97, 100], "iiiiizizi": [97, 100], "iiiiizzii": [97, 100], "iiiiziiiz": [97, 100], "iiiiziizi": [97, 100], "iiiizizii": [97, 100], "iiiizziii": [97, 100], "iiiziiiiz": [97, 100], "iiiziiizi": [97, 100], "iiiziizii": [97, 100], "iiiziziii": [97, 100], "iiizziiii": [97, 100], "iiziiiiiz": [97, 100], "iiziiiizi": [97, 100], "iiziiizii": [97, 100], "iiziiziii": [97, 100], "iiziziiii": [97, 100], "iizziiiii": [97, 100], "iziiiiiiz": [97, 100], "iziiiiizi": [97, 100], "iziiiizii": [97, 100], "iziiiziii": [97, 100], "iziiziiii": [97, 100], "iziziiiii": [97, 100], "izziiiiii": [97, 100], "ziiiiiiiz": [97, 100], "ziiiiiizi": [97, 100], "ziiiiizii": [97, 100], "ziiiiziii": [97, 100], "ziiiziiii": [97, 100], "ziiziiiii": [97, 100], "ziziiiiii": [97, 100], "zziiiiiii": [97, 100], ", qubo": 97, ", z": 97, ", tsp": 97, ".tsp": 97, "(z": [97, 98], "\u30ed\u30b8\u30b9\u30c6\u30a3\u30af\u30b9": 98, "\u4e3b\u8981": 98, "\u7523\u696d": 98, "\u4e16\u754c": 98, "\u30c9\u30eb": 98, "\u63a8\u8a08": 98, "\u30b5\u30fc\u30d3\u30b9\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc": 98, "\u8eca\u4e21": [98, 100], "\u30c8\u30e9\u30c3\u30af": 98, "\u30b3\u30f3\u30c6\u30ca": 98, "\u591c\u9593": 98, "\u62e0\u70b9": 98, "\u30c7\u30dd": 98, "\u904b\u55b6": 98, "\u6bce\u65e5": 98, "\u5404\u8eca": 98, "\u30af\u30e9\u30a4\u30a2\u30f3\u30c8": 98, "\u5834\u6240": 98, "\u30b5\u30fc\u30d3\u30b9": 98, "\u305f\u304f": [98, 101], "\u3055\u3093": [98, 101], "\u8a08\u7b97\u4e0a": 98, "\u8ab2\u984c": 98, "\u884c\u3063": [98, 101], "\u30eb\u30fc\u30c8": [98, 100], "\u8d70\u884c": 98, "\u8cbb\u3084": 98, "\u985e\u3059\u308b": 98, "\u7406\u60f3": 98, "gutman": 98, "\u30ef\u30fc\u30af\u30d5\u30ed\u30fc": [98, 103], "\u78ba\u7acb": 98, "\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9": 98, "\u914d\u4fe1": 98, "\u79fb\u52d5": 98, "\u30ab\u30e9\u30b9": 98, "\u98db\u3076": 98, "\u30e6\u30fc\u30af\u30ea\u30c3\u30c9": 98, "\u304a\u305d\u3089\u304f": 98, "\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc": [98, 100, 103], "\u30cf\u30a4\u30d6\u30ea\u30c3\u30c9\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0": 98, "\u30d7\u30ed\u30c3\u30c8": 98, "\u30c7\u30fc\u30bf": 98, "\u9032\u3080\u524d": [98, 103], "\u6570\u5b66\u7684": 98, "\uff08vehicle": 98, "vrp": 98, "\u623b\u308a": 98, "\u5de1\u56de": [98, 100], "\u30bb\u30fc\u30eb\u30b9\u30de\u30f3": [98, 100], "applegate": 98, "mtz": 98, "miller": 98, "tucker": 98, "zemlin": 98, "\u30bb\u30b0\u30e1\u30f3\u30c8": 98, "\u30ce\u30fc\u30c9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9": 98, "\u6163\u4f8b": 98, "\uff09\u30c7\u30dd": 98, "\u30ea\u30f3\u30af": [98, 102], "\u9650\u308a": [98, 101, 103], "\\delta": 98, "delta": 98, "\u3001i": 98, "\u30b5\u30d6\u30c4\u30a2\u30fc": 98, "\u6392\u9664": 98, "(vrp": 98, "\\{x": 98, "}_{": 98, "\\sim": 98, ", \\": 98, "_{i": 98, "\u8a2a\u554f": 98, "+}": 98, "\\,": 98, "-}": 98, "0i": 98, "= k": 98, "\u9664\u53bb": 98, "-q": 98, "neq": 98, "\u7279\u306b": [98, 103], "\u91cd\u307f": [98, 100], "\u30a2\u30fc\u30c1": 98, "\u4e00\u9023": [98, 100], ">q": 98, "branch": 98, "-and": 98, "-bound": 98, "\uff08mixed": 98, "-integer": 98, "\u30d1\u30c3\u30af": 98, "\\bf": 98, "]^": [98, 101], "\u6bd4\u4f8b": 98, "\u5f37\u8abf": 98, "\u304a\u304d": 98, "\u9650\u3089": 98, "\u96e3\u3057\u3044": [98, 101], "\u540c\u6642\u306b": 98, "\u3002\u3044\u304f\u3064\u304b": 98, "\u8981\u7d04": 98, "\u5f0f\u6700": 98, "\u30da\u30ca\u30eb\u30c6\u30a3\u30fc": 98, "\u30fb\u30e1\u30bd\u30c3\u30c9": 98, "|\\": [98, 101], "\u901a\u3057": 98, "[u": 98, "|+": 98, "\u30a8\u30f3\u30bf\u30f3\u30b0\u30eb": 98, "\u30e9\u30b0\u30e9\u30f3\u30b8\u30a2\u30f3": 98, "(ih": 98, "} \\": 98, "- k": 98, "\\dots": 98, "bf": 98, "^{n": 98, "}_": 98, "^t": [98, 101], "= a": 98, "[(": [98, 103], "\u7b2c\u4e8c": 98, "\u7b2c\u4e09": 98, "2an": 98, "2ak": 98, "\u30b9\u30bf\u30c3\u30af": 98, "programming": 98, "\u300d.": 98, "acm": 98, "doi": 98, "bixby": 98, "chv": 98, "\u00e1tal": 98, "cook": 98, "princeton": 98, "university": 98, "press": 98, "isbn": 98, "\u3002cplex": [98, 102], ".exceptions": 98, "cplexerror": 98, "warning": 98, ".\"": [98, 101, 102, 103], "math": 98, "\u5143\u5e73\u9762": 98, "\u914d\u7f6e": 98, "init": [98, 101], ".n": 98, "(self": 98, ".seed": 98, "xc": 98, ".rand": 98, "yc": 98, "ii": 98, "jj": 98, "(ii": 98, "[ii": 98, "[jj": 98, "randomly": 98, ".generate": 98, "ilogcplex": 98, "classicaloptimizer": 98, ".instance": 98, ".k": 98, "_allowed": 98, "_combinations": 98, ".factorial": 98, "/ f": 98, "refactoring": 98, "_obj": [98, 103], "(instance": 98, ".reshape": 98, "1)": 98, "_ub": 98, "_lb": 98, "_ctype": 98, "\"i": 98, "\"\"": [98, 101, 102], "[\"c": 98, "_rhs": 98, "_sense": 98, "\"e": 98, "n)]": 98, "\"l": 98, "_prob": 98, ".populatebyrow": 98, "(my": 98, "exc": 98, "(exc": 98, ".solution": 98, ".array": [98, 99, 101], "_objective": 98, "populatebyrow": 98, "prob": [98, 100], ".set": 98, "(prob": 98, "(obj": [98, 103], "=my": 98, "lb": [98, 102], "_log": 98, "_stream": 98, "(none": 98, "_error": 98, "_warning": 98, "rows": 98, "col": 98, "[x": 98, "coef": 98, "-tour": 98, "elimination": 98, "(lin": 98, "_expr": 98, "=rows": 98, "senses": 98, "instantiate": 98, "(classical": 98, "fashion": 98, "put": 98, "/ n": 98, "missing": 98, "visualize": 98, "(xc": 98, "title": 98, "_str": 98, ".figure": [98, 99], ".scatter": 98, "(len": [98, 101], ".annotate": 98, ", size": 98, "color": 98, "\"r": [98, 99], "*\"": 98, ", ms": 98, ".grid": 98, "ix": 98, "iy": 98, ".arrow": 98, "[ix": 98, "[iy": 98, "_includes": 98, "_head": 98, "head": 98, "_width": 98, ".title": 98, "(title": 98, "(int": [98, 101], "(c": [98, 101], "\u661f\u4ed8\u304d": 98, "\u77e2\u5370": 98, "quantumoptimizer": 98, "_representation": 98, "\u4ee3\u6570": 98, "minimuneigenoptimizer": 98, "_sol": 98, ".max": 98, "# a": 98, "determine": 98, "_vec": 98, "= w": 98, "id": 98, ".eye": 98, "im": 98, ".ones": 98, "iv": 98, "neg": 98, "_iv": 98, "count": 98, "/ (": 98, "!=": 98, "vn": 98, ".sum": [98, 99, 101], ", axis": 98, "interactions": 98, ".kron": 98, "(id": 98, ".dot": 98, "# g": 98, "contribution": 98, "individual": 98, "(iv": 98, "(neg": 98, "+ v": 98, "[0": 98, "evaluates": [98, 103], "path": 98, "fun": [98, 103], "lambda": 98, ".around": 98, "=spsa": 98, ", _": 98, ", level": 98, "=result": 98, "level": 98, "\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u30af\u30e9\u30b9": [98, 103], "\uff08ih": 98, "-qp": 98, "\u6574\u5408\u6027": 98, "\u78ba\u8a8d": [98, 101], "=z": 98, ", binary": 98, ", classical": 98, ".abs": 98, "(binary": 98, "could": 98, "correctness": 98, "unavailable": 98, "nameerror": 98, "please": 98, "cells": 98, "above": 98, ".construct": 98, "\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3": [98, 103], "\u304b\u304b\u308b": 98, "\u304b\u304b\u308a": 98, "\u30ed\u30ae\u30f3\u30b0": 98, "(quantum": 98, "_quantum": 98, "kk": 98, "[kk": 98, "comparison": 98, "\u305f\u307e\u305f": 98, "ilp": 98, "\u53d6\u308a\u7d44\u3093": 98, "\u5c40\u6240": [98, 103], "\u56f0\u96e3": [98, 101], "/ecosystem": 99, "/algorithms": 99, "/>": 99, "`__": 99, "conditional": 99, "risk": 99, "\u5ba2\u89b3": 99, "\u4fe1\u983c": 99, "\u6c34\u6e96": 99, "\\alpha": 99, "\u30d9\u30b9\u30c8\u30b7\u30e7\u30c3\u30c8": 99, "\u306f\u3088\u308a": 99, "\u7126\u70b9": 99, "\u5408\u308f\u305b\u308b": 99, "\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5": 99, "\u30e9\u30f3\u30c9\u30b9\u30b1\u30fc\u30d7": 99, "\u30b9\u30e0\u30fc\u30ba": 99, "barkoutsos": 99, "improving": 99, "linearequalitytopenalty": 99, "prepare": [99, 103], "assets": 99, "budget": 99, "scaling": 99, "sigma": [99, 101], "portfolio": 99, "covariance": 99, "= q": 99, "(objective": [99, 101], "opt": 99, "(opt": 99, "analysis": 99, "would": 99, "necessary": 99, "translation": 99, "(penalty": 99, "=penalty": 99, "_,": 99, "=maxiter": 99, "alphas": 99, "confidence": 99, "levels": 99, "store": 99, "progress": 99, "objectives": 99, "[]": 99, "tested": 99, "callback": 99, "stddev": 99, "[alpha": 99, "append": 99, "_if": 99, "_close": 99, "loop": 99, "aggregation": 99, "=alpha": 99, "=lambda": [99, 101], "-samplingvqe": 99, "_alg": 99, "}:": [99, 103], "(alpha": 99, "(figsize": 99, "--": [99, 102], "linewidth": 99, "label": 99, "(objectives": 99, "2f": [99, 103], ".legend": 99, "(loc": 99, "fontsize": 99, ".xlim": 99, ".xticks": 99, "(fontsize": 99, ".yticks": 99, "sb": 99, "}\"": [99, 103], "ind": [99, 102], ".argsort": 99, ".fromiter": 99, "_probabilities": 99, "dtype": 99, "=float": 99, "%.": 99, "4f": 99, "% (": 99, "[ind": 99, "1:": 99, "_classes": 100, "\u69d8\u3005": [100, 103], "\u8a66\u307f\u308b": 100, "\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30af\u30e9\u30b9": 100, "\u30a2\u30a4\u30c6\u30e0": 100, "\uff11\u56de": 100, "\u30b5\u30d6\u30b3\u30ec\u30af\u30b7\u30e7\u30f3": 100, "\u63a2\u3057": 100, "\u30de\u30eb\u30c1\u30bb\u30c3\u30c8": 100, "\u6240\u4e0e": 100, "\u7b49\u3057\u3044": 100, "\u30d1\u30c3\u30ad\u30f3\u30b0": 100, "\u4e92\u3044": 100, "\u30af\u30ea\u30fc\u30af": 100, "\u8a98\u5c0e": 100, "\u6570\u307e": 100, "\u30ab\u30c3\u30c8": [100, 103], "\u4e8c\u3064": 100, "\u5b89\u5b9a": 100, "\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0": 100, "\u5009\u5eab": 100, "\u8eca\u8f0c": 100, "\u9664\u304f": 100, "\u6700\u4f4e": 100, "\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8": 100, "\u30ce\u30fc\u30c9\u30b5\u30d6\u30bb\u30c3\u30c8": 100, "\u63cf\u753b": 100, "\u3042\u3089\u304b\u3058\u3081": 100, "vertexcover": 100, "\u30e9\u30f3\u30c0\u30e0\u30b0\u30e9\u30d5": 100, ".vertex": 100, "_regular": [100, 103], "(d": [100, 103], "=seed": [100, 103], "(graph": [100, 103], "(pos": 100, "\u89e3\u3051": 100, "\u3002qaoa": 100, "=numpyminimumeigensolver": 100, "nsolution": 100, ", prob": 100, "(reps": 100, "ntime": 100, ".min": 100, "\u7dcf\u91cd": 100, "\u7dcf\u4fa1": 100, "knapsack": 100, "(values": 100, "previous": 100, "section": [100, 102], "c0": 100, "\"num": 100, "_qaoa": 101, "\u3059\u306a\u308f\u3061": [101, 102], "\\sigma": 101, "^tx": 101, "-hard": 101, "\u306a\u306e": 101, "\u5bfe\u89d2": [101, 103], "\\mu": 101, "\u534a\u6b63": 101, "\u5b9a\u5024": 101, "\u89e3\u3051\u308b": 101, "marecek": 101, "modelling": 101, "imports": 101, ".algorithm": 101, "\u534a\u78ba": 101, "\u5b9a\u6b63": 101, "\u30ea\u30e9\u30c3\u30af\u30b9": 101, "\u3057\u3084\u3059\u3044": 101, "(mu": 101, "\"\"\"": 101, "%s": 101, "% i": 101, "(sigma": 101, "change": 101, ".deepcopy": 101, ".vartype": 101, "x4": 101, "x5": 101, "\u306b\u304f\u3044": 101, "\u5c0f\u3055\u3044": 101, "\u5185\u90e8": [101, 103], "\u6574\u5408": [101, 103], "\u4fdd\u3064": 101, "(quadraticprogramtoqubo": 101, "\u7570\u306a\u308a": [101, 103], "sol": 101, "(sol": 101, "_stars": 101, "\u4f9d\u7136": 101, "phi": 101, "bigotimes": 101, ")|": 101, "arcsin": 101, "thetas": 101, ".arcsin": 101, ".sqrt": 101, "_star": 101, "_qc": 101, "idx": 101, "(thetas": 101, ".ry": 101, "(output": 101, "mpl": 101, "style": 101, "clifford": 101, "\u30df\u30ad\u30b5\u30fc": 101, "\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3": 101, "\u9078\u3073": 101, ",i": 101, "ws": 101, "=\n\\": 101, "{pmatrix": 101, "2c": 101, "-i": 101, "\\beta": 101, "\u4e57\u3058": 101, "\u3068\u308b": 101, "\u03b2\"": 101, ".rz": 101, "\u3053\u3046\u3057\u3066": 101, "=init": 101, "=ws": 101, "(ws": 101, "\u3069\u3061\u3089": 101, "\u89b3\u5bdf": [101, 103], "_len": 101, "(_": 101, ", s": 101, "sorted": 101, "+ f": 101, "{_": 101, "3f": 101, "*_": 101, "1f": 101, "}%": 101, "%&": 101, "warmstartqaoaoptimizer": 101, "=cplexoptimizer": 101, "red": [101, 102], "hat": [101, 102], "cet": [101, 102], "_classical": 102, "_models": 102, "groubi": 102, "groubipy": 102, "api": 102, "\u4fdd\u5b58": 102, "\u3092\u901a\u3057": [102, 103], "\u30d5\u30ea\u30fc\u30d0\u30fc\u30b8\u30e7\u30f3": 102, "\u5236\u9650": 102, "\u63b2\u8f09": 102, "(quadratic": 102, "(cplex": 102, "(gurobi": 102, "restricted": 102, "-production": 102, "expires": 102, "\u30fb\u30e1\u30c3\u30bb\u30fc\u30b8": 102, "(disp": 102, "threads": 102, "timelimit": 102, "identifier": 102, "cpxparam": 102, "_read": 102, "_datacheck": 102, "_threads": 102, "_timelimit": 102, "incumbent": 102, "sec": 102, "ticks": 102, "processing": 102, "&amp": 102, ";c": 102, "sequential": 102, "+branch": 102, ";cut": 102, "ndisplay": 102, "[:": [102, 103], "(sample": [102, 103], "= y": 102, "//": 102, "dvar": 102, "io": 102, "stringio": 102, "tempfile": 102, "namedtemporaryfile": 102, "os": 102, "gp": 102, "gpy": 102, "_display": 102, "convenience": 102, "-model": 102, "(suffix": 102, "tmp": 102, ".write": 102, "(tmp": 102, ".read": 102, ".addvar": 102, "(vtype": 102, "=gp": 102, ".grb": 102, ".setobjective": 102, ".addconstr": 102, ".update": 102, "(gurobipy": 102, "browsing": 102, "mps": 102, "capture": 102, "detail": 102, "y ]": 102, "_gurobipy": 102, "(docplex": 102, "docpblex": 102, "-\"": 102, "(qp2": 102, "gmod": 102, "(from": 102, "(gmod": 102, "dmod": 102, "nconvert": 102, "(dmod": 102, "> x": 102, "= z": 102, "_mod": 102, "_indicator": 102, "(ind": 102, "lc1": 102, "\u305a\u306b": 102, "\u30cd\u30a4\u30c6\u30a3\u30d6": 102, "ncplex": 102, "1system": 102, "`docs": 103, "_access": 103, "\uff08quantum": 103, "\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u30b3\u30fc\u30c9": 103, "\u7d44\u307f\u8fbc\u3093": 103, "\u7bc0\u7d04": 103, "\u5927\u898f": 103, "\u5c11\u306a\u3044": 103, "\u30ec\u30d9\u30eb": 103, "\u30de\u30c3\u30af\u30b9\u30ab\u30c3\u30c8": 103, "\u898b\u3064\u3051\u3088": 103, "\u8a00\u3044\u63db\u3048\u308c": 103, "\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30e2\u30b8\u30e5\u30fc\u30eb": 103, "\u305f\u3089": 103, "\u306f\u3059\u3067": 103, "\u81ea\u5206": 103, "\u5fc5\u305a": 103, "quadraticprograms": 103, "\u3053\u3061\u3089": 103, "=num": 103, "=nx": 103, "\u30de\u30c3\u30af\u30b9\u30ab\u30c3\u30c8\u30b0\u30e9\u30d5": 103, "\u9069\u3057": 103, "\uff08ising": 103, "<https": 103, "/documentation": 103, "/optimization": 103, ">`": 103, "\u63a1\u7528": 103, "\u56de\u5fa9": 103, "\u672a\u6e80": 103, "\u9054\u6210": 103, "\u6bd4\u7387": 103, "aka": 103, "our": 103, "\"our": 103, ".qubit": 103, ").\\": 103, "achieve": 103, "\"(": 103, "\"\u2248": 103, ".compression": 103, "xx": 103, "xy": 103, "xz": 103, "yx": 103, "zx": 103, "yy": 103, "yz": 103, "zy": 103, "zz": 103, "\u6210\u529f": 103, "\u6280\u8853": 103, "\u6700\u5c0f\u56fa\u6709": 103, "\u5024\u89e3": 103, "\u30d0\u30c3\u30af\u30a8\u30f3\u30c9": 103, "known": 103, "/pdf": 103, "pdf": 103, "semidterministic": 103, "_rounding": 103, "=semidterministic": 103, "\u6d41\u308c": 103, "\u81ea\u52d5\u7684": 103, "\u5316\u624b": 103, "\u4e0d\u8981": 103, "\u5408\u7406": 103, "\u7c21\u7d20": 103, "\u898b\u3064\u304b\u3063": 103, "\u5358\u4f4d": 103, "\u8abf\u6574": 103, "\u5024\u4ee5": 103, "\u307e\u308b": 103, "\u591a\u3044": 103, "\"the": 103, "\"relaxed": 103, ".relaxed": 103, "\u6700\u9069\u5024": 103, "\u6559\u3048": 103, "\u304f\u308c": 103, "places": 103, "\"and": 103, ";qiskit": 103, ".vqeresult": 103, "\u5024\u3057": 103, ".\u3002": 103, "semideterministricrounding": 103, "\uff08semi": 103, "\u89e3\u5019": 103, ", fval": 103, "\u6027\u80fd": 103, "\u8fd1\u4f3c\u6bd4": 103, "\uff08qrao": 103, "\u5272\u3063": 103, "\u8fd1\u3065": 103, "\u305f\u304b": 103, ", results": 103, ", exact": 103, "\"approximation": 103, "\u3082\u3088\u3044": 103, "\u6e21\u3055": 103, "\u7dcf\u6570": 103, "aer": 103, "\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc": 103, "\u5927\u5e45": 103, "\u306e\u306b\u5bfe\u3057": 103, "\u751f\u3058": 103, "\u3002magic": 103, "\u591a\u69d8": 103, "\u5897\u3084\u3059": 103, "\u5411\u4e0a": 103, "\u5927\u304d": 103, "\u672b\u5c3e": 103, "\u3054\u3068": 103, "\u306b\u3064\u308c": 103, "\u304b\u3082": 103, "\u3057\u308c": 103, "(options": 103, "=magic": 103, "\u975e\u6c7a\u5b9a": 103, "\u524d\u8ff0": 103, "\u53ce\u96c6": 103, "\u91cd\u8907": 103, "\u7d4c\u9a13": 103, "\u9023\u7d50": 103, "\u3002max": 103, "\u89e3\u3068\u3057\u3066": 103, "largest": 103, "\u30d1\u30fc\u30c8": 103, "\u5206\u3051\u308b": 103, "\u5019\u88dc": 103, "\u6709\u76ca": 103, "\u63a2\u308a": 103, "\u884c\u308f": 103, "\u96c6\u4e2d": 103, "\u542b\u307f": 103, "\u3084\u305d\u306e": 103, "\u9805\u76ee": 103, "\u3059\u3050": 103, "\u30ab\u30d7\u30bb\u30eb": 103, "dir": 103, "(relaxed": 103, ".startswith": 103, "_\"": 103, "getattr": 103, "aux": 103, "_operators": 103, "_evaluated": 103, ", (": 103, "combine": 103, ";bound": 103, "algorithmresult": 103, ".combine": 103, "_function": 103, "_evals": 103, "\u2500\u2500": 103, "\u2510\nq": 103, "(\u03b8": 103, "\u03b8[": 103, "\u2514\u2500": 103, "\u2500\u2518": 103, "parametervectorelement": 103, "jac": 103, "nfev": 103, "nit": 103, "njev": 103, "\u89e3\u3044": 103, "\u5e0c\u671b": 103, "\u6e21\u3057": 103, "\u67d4\u8edf": 103, "\u4e38\u3081\u65b9": 103, "sdr": 103, "_sdr": 103, ".process": 103, "=problem": 103, "=relaxed": 103, "=sdr": 103, "(qrao": 103, "mr": 103, "_mr": 103, "=mr": 103, "\u4ea4\u63db": 103, "\uff08qiskit": 103, "\u306b\u304a\u3044": 103, "\u6559\u80b2": 103, "\u4e88\u671f": 103, "\u30d0\u30b0": 103, "\u307f\u306a\u3055": 103, "\u3082\u3057\u305d\u306e": 103, "\u63d0\u51fa": 103, "encodingcommutationverifier": 103, "\u4f7f\u3048": 103, "\u5404\u76ee": 103, "\u7684\u5024": 103, "\u77db\u76fe": 103, "\u524d\u56de": 103, ", encoding": 103, ".offset": 103, ".q": 103, "verifier": 103, "(verifier": 103, "_dvars": 103, "_val": 103, ".isclose": 103, "\"violation": 103, "identified": 103, "\"but": 103, "\u9055\u53cd": 103, "\u30ed\u30b8\u30c3\u30af": 103, "\u305f\u3060\u3051\u308b": 103, "\u5927\u5909": 103, "8a": 103}, "objects": {"": [[0, 0, 0, "-", "qiskit_optimization"]], "qiskit_optimization": [[15, 1, 1, "", "QiskitOptimizationError"], [16, 3, 1, "", "QuadraticProgram"], [1, 0, 0, "-", "algorithms"], [3, 0, 0, "-", "applications"], [4, 0, 0, "-", "converters"], [5, 0, 0, "-", "problems"], [6, 0, 0, "-", "translators"]], "qiskit_optimization.QiskitOptimizationError": [[15, 2, 1, "", "add_note"], [15, 2, 1, "", "with_traceback"]], "qiskit_optimization.QuadraticProgram": [[16, 2, 1, "", "binary_var"], [16, 2, 1, "", "binary_var_dict"], [16, 2, 1, "", "binary_var_list"], [16, 2, 1, "", "clear"], [16, 2, 1, "", "continuous_var"], [16, 2, 1, "", "continuous_var_dict"], [16, 2, 1, "", "continuous_var_list"], [16, 2, 1, "", "export_as_lp_string"], [16, 2, 1, "", "from_ising"], [16, 2, 1, "", "get_feasibility_info"], [16, 2, 1, "", "get_linear_constraint"], [16, 2, 1, "", "get_num_binary_vars"], [16, 2, 1, "", "get_num_continuous_vars"], [16, 2, 1, "", "get_num_integer_vars"], [16, 2, 1, "", "get_num_linear_constraints"], [16, 2, 1, "", "get_num_quadratic_constraints"], [16, 2, 1, "", "get_num_vars"], [16, 2, 1, "", "get_quadratic_constraint"], [16, 2, 1, "", "get_variable"], [16, 2, 1, "", "integer_var"], [16, 2, 1, "", "integer_var_dict"], [16, 2, 1, "", "integer_var_list"], [16, 2, 1, "", "is_feasible"], [16, 2, 1, "", "linear_constraint"], [16, 4, 1, "", "linear_constraints"], [16, 4, 1, "", "linear_constraints_index"], [16, 2, 1, "", "maximize"], [16, 2, 1, "", "minimize"], [16, 4, 1, "", "name"], [16, 4, 1, "", "objective"], [16, 2, 1, "", "prettyprint"], [16, 2, 1, "", "quadratic_constraint"], [16, 4, 1, "", "quadratic_constraints"], [16, 4, 1, "", "quadratic_constraints_index"], [16, 2, 1, "", "read_from_lp_file"], [16, 2, 1, "", "remove_linear_constraint"], [16, 2, 1, "", "remove_quadratic_constraint"], [16, 4, 1, "", "status"], [16, 2, 1, "", "substitute_variables"], [16, 2, 1, "", "to_ising"], [16, 4, 1, "", "variables"], [16, 4, 1, "", "variables_index"], [16, 2, 1, "", "write_to_lp_file"]], "qiskit_optimization.algorithms": [[17, 3, 1, "", "ADMMOptimizationResult"], [18, 3, 1, "", "ADMMOptimizer"], [19, 3, 1, "", "ADMMParameters"], [20, 3, 1, "", "ADMMState"], [21, 3, 1, "", "BaseAggregator"], [22, 3, 1, "", "CobylaOptimizer"], [23, 3, 1, "", "CplexOptimizer"], [24, 3, 1, "", "GoemansWilliamsonOptimizationResult"], [25, 3, 1, "", "GoemansWilliamsonOptimizer"], [26, 3, 1, "", "GroverOptimizationResult"], [27, 3, 1, "", "GroverOptimizer"], [28, 3, 1, "", "GurobiOptimizer"], [29, 3, 1, "", "IntermediateResult"], [30, 3, 1, "", "MeanAggregator"], [31, 3, 1, "", "MinimumEigenOptimizationResult"], [32, 3, 1, "", "MinimumEigenOptimizer"], [33, 3, 1, "", "MultiStartOptimizer"], [34, 3, 1, "", "OptimizationAlgorithm"], [35, 3, 1, "", "OptimizationResult"], [36, 3, 1, "", "OptimizationResultStatus"], [37, 3, 1, "", "RecursiveMinimumEigenOptimizationResult"], [38, 3, 1, "", "RecursiveMinimumEigenOptimizer"], [39, 3, 1, "", "ScipyMilpOptimizer"], [40, 3, 1, "", "SlsqpOptimizationResult"], [41, 3, 1, "", "SlsqpOptimizer"], [42, 3, 1, "", "SolutionSample"], [43, 3, 1, "", "WarmStartQAOAFactory"], [44, 3, 1, "", "WarmStartQAOAOptimizer"], [2, 0, 0, "-", "qrao"]], "qiskit_optimization.algorithms.ADMMOptimizationResult": [[17, 4, 1, "", "fval"], [17, 2, 1, "", "get_correlations"], [17, 2, 1, "", "prettyprint"], [17, 4, 1, "", "raw_results"], [17, 4, 1, "", "samples"], [17, 4, 1, "", "state"], [17, 4, 1, "", "status"], [17, 4, 1, "", "variable_names"], [17, 4, 1, "", "variables"], [17, 4, 1, "", "variables_dict"], [17, 4, 1, "", "x"]], "qiskit_optimization.algorithms.ADMMOptimizer": [[18, 2, 1, "", "get_compatibility_msg"], [18, 2, 1, "", "is_compatible"], [18, 4, 1, "", "parameters"], [18, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.BaseAggregator": [[21, 2, 1, "", "aggregate"]], "qiskit_optimization.algorithms.CobylaOptimizer": [[22, 4, 1, "", "clip"], [22, 2, 1, "", "get_compatibility_msg"], [22, 2, 1, "", "is_compatible"], [22, 2, 1, "", "multi_start_solve"], [22, 2, 1, "", "solve"], [22, 4, 1, "", "trials"]], "qiskit_optimization.algorithms.CplexOptimizer": [[23, 4, 1, "", "cplex_parameters"], [23, 4, 1, "", "disp"], [23, 2, 1, "", "get_compatibility_msg"], [23, 2, 1, "", "is_compatible"], [23, 2, 1, "", "is_cplex_installed"], [23, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult": [[24, 4, 1, "", "fval"], [24, 2, 1, "", "get_correlations"], [24, 2, 1, "", "prettyprint"], [24, 4, 1, "", "raw_results"], [24, 4, 1, "", "samples"], [24, 4, 1, "", "sdp_solution"], [24, 4, 1, "", "status"], [24, 4, 1, "", "variable_names"], [24, 4, 1, "", "variables"], [24, 4, 1, "", "variables_dict"], [24, 4, 1, "", "x"]], "qiskit_optimization.algorithms.GoemansWilliamsonOptimizer": [[25, 2, 1, "", "get_compatibility_msg"], [25, 2, 1, "", "is_compatible"], [25, 2, 1, "", "max_cut_value"], [25, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.GroverOptimizationResult": [[26, 4, 1, "", "fval"], [26, 2, 1, "", "get_correlations"], [26, 4, 1, "", "intermediate_fval"], [26, 4, 1, "", "n_input_qubits"], [26, 4, 1, "", "n_output_qubits"], [26, 4, 1, "", "operation_counts"], [26, 2, 1, "", "prettyprint"], [26, 4, 1, "", "raw_results"], [26, 4, 1, "", "raw_samples"], [26, 4, 1, "", "samples"], [26, 4, 1, "", "status"], [26, 4, 1, "", "threshold"], [26, 4, 1, "", "variable_names"], [26, 4, 1, "", "variables"], [26, 4, 1, "", "variables_dict"], [26, 4, 1, "", "x"]], "qiskit_optimization.algorithms.GroverOptimizer": [[27, 2, 1, "", "get_compatibility_msg"], [27, 2, 1, "", "is_compatible"], [27, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.GurobiOptimizer": [[28, 4, 1, "", "disp"], [28, 2, 1, "", "get_compatibility_msg"], [28, 2, 1, "", "is_compatible"], [28, 2, 1, "", "is_gurobi_installed"], [28, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.IntermediateResult": [[29, 4, 1, "", "ALL_ITERATIONS"], [29, 4, 1, "", "LAST_ITERATION"], [29, 4, 1, "", "NO_ITERATIONS"]], "qiskit_optimization.algorithms.MeanAggregator": [[30, 2, 1, "", "aggregate"]], "qiskit_optimization.algorithms.MinimumEigenOptimizationResult": [[31, 4, 1, "", "fval"], [31, 2, 1, "", "get_correlations"], [31, 4, 1, "", "min_eigen_solver_result"], [31, 2, 1, "", "prettyprint"], [31, 4, 1, "", "raw_results"], [31, 4, 1, "", "raw_samples"], [31, 4, 1, "", "samples"], [31, 4, 1, "", "status"], [31, 4, 1, "", "variable_names"], [31, 4, 1, "", "variables"], [31, 4, 1, "", "variables_dict"], [31, 4, 1, "", "x"]], "qiskit_optimization.algorithms.MinimumEigenOptimizer": [[32, 2, 1, "", "get_compatibility_msg"], [32, 2, 1, "", "is_compatible"], [32, 4, 1, "", "min_eigen_solver"], [32, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.MultiStartOptimizer": [[33, 4, 1, "", "clip"], [33, 2, 1, "", "get_compatibility_msg"], [33, 2, 1, "", "is_compatible"], [33, 2, 1, "", "multi_start_solve"], [33, 2, 1, "", "solve"], [33, 4, 1, "", "trials"]], "qiskit_optimization.algorithms.OptimizationAlgorithm": [[34, 2, 1, "", "get_compatibility_msg"], [34, 2, 1, "", "is_compatible"], [34, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.OptimizationResult": [[35, 4, 1, "", "fval"], [35, 2, 1, "", "get_correlations"], [35, 2, 1, "", "prettyprint"], [35, 4, 1, "", "raw_results"], [35, 4, 1, "", "samples"], [35, 4, 1, "", "status"], [35, 4, 1, "", "variable_names"], [35, 4, 1, "", "variables"], [35, 4, 1, "", "variables_dict"], [35, 4, 1, "", "x"]], "qiskit_optimization.algorithms.OptimizationResultStatus": [[36, 4, 1, "", "FAILURE"], [36, 4, 1, "", "INFEASIBLE"], [36, 4, 1, "", "SUCCESS"]], "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult": [[37, 4, 1, "", "fval"], [37, 2, 1, "", "get_correlations"], [37, 4, 1, "", "history"], [37, 2, 1, "", "prettyprint"], [37, 4, 1, "", "raw_results"], [37, 4, 1, "", "replacements"], [37, 4, 1, "", "samples"], [37, 4, 1, "", "status"], [37, 4, 1, "", "variable_names"], [37, 4, 1, "", "variables"], [37, 4, 1, "", "variables_dict"], [37, 4, 1, "", "x"]], "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer": [[38, 2, 1, "", "get_compatibility_msg"], [38, 2, 1, "", "is_compatible"], [38, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.ScipyMilpOptimizer": [[39, 4, 1, "", "disp"], [39, 2, 1, "", "get_compatibility_msg"], [39, 2, 1, "", "is_compatible"], [39, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.SlsqpOptimizationResult": [[40, 4, 1, "", "fval"], [40, 4, 1, "", "fx"], [40, 2, 1, "", "get_correlations"], [40, 4, 1, "", "imode"], [40, 4, 1, "", "its"], [40, 2, 1, "", "prettyprint"], [40, 4, 1, "", "raw_results"], [40, 4, 1, "", "samples"], [40, 4, 1, "", "smode"], [40, 4, 1, "", "status"], [40, 4, 1, "", "variable_names"], [40, 4, 1, "", "variables"], [40, 4, 1, "", "variables_dict"], [40, 4, 1, "", "x"]], "qiskit_optimization.algorithms.SlsqpOptimizer": [[41, 4, 1, "", "clip"], [41, 2, 1, "", "get_compatibility_msg"], [41, 2, 1, "", "is_compatible"], [41, 2, 1, "", "multi_start_solve"], [41, 2, 1, "", "solve"], [41, 4, 1, "", "trials"]], "qiskit_optimization.algorithms.SolutionSample": [[42, 4, 1, "", "fval"], [42, 4, 1, "", "probability"], [42, 4, 1, "", "status"], [42, 4, 1, "", "x"]], "qiskit_optimization.algorithms.WarmStartQAOAFactory": [[43, 2, 1, "", "create_initial_state"], [43, 2, 1, "", "create_initial_variables"], [43, 2, 1, "", "create_mixer"]], "qiskit_optimization.algorithms.WarmStartQAOAOptimizer": [[44, 2, 1, "", "get_compatibility_msg"], [44, 2, 1, "", "is_compatible"], [44, 4, 1, "", "min_eigen_solver"], [44, 2, 1, "", "solve"]], "qiskit_optimization.algorithms.qrao": [[45, 3, 1, "", "EncodingCommutationVerifier"], [46, 3, 1, "", "MagicRounding"], [47, 3, 1, "", "QuantumRandomAccessEncoding"], [48, 3, 1, "", "QuantumRandomAccessOptimizationResult"], [49, 3, 1, "", "QuantumRandomAccessOptimizer"], [50, 3, 1, "", "RoundingContext"], [51, 3, 1, "", "RoundingResult"], [52, 3, 1, "", "RoundingScheme"], [53, 3, 1, "", "SemideterministicRounding"]], "qiskit_optimization.algorithms.qrao.MagicRounding": [[46, 4, 1, "", "basis_sampling"], [46, 2, 1, "", "round"], [46, 4, 1, "", "sampler"]], "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding": [[47, 4, 1, "", "compression_ratio"], [47, 2, 1, "", "encode"], [47, 2, 1, "", "freeze"], [47, 4, 1, "", "frozen"], [47, 4, 1, "", "max_vars_per_qubit"], [47, 4, 1, "", "minimum_recovery_probability"], [47, 4, 1, "", "num_qubits"], [47, 4, 1, "", "num_vars"], [47, 4, 1, "", "offset"], [47, 4, 1, "", "problem"], [47, 4, 1, "", "q2vars"], [47, 4, 1, "", "qubit_op"], [47, 2, 1, "", "state_preparation_circuit"], [47, 4, 1, "", "var2op"]], "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult": [[48, 4, 1, "", "encoding"], [48, 4, 1, "", "fval"], [48, 2, 1, "", "get_correlations"], [48, 2, 1, "", "prettyprint"], [48, 4, 1, "", "raw_results"], [48, 4, 1, "", "relaxed_fval"], [48, 4, 1, "", "relaxed_result"], [48, 4, 1, "", "rounding_result"], [48, 4, 1, "", "samples"], [48, 4, 1, "", "status"], [48, 4, 1, "", "variable_names"], [48, 4, 1, "", "variables"], [48, 4, 1, "", "variables_dict"], [48, 4, 1, "", "x"]], "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer": [[49, 2, 1, "", "get_compatibility_msg"], [49, 2, 1, "", "is_compatible"], [49, 4, 1, "", "max_vars_per_qubit"], [49, 4, 1, "", "min_eigen_solver"], [49, 2, 1, "", "process_result"], [49, 4, 1, "", "rounding_scheme"], [49, 2, 1, "", "solve"], [49, 2, 1, "", "solve_relaxed"]], "qiskit_optimization.algorithms.qrao.RoundingContext": [[50, 4, 1, "", "circuit"], [50, 4, 1, "", "encoding"], [50, 4, 1, "", "expectation_values"]], "qiskit_optimization.algorithms.qrao.RoundingResult": [[51, 4, 1, "", "bases"], [51, 4, 1, "", "basis_counts"], [51, 4, 1, "", "basis_shots"], [51, 4, 1, "", "expectation_values"], [51, 4, 1, "", "samples"]], "qiskit_optimization.algorithms.qrao.RoundingScheme": [[52, 2, 1, "", "round"]], "qiskit_optimization.algorithms.qrao.SemideterministicRounding": [[53, 2, 1, "", "round"]], "qiskit_optimization.applications": [[54, 3, 1, "", "BinPacking"], [55, 3, 1, "", "Clique"], [56, 3, 1, "", "ExactCover"], [57, 3, 1, "", "GraphOptimizationApplication"], [58, 3, 1, "", "GraphPartition"], [59, 3, 1, "", "Knapsack"], [60, 3, 1, "", "Maxcut"], [61, 3, 1, "", "NumberPartition"], [62, 3, 1, "", "OptimizationApplication"], [63, 3, 1, "", "SKModel"], [64, 3, 1, "", "SetPacking"], [65, 3, 1, "", "StableSet"], [66, 3, 1, "", "Tsp"], [67, 3, 1, "", "VehicleRouting"], [68, 3, 1, "", "VertexCover"]], "qiskit_optimization.applications.BinPacking": [[54, 2, 1, "", "get_figure"], [54, 2, 1, "", "interpret"], [54, 2, 1, "", "sample_most_likely"], [54, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Clique": [[55, 2, 1, "", "draw"], [55, 4, 1, "", "graph"], [55, 2, 1, "", "interpret"], [55, 2, 1, "", "sample_most_likely"], [55, 4, 1, "", "size"], [55, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.ExactCover": [[56, 2, 1, "", "interpret"], [56, 2, 1, "", "sample_most_likely"], [56, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.GraphOptimizationApplication": [[57, 2, 1, "", "draw"], [57, 4, 1, "", "graph"], [57, 2, 1, "", "interpret"], [57, 2, 1, "", "sample_most_likely"], [57, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.GraphPartition": [[58, 2, 1, "", "draw"], [58, 4, 1, "", "graph"], [58, 2, 1, "", "interpret"], [58, 2, 1, "", "sample_most_likely"], [58, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Knapsack": [[59, 2, 1, "", "interpret"], [59, 4, 1, "", "max_weight"], [59, 2, 1, "", "sample_most_likely"], [59, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Maxcut": [[60, 2, 1, "", "draw"], [60, 2, 1, "", "get_gset_result"], [60, 4, 1, "", "graph"], [60, 2, 1, "", "interpret"], [60, 2, 1, "", "parse_gset_format"], [60, 2, 1, "", "sample_most_likely"], [60, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.NumberPartition": [[61, 2, 1, "", "interpret"], [61, 2, 1, "", "sample_most_likely"], [61, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.OptimizationApplication": [[62, 2, 1, "", "interpret"], [62, 2, 1, "", "sample_most_likely"], [62, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.SKModel": [[63, 2, 1, "", "disorder"], [63, 4, 1, "", "graph"], [63, 2, 1, "", "interpret"], [63, 4, 1, "", "num_sites"], [63, 2, 1, "", "sample_most_likely"], [63, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.SetPacking": [[64, 2, 1, "", "interpret"], [64, 2, 1, "", "sample_most_likely"], [64, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.StableSet": [[65, 2, 1, "", "draw"], [65, 4, 1, "", "graph"], [65, 2, 1, "", "interpret"], [65, 2, 1, "", "sample_most_likely"], [65, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.Tsp": [[66, 2, 1, "", "create_random_instance"], [66, 2, 1, "", "draw"], [66, 4, 1, "", "graph"], [66, 2, 1, "", "interpret"], [66, 2, 1, "", "parse_tsplib_format"], [66, 2, 1, "", "sample_most_likely"], [66, 2, 1, "", "to_quadratic_program"], [66, 2, 1, "", "tsp_value"]], "qiskit_optimization.applications.VehicleRouting": [[67, 2, 1, "", "create_random_instance"], [67, 4, 1, "", "depot"], [67, 2, 1, "", "draw"], [67, 4, 1, "", "graph"], [67, 2, 1, "", "interpret"], [67, 4, 1, "", "num_vehicles"], [67, 2, 1, "", "sample_most_likely"], [67, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.applications.VertexCover": [[68, 2, 1, "", "draw"], [68, 4, 1, "", "graph"], [68, 2, 1, "", "interpret"], [68, 2, 1, "", "sample_most_likely"], [68, 2, 1, "", "to_quadratic_program"]], "qiskit_optimization.converters": [[69, 3, 1, "", "InequalityToEquality"], [70, 3, 1, "", "IntegerToBinary"], [71, 3, 1, "", "LinearEqualityToPenalty"], [72, 3, 1, "", "LinearInequalityToPenalty"], [73, 3, 1, "", "MaximizeToMinimize"], [74, 3, 1, "", "MinimizeToMaximize"], [75, 3, 1, "", "QuadraticProgramConverter"], [76, 3, 1, "", "QuadraticProgramToQubo"]], "qiskit_optimization.converters.InequalityToEquality": [[69, 2, 1, "", "convert"], [69, 2, 1, "", "interpret"], [69, 4, 1, "", "mode"]], "qiskit_optimization.converters.IntegerToBinary": [[70, 2, 1, "", "convert"], [70, 2, 1, "", "interpret"]], "qiskit_optimization.converters.LinearEqualityToPenalty": [[71, 2, 1, "", "convert"], [71, 2, 1, "", "interpret"], [71, 4, 1, "", "penalty"]], "qiskit_optimization.converters.LinearInequalityToPenalty": [[72, 2, 1, "", "convert"], [72, 2, 1, "", "interpret"], [72, 4, 1, "", "penalty"]], "qiskit_optimization.converters.MaximizeToMinimize": [[73, 2, 1, "", "convert"], [73, 2, 1, "", "interpret"]], "qiskit_optimization.converters.MinimizeToMaximize": [[74, 2, 1, "", "convert"], [74, 2, 1, "", "interpret"]], "qiskit_optimization.converters.QuadraticProgramConverter": [[75, 2, 1, "", "convert"], [75, 2, 1, "", "interpret"]], "qiskit_optimization.converters.QuadraticProgramToQubo": [[76, 2, 1, "", "convert"], [76, 2, 1, "", "get_compatibility_msg"], [76, 2, 1, "", "interpret"], [76, 2, 1, "", "is_compatible"], [76, 4, 1, "", "penalty"]], "qiskit_optimization.infinity": [[77, 5, 1, "", "INFINITY"]], "qiskit_optimization.problems": [[78, 3, 1, "", "Constraint"], [79, 3, 1, "", "LinearConstraint"], [80, 3, 1, "", "LinearExpression"], [81, 3, 1, "", "QuadraticConstraint"], [82, 3, 1, "", "QuadraticExpression"], [83, 3, 1, "", "QuadraticObjective"], [84, 3, 1, "", "QuadraticProgramElement"], [85, 3, 1, "", "Variable"]], "qiskit_optimization.problems.Constraint": [[78, 2, 1, "", "evaluate"], [78, 4, 1, "", "name"], [78, 4, 1, "", "quadratic_program"], [78, 4, 1, "", "rhs"], [78, 4, 1, "", "sense"]], "qiskit_optimization.problems.LinearConstraint": [[79, 2, 1, "", "evaluate"], [79, 4, 1, "", "linear"], [79, 4, 1, "", "name"], [79, 4, 1, "", "quadratic_program"], [79, 4, 1, "", "rhs"], [79, 4, 1, "", "sense"]], "qiskit_optimization.problems.LinearExpression": [[80, 4, 1, "", "bounds"], [80, 4, 1, "", "coefficients"], [80, 2, 1, "", "evaluate"], [80, 2, 1, "", "evaluate_gradient"], [80, 4, 1, "", "quadratic_program"], [80, 2, 1, "", "to_array"], [80, 2, 1, "", "to_dict"]], "qiskit_optimization.problems.QuadraticConstraint": [[81, 2, 1, "", "evaluate"], [81, 4, 1, "", "linear"], [81, 4, 1, "", "name"], [81, 4, 1, "", "quadratic"], [81, 4, 1, "", "quadratic_program"], [81, 4, 1, "", "rhs"], [81, 4, 1, "", "sense"]], "qiskit_optimization.problems.QuadraticExpression": [[82, 4, 1, "", "bounds"], [82, 4, 1, "", "coefficients"], [82, 2, 1, "", "evaluate"], [82, 2, 1, "", "evaluate_gradient"], [82, 4, 1, "", "quadratic_program"], [82, 2, 1, "", "to_array"], [82, 2, 1, "", "to_dict"]], "qiskit_optimization.problems.QuadraticObjective": [[83, 4, 1, "", "constant"], [83, 2, 1, "", "evaluate"], [83, 2, 1, "", "evaluate_gradient"], [83, 4, 1, "", "linear"], [83, 4, 1, "", "quadratic"], [83, 4, 1, "", "quadratic_program"], [83, 4, 1, "", "sense"]], "qiskit_optimization.problems.QuadraticProgramElement": [[84, 4, 1, "", "quadratic_program"]], "qiskit_optimization.problems.Variable": [[85, 2, 1, "", "as_tuple"], [85, 4, 1, "", "lowerbound"], [85, 4, 1, "", "name"], [85, 4, 1, "", "quadratic_program"], [85, 4, 1, "", "upperbound"], [85, 4, 1, "", "vartype"]], "qiskit_optimization.translators": [[86, 6, 1, "", "from_docplex_mp"], [87, 6, 1, "", "from_gurobipy"], [88, 6, 1, "", "from_ising"], [89, 6, 1, "", "to_docplex_mp"], [90, 6, 1, "", "to_gurobipy"], [91, 6, 1, "", "to_ising"]]}, "objtypes": {"0": "py:module", "1": "py:exception", "2": "py:method", "3": "py:class", "4": "py:attribute", "5": "py:data", "6": "py:function"}, "objnames": {"0": ["py", "module", "Python \u30e2\u30b8\u30e5\u30fc\u30eb"], "1": ["py", "exception", "Python \u4f8b\u5916"], "2": ["py", "method", "Python \u30e1\u30bd\u30c3\u30c9"], "3": ["py", "class", "Python \u30af\u30e9\u30b9"], "4": ["py", "attribute", "Python \u306e\u5c5e\u6027"], "5": ["py", "data", "Python \u30c7\u30fc\u30bf"], "6": ["py", "function", "Python \u306e\u95a2\u6570"]}, "titleterms": {"qiskit": [0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 102], "optimization": [0, 1, 2, 3, 4, 5, 7, 10, 11, 12, 13, 102, 103, 104], "api": 0, "reference": 0, "module": 0, "_optimization": [0, 1, 2, 3, 4, 5, 6], "submodules": [0, 1], "algorithms": 1, ".algorithms": [1, 2], "base": [1, 3, 4], "classes": [1, 3], "for": [1, 3, 4], "and": [1, 2], "results": 1, "quantum": [2, 103], "random": [2, 103], "access": [2, 103], ".qrao": 2, "encoding": 2, "rounding": 2, "schemes": 2, "applications": 3, ".applications": 3, "converters": 4, ".converters": 4, "class": 4, "problems": 5, ".problems": 5, "quadratic": [5, 6], "program": [5, 6], "translators": 6, ".translators": 6, "\u8aac\u660e": 7, "\u91cf\u5b50": [8, 96, 97, 98, 99, 101, 103], "\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9": [8, 103], "\u6700\u9069": [8, 97, 99, 100, 101, 102, 103], "qrao": 8, "\u80cc\u666f": 8, "\u7de9\u548c": [8, 101, 103], "\u7b26\u53f7": [8, 103], "\u4e38\u3081": [8, 103], "\u30b9\u30ad\u30fc\u30e0": 8, "\u30ea\u30e9\u30af\u30bc\u30fc\u30b7\u30e7\u30f3": 8, "\u7c21\u5358": 8, "\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u30b3\u30fc\u30c9": 8, "qrac": 8, "\u306b\u3088\u308b": [8, 103], ", :": 8, "math": 8, ":`": 8, ")\u300f": 8, "\u7b26\u53f7\u5316": [8, 103], "\u30d3\u30c3\u30c8": 8, "\u5fa9\u5143": 8, "\u554f\u984c": [8, 95, 97, 100, 103], "\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3": [8, 97, 98, 100, 103], "\u4ea4\u63db": 8, "\u534a\u6c7a\u5b9a\u8ad6": 8, "\u30de\u30b8\u30c3\u30af": 8, "\u72b6\u614b": 8, "\u53c2\u8003": [8, 94, 95, 96, 98, 99, 101], "\u6587\u732e": [8, 94, 95, 96, 98, 99, 101], "\u306f\u3058\u3081": [9, 92, 94, 95, 96, 97, 98, 99, 100, 101], "\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb": 9, "\u30aa\u30d7\u30b7\u30e7\u30f3": 9, "\u6e96\u5099": [9, 101], "\u3044\u3044": 9, "\u3067\u3059": 9, "\uff1f\u2026": 9, "\u6982\u8981": [10, 11, 12], "\u30b9\u30c6\u30c3\u30d7": [10, 98, 103], "\u79fb\u884c": [11, 12, 13], "\u30ac\u30a4\u30c9": [11, 12, 13], "minimumeigenoptimizer": [11, 12, 32, 94], "numpyminimumeigensolver": [11, 12, 103], "qaoa": [11, 12, 101], "vqe": 11, "samplingvqe": [11, 12, 99], "\u65b0\u898f": 11, "warmstartqaoaoptimizer": [11, 12, 44], "groveroptimizer": [11, 12, 27, 95], "release": 14, "notes": 14, "qiskitoptimizationerror": 15, "quadraticprogram": [16, 92, 102], "admmoptimizationresult": 17, "admmoptimizer": 18, "admmparameters": 19, "admmstate": 20, "baseaggregator": 21, "cobylaoptimizer": 22, "cplexoptimizer": 23, "goemanswilliamsonoptimizationresult": 24, "goemanswilliamsonoptimizer": 25, "groveroptimizationresult": 26, "gurobioptimizer": 28, "intermediateresult": 29, "meanaggregator": 30, "minimumeigenoptimizationresult": 31, "multistartoptimizer": 33, "optimizationalgorithm": 34, "optimizationresult": 35, "optimizationresultstatus": 36, "recursiveminimumeigenoptimizationresult": 37, "recursiveminimumeigenoptimizer": [38, 94], "scipymilpoptimizer": 39, "slsqpoptimizationresult": 40, "slsqpoptimizer": 41, "solutionsample": 42, "warmstartqaoafactory": 43, "encodingcommutationverifier": 45, "magicrounding": [46, 103], "quantumrandomaccessencoding": 47, "quantumrandomaccessoptimizationresult": 48, "quantumrandomaccessoptimizer": [49, 103], "roundingcontext": 50, "roundingresult": 51, "roundingscheme": 52, "semideterministicrounding": 53, "binpacking": 54, "clique": 55, "exactcover": 56, "graphoptimizationapplication": 57, "graphpartition": 58, "knapsack": 59, "maxcut": 60, "numberpartition": 61, "optimizationapplication": 62, "skmodel": 63, "setpacking": 64, "stableset": 65, "tsp": 66, "vehiclerouting": 67, "vertexcover": 68, "inequalitytoequality": [69, 93], "integertobinary": [70, 93], "linearequalitytopenalty": [71, 93], "linearinequalitytopenalty": 72, "maximizetominimize": 73, "minimizetomaximize": 74, "quadraticprogramconverter": 75, "quadraticprogramtoqubo": 76, "infinity": 77, "constraint": 78, "linearconstraint": 79, "linearexpression": 80, "quadraticconstraint": 81, "quadraticexpression": 82, "quadraticobjective": 83, "quadraticprogramelement": 84, "variable": 85, "from": [86, 87, 88], "_docplex": [86, 89], "_mp": [86, 89], "_gurobipy": [87, 90], "_ising": [88, 91], "to": [89, 90, 91], "\u4e8c\u6b21\u8a08\u753b\u6cd5": [92, 93], "lp": 92, "\u30d5\u30a1\u30a4\u30eb": 92, "\u304b\u3089": [92, 98], "\u30ed\u30fc\u30c9": 92, "\u3059\u308b": [92, 94, 103], "docplex": [92, 102], "\u30e2\u30c7\u30eb": [92, 98, 102], "\u76f4\u63a5": 92, "\u69cb\u7bc9": [92, 98], "\u7dda\u5f62": 92, "\u304a\u3088\u3073": 92, "\u4e8c\u6b21": 92, "\u5236\u7d04": [92, 102], "\u8ffd\u52a0": 92, "\u524a\u9664": 92, "\u5909\u6570": 92, "\u7f6e\u304d": 92, "\u63db\u3048": 92, "\u307e\u3059": 92, "\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc": 93, "\u6700\u5c0f\u56fa": 94, "\u6709\u5024": 94, "\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc": [94, 96, 99], "minimum": [94, 99], "eigen": [94, 99], "optimizer": [94, 99], "qubo": [94, 95], "sparsepauliop": 94, "\u5909\u63db": 94, "\u89e3\u304f": [94, 103], "\u30b5\u30f3\u30d7\u30eb": 94, "\u5206\u6790": [94, 101], "\u30b0\u30ed\u30fc\u30d0\u30fc\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc": 95, "\u30b0\u30ed\u30fc\u30d0\u30fc": 95, "\u9069\u5fdc": 95, "\u63a2\u7d22": 95, "\u4f7f\u7528": [95, 98, 99, 102], "\u6700\u5c0f\u5024": 95, "\u898b\u3064\u3051\u308b": 95, "\u6b63\u3057\u3044": 95, "\u3053\u3068": [95, 97], "\u78ba\u8a8d": [95, 97, 100], "admm": 96, "\u671f\u5316": [96, 98], "\u53e4\u5178": [96, 98, 102], "\u89e3\u6cd5": 96, "\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc": 96, "-h": 96, "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0": 96, "\u547c\u3073\u51fa\u3059": 96, "\u30bd\u30eb\u30d0\u30fc": [96, 102], "\u7d50\u679c": [96, 103], "\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3": [96, 98], "\u6700\u5927": 97, "\u30ab\u30c3\u30c8": 97, "\u30bb\u30fc\u30eb\u30b9\u30de\u30f3": 97, "\u5de1\u56de": 97, "\u91cd\u307f": 97, "\u4ed8\u304d": 97, "\u305f\u3081": 97, "\u8fd1\u4f3c": 97, "\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb": 97, "\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0": 97, "\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3": [97, 100], "\u30af\u30e9\u30b9": [97, 100], "\u529b\u307e\u304b\u305b": 97, "\u30a2\u30d7\u30ed\u30fc\u30c1": 97, "\u30a4\u30b8\u30f3\u30b0": [97, 98], "\u30de\u30c3\u30d4\u30f3\u30b0": 97, "\u3059\u3079\u3066": 97, "\u9069\u5207": 97, "\u30b3\u30b9\u30c8": 97, "\u4e0e\u3048\u308b": 97, "\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc": 97, "\u5b9f\u884c": 97, "\u914d\u8eca": 98, "\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0": 98, "\u30fb\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3": 98, "qp": 98, "\u5b9a\u5f0f": 98, "ibm": 98, "ilog": 98, "cplex": 98, "\u30bc\u30ed": 98, "cvar": 99, "\u5909\u5206": 99, "\u6539\u5584": 99, "\u30dd\u30fc\u30c8\u30d5\u30a9\u30ea\u30aa": 99, "\u6700\u5c0f": 99, "\u56fa\u6709": 99, "\u9802\u70b9": 100, "\u88ab\u8986": 100, "\u30ca\u30c3\u30d7\u30b5\u30c3\u30af": 100, "\u65b9\u6cd5": [100, 103], "\u30a6\u30a9\u30fc\u30e0": 101, "\u30b9\u30bf\u30fc\u30c8": 101, "\uff1aqubo": 101, "\u6a19\u6e96": 101, "cplexsolver": 102, "gurobisolver": 102, "/gurobipy": 102, "\u30c8\u30e9\u30f3\u30b9\u30ec\u30fc\u30bf\u30fc": 102, "\u30a4\u30f3\u30c7\u30a3\u30b1\u30fc\u30bf\u30fc": 102, "\u7d44\u5408": 103, "\u8a2d\u5b9a": 103, "\u4f7f\u3063": 103, "\u89e3\u91c8": 103, "\u30b5\u30d6\u30eb\u30fc\u30c1\u30f3": 103, "\u691c\u67fb": 103, "\u53b3\u5bc6": 103, "2\u3064": 103, "\u660e\u793a": 103, "\u624b\u52d5": 103, "\u306b\u5bfe\u3057": 103, "\u884c\u3046": 103, "\u4ed8\u9332": 103, "\u6b63\u3057": 103, "\u691c\u8a3c": 103, "\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb": 104}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"Qiskit Optimization API Reference": [[0, "qiskit-optimization-api-reference"]], "Qiskit optimization module (qiskit_optimization)": [[0, "qiskit-optimization-module-qiskit-optimization"]], "Submodules": [[0, "submodules"], [1, "submodules"]], "Optimization algorithms (qiskit_optimization.algorithms)": [[1, "optimization-algorithms-qiskit-optimization-algorithms"]], "Base classes for algorithms and results": [[1, "base-classes-for-algorithms-and-results"]], "Algorithms and results": [[1, "algorithms-and-results"]], "Quantum Random Access Optimization (qiskit_optimization.algorithms.qrao)": [[2, "quantum-random-access-optimization-qiskit-optimization-algorithms-qrao"]], "Quantum Random Access Encoding and Optimization": [[2, "quantum-random-access-encoding-and-optimization"]], "Rounding schemes": [[2, "rounding-schemes"]], "Optimization applications (qiskit_optimization.applications)": [[3, "optimization-applications-qiskit-optimization-applications"]], "Base classes for applications": [[3, "base-classes-for-applications"]], "Applications": [[3, "applications"]], "Optimization converters (qiskit_optimization.converters)": [[4, "optimization-converters-qiskit-optimization-converters"]], "Base class for converters": [[4, "base-class-for-converters"]], "Converters": [[4, "converters"]], "Optimization problems (qiskit_optimization.problems)": [[5, "optimization-problems-qiskit-optimization-problems"]], "Quadratic program": [[5, "quadratic-program"]], "Quadratic program translators (qiskit_optimization.translators)": [[6, "quadratic-program-translators-qiskit-optimization-translators"]], "Translators": [[6, "translators"]], "Qiskit Optimization \u306e\u8aac\u660e": [[7, "qiskit-optimization-explanations"]], "\u8aac\u660e": [[7, "explanations"]], "\u91cf\u5b50\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u6700\u9069\u5316 (QRAO) \u306e\u80cc\u666f\uff1a \u91cf\u5b50\u7de9\u548c\u3001\u91cf\u5b50\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u7b26\u53f7\u3001\u4e38\u3081\u30b9\u30ad\u30fc\u30e0": [[8, "background-on-quantum-random-access-optimization-quantum-relaxations-quantum-random-access-codes-rounding-schemes"]], "\u7de9\u548c\uff08\u30ea\u30e9\u30af\u30bc\u30fc\u30b7\u30e7\u30f3\uff09": [[8, "relaxations"]], "\u91cf\u5b50\u7de9\u548c": [[8, "quantum-relaxation"]], "\u7c21\u5358\u306a\u91cf\u5b50\u7de9\u548c": [[8, "a-simple-quantum-relaxation"]], "\u91cf\u5b50\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u30b3\u30fc\u30c9\uff08QRAC\uff09\u306b\u3088\u308b\u91cf\u5b50\u7de9\u548c": [[8, "quantum-relaxations-via-quantum-random-access-codes-qracs"]], "(1,1,1) , (2,1,p) , :math:`(3,1,p)\u300f \u306e\u91cf\u5b50\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u30b3\u30fc\u30c9": [[8, "p-and-3-1-p-quantum-random-access-codes"]], "\u7b26\u53f7\u5316\u3055\u308c\u305f\u30d3\u30c3\u30c8\u306e\u5fa9\u5143": [[8, "recovering-encoded-bits"]], "\u7b26\u53f7\u5316\u3055\u308c\u305f\u554f\u984c\u306e\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3": [[8, "encoded-problem-hamiltonians"]], "\u91cf\u5b50\u7de9\u548c\u306e\u4ea4\u63db": [[8, "commutation-of-quantum-relaxation"]], "\u91cf\u5b50\u4e38\u3081\u30b9\u30ad\u30fc\u30e0": [[8, "quantum-rounding-schemes"]], "\u534a\u6c7a\u5b9a\u8ad6\u7684\u4e38\u3081": [[8, "semi-deterministic-rounding"]], "\u30de\u30b8\u30c3\u30af\u72b6\u614b\u4e38\u3081": [[8, "magic-state-rounding"]], "\u53c2\u8003\u6587\u732e": [[8, "references"], [94, "\u53c2\u8003\u6587\u732e"], [95, "\u53c2\u8003\u6587\u732e"], [96, "\u53c2\u8003\u6587\u732e"], [98, "\u53c2\u8003\u6587\u732e"], [99, "\u53c2\u8003\u6587\u732e"], [101, "\u53c2\u8003\u6587\u732e"]], "\u306f\u3058\u3081\u306b": [[9, "getting-started"], [92, "\u306f\u3058\u3081\u306b"], [94, "\u306f\u3058\u3081\u306b"], [95, "\u306f\u3058\u3081\u306b"], [96, "\u306f\u3058\u3081\u306b"], [97, "\u306f\u3058\u3081\u306b"], [98, "\u306f\u3058\u3081\u306b"], [99, "\u306f\u3058\u3081\u306b"], [100, "\u306f\u3058\u3081\u306b"], [101, "\u306f\u3058\u3081\u306b"]], "\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb": [[9, "installation"]], "\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb": [[9, "optional-installs"]], "\u6e96\u5099\u306f\u3044\u3044\u3067\u3059\u304b\uff1f\u2026": [[9, "ready-to-get-going"]], "Qiskit Optimization \u306e\u6982\u8981": [[10, "qiskit-optimization-overview"]], "\u6982\u8981": [[10, "overview"], [11, "overview"], [12, "overview"]], "\u6b21\u306e\u30b9\u30c6\u30c3\u30d7": [[10, "next-steps"]], "Qiskit Optimization v0.5 \u79fb\u884c\u30ac\u30a4\u30c9": [[11, "qiskit-optimization-v0-5-migration-guide"]], "MinimumEigenOptimizer": [[11, "minimumeigenoptimizer"], [12, "minimumeigenoptimizer"], [32, "minimumeigenoptimizer"]], "NumPyMinimumEigensolver": [[11, "numpyminimumeigensolver"], [12, "numpyminimumeigensolver"]], "QAOA": [[11, "qaoa"], [12, "qaoa"], [101, "QAOA"]], "VQE (\u65e7) \u2192 SamplingVQE (\u65b0\u898f)": [[11, "vqe-former-samplingvqe-new"]], "WarmStartQAOAOptimizer": [[11, "warmstartqaoaoptimizer"], [12, "warmstartqaoaoptimizer"], [44, "warmstartqaoaoptimizer"]], "GroverOptimizer": [[11, "groveroptimizer"], [12, "groveroptimizer"], [27, "groveroptimizer"]], "Qiskit Optimization v0.6 \u79fb\u884c\u30ac\u30a4\u30c9": [[12, "qiskit-optimization-v0-6-migration-guide"]], "SamplingVQE": [[12, "samplingvqe"]], "Qiskit Optimization \u79fb\u884c\u30ac\u30a4\u30c9": [[13, "qiskit-optimization-migration-guide"]], "Release Notes": [[14, "release-notes"]], "QiskitOptimizationError": [[15, "qiskitoptimizationerror"]], "QuadraticProgram": [[16, "quadraticprogram"]], "ADMMOptimizationResult": [[17, "admmoptimizationresult"]], "ADMMOptimizer": [[18, "admmoptimizer"]], "ADMMParameters": [[19, "admmparameters"]], "ADMMState": [[20, "admmstate"]], "BaseAggregator": [[21, "baseaggregator"]], "CobylaOptimizer": [[22, "cobylaoptimizer"]], "CplexOptimizer": [[23, "cplexoptimizer"]], "GoemansWilliamsonOptimizationResult": [[24, "goemanswilliamsonoptimizationresult"]], "GoemansWilliamsonOptimizer": [[25, "goemanswilliamsonoptimizer"]], "GroverOptimizationResult": [[26, "groveroptimizationresult"]], "GurobiOptimizer": [[28, "gurobioptimizer"]], "IntermediateResult": [[29, "intermediateresult"]], "MeanAggregator": [[30, "meanaggregator"]], "MinimumEigenOptimizationResult": [[31, "minimumeigenoptimizationresult"]], "MultiStartOptimizer": [[33, "multistartoptimizer"]], "OptimizationAlgorithm": [[34, "optimizationalgorithm"]], "OptimizationResult": [[35, "optimizationresult"]], "OptimizationResultStatus": [[36, "optimizationresultstatus"]], "RecursiveMinimumEigenOptimizationResult": [[37, "recursiveminimumeigenoptimizationresult"]], "RecursiveMinimumEigenOptimizer": [[38, "recursiveminimumeigenoptimizer"], [94, "RecursiveMinimumEigenOptimizer"]], "ScipyMilpOptimizer": [[39, "scipymilpoptimizer"]], "SlsqpOptimizationResult": [[40, "slsqpoptimizationresult"]], "SlsqpOptimizer": [[41, "slsqpoptimizer"]], "SolutionSample": [[42, "solutionsample"]], "WarmStartQAOAFactory": [[43, "warmstartqaoafactory"]], "EncodingCommutationVerifier": [[45, "encodingcommutationverifier"]], "MagicRounding": [[46, "magicrounding"]], "QuantumRandomAccessEncoding": [[47, "quantumrandomaccessencoding"]], "QuantumRandomAccessOptimizationResult": [[48, "quantumrandomaccessoptimizationresult"]], "QuantumRandomAccessOptimizer": [[49, "quantumrandomaccessoptimizer"]], "RoundingContext": [[50, "roundingcontext"]], "RoundingResult": [[51, "roundingresult"]], "RoundingScheme": [[52, "roundingscheme"]], "SemideterministicRounding": [[53, "semideterministicrounding"]], "BinPacking": [[54, "binpacking"]], "Clique": [[55, "clique"]], "ExactCover": [[56, "exactcover"]], "GraphOptimizationApplication": [[57, "graphoptimizationapplication"]], "GraphPartition": [[58, "graphpartition"]], "Knapsack": [[59, "knapsack"]], "Maxcut": [[60, "maxcut"]], "NumberPartition": [[61, "numberpartition"]], "OptimizationApplication": [[62, "optimizationapplication"]], "SKModel": [[63, "skmodel"]], "SetPacking": [[64, "setpacking"]], "StableSet": [[65, "stableset"]], "Tsp": [[66, "tsp"]], "VehicleRouting": [[67, "vehiclerouting"]], "VertexCover": [[68, "vertexcover"]], "InequalityToEquality": [[69, "inequalitytoequality"], [93, "InequalityToEquality"]], "IntegerToBinary": [[70, "integertobinary"], [93, "IntegerToBinary"]], "LinearEqualityToPenalty": [[71, "linearequalitytopenalty"], [93, "LinearEqualityToPenalty"]], "LinearInequalityToPenalty": [[72, "linearinequalitytopenalty"]], "MaximizeToMinimize": [[73, "maximizetominimize"]], "MinimizeToMaximize": [[74, "minimizetomaximize"]], "QuadraticProgramConverter": [[75, "quadraticprogramconverter"]], "QuadraticProgramToQubo": [[76, "quadraticprogramtoqubo"]], "INFINITY": [[77, "infinity"]], "Constraint": [[78, "constraint"]], "LinearConstraint": [[79, "linearconstraint"]], "LinearExpression": [[80, "linearexpression"]], "QuadraticConstraint": [[81, "quadraticconstraint"]], "QuadraticExpression": [[82, "quadraticexpression"]], "QuadraticObjective": [[83, "quadraticobjective"]], "QuadraticProgramElement": [[84, "quadraticprogramelement"]], "Variable": [[85, "variable"]], "from_docplex_mp": [[86, "from-docplex-mp"]], "from_gurobipy": [[87, "from-gurobipy"]], "from_ising": [[88, "from-ising"]], "to_docplex_mp": [[89, "to-docplex-mp"]], "to_gurobipy": [[90, "to-gurobipy"]], "to_ising": [[91, "to-ising"]], "\u4e8c\u6b21\u8a08\u753b\u6cd5": [[92, "\u4e8c\u6b21\u8a08\u753b\u6cd5"]], "LP\u30d5\u30a1\u30a4\u30eb\u304b\u3089 QuadraticProgram \u3092\u30ed\u30fc\u30c9\u3059\u308b": [[92, "LP\u30d5\u30a1\u30a4\u30eb\u304b\u3089-QuadraticProgram-\u3092\u30ed\u30fc\u30c9\u3059\u308b"]], "docplex \u30e2\u30c7\u30eb\u304b\u3089 QuadraticProgram \u3092\u30ed\u30fc\u30c9\u3059\u308b": [[92, "docplex-\u30e2\u30c7\u30eb\u304b\u3089-QuadraticProgram-\u3092\u30ed\u30fc\u30c9\u3059\u308b"]], "QuadraticProgram \u306e\u76f4\u63a5\u7684\u306a\u69cb\u7bc9": [[92, "QuadraticProgram-\u306e\u76f4\u63a5\u7684\u306a\u69cb\u7bc9"]], "\u7dda\u5f62\u304a\u3088\u3073\u4e8c\u6b21\u5236\u7d04\u306e\u8ffd\u52a0/\u524a\u9664": [[92, "\u7dda\u5f62\u304a\u3088\u3073\u4e8c\u6b21\u5236\u7d04\u306e\u8ffd\u52a0/\u524a\u9664"]], "\u5909\u6570\u3092\u7f6e\u304d\u63db\u3048\u307e\u3059": [[92, "\u5909\u6570\u3092\u7f6e\u304d\u63db\u3048\u307e\u3059"]], "\u4e8c\u6b21\u8a08\u753b\u6cd5\u306e\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc": [[93, "\u4e8c\u6b21\u8a08\u753b\u6cd5\u306e\u30b3\u30f3\u30d0\u30fc\u30bf\u30fc"]], "\u6700\u5c0f\u56fa\u6709\u5024\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc (Minimum Eigen Optimizer)": [[94, "\u6700\u5c0f\u56fa\u6709\u5024\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc-(Minimum-Eigen-Optimizer)"]], "QUBO\u3092SparsePauliOp\u306b\u5909\u63db\u3059\u308b": [[94, "QUBO\u3092SparsePauliOp\u306b\u5909\u63db\u3059\u308b"]], "MinimumEigenOptimizer \u3067 QUBO \u3092\u89e3\u304f": [[94, "MinimumEigenOptimizer-\u3067-QUBO-\u3092\u89e3\u304f"]], "\u30b5\u30f3\u30d7\u30eb\u306e\u5206\u6790": [[94, "\u30b5\u30f3\u30d7\u30eb\u306e\u5206\u6790"]], "\u30b0\u30ed\u30fc\u30d0\u30fc\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc": [[95, "\u30b0\u30ed\u30fc\u30d0\u30fc\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc"]], "\u30b0\u30ed\u30fc\u30d0\u30fc\u9069\u5fdc\u63a2\u7d22": [[95, "\u30b0\u30ed\u30fc\u30d0\u30fc\u9069\u5fdc\u63a2\u7d22"]], "GroverOptimizer\u3092\u4f7f\u7528\u3057\u3066QUBO\u554f\u984c\u306e\u6700\u5c0f\u5024\u3092\u898b\u3064\u3051\u308b": [[95, "GroverOptimizer\u3092\u4f7f\u7528\u3057\u3066QUBO\u554f\u984c\u306e\u6700\u5c0f\u5024\u3092\u898b\u3064\u3051\u308b"]], "GroverOptimizer\u304c\u6b63\u3057\u3044\u5024\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u306e\u78ba\u8a8d": [[95, "GroverOptimizer\u304c\u6b63\u3057\u3044\u5024\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u306e\u78ba\u8a8d"]], "ADMM \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc": [[96, "ADMM-\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc"]], "\u521d\u671f\u5316": [[96, "\u521d\u671f\u5316"], [98, "\u521d\u671f\u5316"]], "\u4f8b": [[96, "\u4f8b"]], "\u53e4\u5178\u7684\u89e3\u6cd5": [[96, "\u53e4\u5178\u7684\u89e3\u6cd5"]], "\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc": [[96, "\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc"]], "3-ADMM-H\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u547c\u3073\u51fa\u3059": [[96, "3-ADMM-H\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u547c\u3073\u51fa\u3059"]], "\u53e4\u5178\u30bd\u30eb\u30d0\u30fc\u306e\u7d50\u679c": [[96, "\u53e4\u5178\u30bd\u30eb\u30d0\u30fc\u306e\u7d50\u679c"]], "\u91cf\u5b50\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3": [[96, "\u91cf\u5b50\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3"], [98, "\u91cf\u5b50\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3"]], "\u91cf\u5b50\u30bd\u30eb\u30d0\u30fc\u306e\u7d50\u679c": [[96, "\u91cf\u5b50\u30bd\u30eb\u30d0\u30fc\u306e\u7d50\u679c"]], "\u6700\u5927\u30ab\u30c3\u30c8\u554f\u984c\u3068\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u5de1\u56de\u554f\u984c": [[97, "\u6700\u5927\u30ab\u30c3\u30c8\u554f\u984c\u3068\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u5de1\u56de\u554f\u984c"]], "\u91cd\u307f\u4ed8\u304d\u6700\u5927\u30ab\u30c3\u30c8": [[97, "\u91cd\u307f\u4ed8\u304d\u6700\u5927\u30ab\u30c3\u30c8"]], "\u6700\u9069\u5316\u554f\u984c\u306e\u305f\u3081\u306e\u8fd1\u4f3c\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u91cf\u5b50\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0": [[97, "\u6700\u9069\u5316\u554f\u984c\u306e\u305f\u3081\u306e\u8fd1\u4f3c\u30e6\u30cb\u30d0\u30fc\u30b5\u30eb\u91cf\u5b50\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0"]], "\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30af\u30e9\u30b9": [[97, "\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30af\u30e9\u30b9"]], "\u6700\u5927\u30ab\u30c3\u30c8\u554f\u984c": [[97, "\u6700\u5927\u30ab\u30c3\u30c8\u554f\u984c"]], "\u529b\u307e\u304b\u305b\u306e\u30a2\u30d7\u30ed\u30fc\u30c1": [[97, "\u529b\u307e\u304b\u305b\u306e\u30a2\u30d7\u30ed\u30fc\u30c1"], [97, "id2"]], "\u30a4\u30b8\u30f3\u30b0\u554f\u984c\u3078\u306e\u30de\u30c3\u30d4\u30f3\u30b0": [[97, "\u30a4\u30b8\u30f3\u30b0\u554f\u984c\u3078\u306e\u30de\u30c3\u30d4\u30f3\u30b0"], [97, "id3"]], "\u3059\u3079\u3066\u306e\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u304c\u9069\u5207\u306a\u30b3\u30b9\u30c8\u3092\u4e0e\u3048\u308b\u3053\u3068\u306e\u78ba\u8a8d": [[97, "\u3059\u3079\u3066\u306e\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u304c\u9069\u5207\u306a\u30b3\u30b9\u30c8\u3092\u4e0e\u3048\u308b\u3053\u3068\u306e\u78ba\u8a8d"], [97, "id4"]], "\u91cf\u5b50\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u3067\u306e\u5b9f\u884c": [[97, "\u91cf\u5b50\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u3067\u306e\u5b9f\u884c"], [97, "id5"]], "\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c": [[97, "\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c"]], "\u914d\u8eca\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0": [[98, "\u914d\u8eca\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0"]], "\u30e2\u30c7\u30eb": [[98, "\u30e2\u30c7\u30eb"]], "\u53e4\u5178\u7684\u306a\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3": [[98, "\u53e4\u5178\u7684\u306a\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3"]], "\u30a4\u30b8\u30f3\u30b0\u30fb\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u306e\u69cb\u7bc9": [[98, "\u30a4\u30b8\u30f3\u30b0\u30fb\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u306e\u69cb\u7bc9"]], "\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u304b\u3089QP\u5b9a\u5f0f\u5316\u3078": [[98, "\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u304b\u3089QP\u5b9a\u5f0f\u5316\u3078"]], "IBM ILOG CPLEX\u3092\u4f7f\u7528\u3057\u305f\u53e4\u5178\u7684\u306a\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3": [[98, "IBM-ILOG-CPLEX\u3092\u4f7f\u7528\u3057\u305f\u53e4\u5178\u7684\u306a\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3"]], "\u30bc\u30ed\u304b\u3089\u306e\u91cf\u5b50\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3": [[98, "\u30bc\u30ed\u304b\u3089\u306e\u91cf\u5b50\u30bd\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3"]], "\u30b9\u30c6\u30c3\u30d7 1": [[98, "\u30b9\u30c6\u30c3\u30d7-1"]], "\u30b9\u30c6\u30c3\u30d7\uff12": [[98, "\u30b9\u30c6\u30c3\u30d7\uff12"]], "\u30b9\u30c6\u30c3\u30d7\uff13": [[98, "\u30b9\u30c6\u30c3\u30d7\uff13"]], "\u30b9\u30c6\u30c3\u30d7 4": [[98, "\u30b9\u30c6\u30c3\u30d7-4"]], "\u30b9\u30c6\u30c3\u30d75": [[98, "\u30b9\u30c6\u30c3\u30d75"]], "CVaR\u3092\u4f7f\u7528\u3057\u305f\u5909\u5206\u91cf\u5b50\u6700\u9069\u5316\u306e\u6539\u5584": [[99, "CVaR\u3092\u4f7f\u7528\u3057\u305f\u5909\u5206\u91cf\u5b50\u6700\u9069\u5316\u306e\u6539\u5584"]], "\u30dd\u30fc\u30c8\u30d5\u30a9\u30ea\u30aa\u306e\u6700\u9069\u5316": [[99, "\u30dd\u30fc\u30c8\u30d5\u30a9\u30ea\u30aa\u306e\u6700\u9069\u5316"]], "SamplingVQE\u3092\u4f7f\u7528\u3057\u305f\u6700\u5c0f\u56fa\u6709\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\uff08Minimum Eigen Optimizer\uff09": [[99, "SamplingVQE\u3092\u4f7f\u7528\u3057\u305f\u6700\u5c0f\u56fa\u6709\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\uff08Minimum-Eigen-Optimizer\uff09"]], "\u6700\u9069\u5316\u554f\u984c\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30af\u30e9\u30b9": [[100, "\u6700\u9069\u5316\u554f\u984c\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30af\u30e9\u30b9"]], "\u9802\u70b9\u88ab\u8986\u554f\u984c": [[100, "\u9802\u70b9\u88ab\u8986\u554f\u984c"]], "\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c": [[100, "\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c"]], "\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u306e\u78ba\u8a8d\u65b9\u6cd5": [[100, "\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u306e\u78ba\u8a8d\u65b9\u6cd5"]], "\u30a6\u30a9\u30fc\u30e0\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u91cf\u5b50\u6700\u9069\u5316": [[101, "\u30a6\u30a9\u30fc\u30e0\u30fb\u30b9\u30bf\u30fc\u30c8\u30fb\u91cf\u5b50\u6700\u9069\u5316"]], "\u6e96\u5099\uff1aQUBO \u306e\u7de9\u548c": [[101, "\u6e96\u5099\uff1aQUBO-\u306e\u7de9\u548c"]], "\u6a19\u6e96\u7684\u306a QAOA": [[101, "\u6a19\u6e96\u7684\u306a-QAOA"]], "\u30a6\u30a9\u30fc\u30e0\u30fb\u30b9\u30bf\u30fc\u30c8 QAOA": [[101, "\u30a6\u30a9\u30fc\u30e0\u30fb\u30b9\u30bf\u30fc\u30c8-QAOA"], [101, "id2"]], "\u5206\u6790": [[101, "\u5206\u6790"]], "Qiskit Optimization \u3067\u306e\u53e4\u5178\u7684\u6700\u9069\u5316\u30bd\u30eb\u30d0\u30fc\u3068\u30e2\u30c7\u30eb\u306e\u4f7f\u7528": [[102, "Qiskit-Optimization-\u3067\u306e\u53e4\u5178\u7684\u6700\u9069\u5316\u30bd\u30eb\u30d0\u30fc\u3068\u30e2\u30c7\u30eb\u306e\u4f7f\u7528"]], "CplexSolver \u3068 GurobiSolver": [[102, "CplexSolver-\u3068-GurobiSolver"]], "QuadraticProgram \u3068 Docplex/Gurobipy \u306e\u30c8\u30e9\u30f3\u30b9\u30ec\u30fc\u30bf\u30fc": [[102, "QuadraticProgram-\u3068-Docplex/Gurobipy-\u306e\u30c8\u30e9\u30f3\u30b9\u30ec\u30fc\u30bf\u30fc"]], "Docplex \u306e\u30a4\u30f3\u30c7\u30a3\u30b1\u30fc\u30bf\u30fc\u5236\u7d04": [[102, "Docplex-\u306e\u30a4\u30f3\u30c7\u30a3\u30b1\u30fc\u30bf\u30fc\u5236\u7d04"]], "\u91cf\u5b50\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u6700\u9069\u5316 (Quantum Random Access Optimization)": [[103, "\u91cf\u5b50\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u6700\u9069\u5316-(Quantum-Random-Access-Optimization)"]], "\u7d44\u5408\u305b\u6700\u9069\u5316\u554f\u984c\u3092\u8a2d\u5b9a\u3059\u308b": [[103, "\u7d44\u5408\u305b\u6700\u9069\u5316\u554f\u984c\u3092\u8a2d\u5b9a\u3059\u308b"]], "\u91cf\u5b50\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u306b\u554f\u984c\u3092\u7b26\u53f7\u5316\u3059\u308b": [[103, "\u91cf\u5b50\u30cf\u30df\u30eb\u30c8\u30cb\u30a2\u30f3\u306b\u554f\u984c\u3092\u7b26\u53f7\u5316\u3059\u308b"]], "QuantumRandomAccessOptimizer \u3092\u4f7f\u3063\u3066\u554f\u984c\u3092\u89e3\u304f": [[103, "QuantumRandomAccessOptimizer-\u3092\u4f7f\u3063\u3066\u554f\u984c\u3092\u89e3\u304f"]], "\u89e3\u306e\u89e3\u91c8": [[103, "\u89e3\u306e\u89e3\u91c8"]], "\u30b5\u30d6\u30eb\u30fc\u30c1\u30f3\u306e\u7d50\u679c\u306e\u691c\u67fb": [[103, "\u30b5\u30d6\u30eb\u30fc\u30c1\u30f3\u306e\u7d50\u679c\u306e\u691c\u67fb"]], "NumpyMinimumEigensolver \u306b\u3088\u308b\u554f\u984c\u306e\u53b3\u5bc6\u89e3": [[103, "NumpyMinimumEigensolver-\u306b\u3088\u308b\u554f\u984c\u306e\u53b3\u5bc6\u89e3"]], "QuantumRandomAccessOptimizer \u3068 MagicRounding \u3092\u4f7f\u3063\u3066\u554f\u984c\u3092\u89e3\u304f": [[103, "QuantumRandomAccessOptimizer-\u3068-MagicRounding-\u3092\u4f7f\u3063\u3066\u554f\u984c\u3092\u89e3\u304f"]], "\u5225\u306e\u65b9\u6cd5\uff1a2\u3064\u306e\u660e\u793a\u7684\u306a\u30b9\u30c6\u30c3\u30d7\u3067\u554f\u984c\u3092\u89e3\u304f": [[103, "\u5225\u306e\u65b9\u6cd5\uff1a2\u3064\u306e\u660e\u793a\u7684\u306a\u30b9\u30c6\u30c3\u30d7\u3067\u554f\u984c\u3092\u89e3\u304f"]], "\u624b\u52d5\u3067\u7de9\u548c\u554f\u984c\u3092\u89e3\u304f": [[103, "\u624b\u52d5\u3067\u7de9\u548c\u554f\u984c\u3092\u89e3\u304f"]], "\u7de9\u548c\u554f\u984c\u306e\u7d50\u679c\u306b\u5bfe\u3057\u3066\u624b\u52d5\u3067\u4e38\u3081\u3092\u884c\u3046": [[103, "\u7de9\u548c\u554f\u984c\u306e\u7d50\u679c\u306b\u5bfe\u3057\u3066\u624b\u52d5\u3067\u4e38\u3081\u3092\u884c\u3046"]], "\u4ed8\u9332": [[103, "\u4ed8\u9332"]], "\u7b26\u53f7\u5316\u306e\u6b63\u3057\u3055\u3092\u691c\u8a3c\u3059\u308b\u65b9\u6cd5": [[103, "\u7b26\u53f7\u5316\u306e\u6b63\u3057\u3055\u3092\u691c\u8a3c\u3059\u308b\u65b9\u6cd5"]], "Optimization\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb": [[104, "optimization-tutorials"]]}, "indexentries": {"module": [[0, "module-qiskit_optimization"], [1, "module-qiskit_optimization.algorithms"], [2, "module-qiskit_optimization.algorithms.qrao"], [3, "module-qiskit_optimization.applications"], [4, "module-qiskit_optimization.converters"], [5, "module-qiskit_optimization.problems"], [6, "module-qiskit_optimization.translators"]], "qiskit_optimization": [[0, "module-qiskit_optimization"]], "qiskit_optimization.algorithms": [[1, "module-qiskit_optimization.algorithms"]], "qiskit_optimization.algorithms.qrao": [[2, "module-qiskit_optimization.algorithms.qrao"]], "qiskit_optimization.applications": [[3, "module-qiskit_optimization.applications"]], "qiskit_optimization.converters": [[4, "module-qiskit_optimization.converters"]], "qiskit_optimization.problems": [[5, "module-qiskit_optimization.problems"]], "qiskit_optimization.translators": [[6, "module-qiskit_optimization.translators"]], "qiskitoptimizationerror": [[15, "qiskit_optimization.QiskitOptimizationError"]], "add_note() (qiskitoptimizationerror \u306e\u30e1\u30bd\u30c3\u30c9)": [[15, "qiskit_optimization.QiskitOptimizationError.add_note"]], "with_traceback() (qiskitoptimizationerror \u306e\u30e1\u30bd\u30c3\u30c9)": [[15, "qiskit_optimization.QiskitOptimizationError.with_traceback"]], "quadraticprogram (qiskit_optimization \u306e\u30af\u30e9\u30b9)": [[16, "qiskit_optimization.QuadraticProgram"]], "binary_var() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.binary_var"]], "binary_var_dict() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.binary_var_dict"]], "binary_var_list() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.binary_var_list"]], "clear() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.clear"]], "continuous_var() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.continuous_var"]], "continuous_var_dict() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.continuous_var_dict"]], "continuous_var_list() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.continuous_var_list"]], "export_as_lp_string() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.export_as_lp_string"]], "from_ising() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.from_ising"]], "get_feasibility_info() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.get_feasibility_info"]], "get_linear_constraint() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.get_linear_constraint"]], "get_num_binary_vars() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.get_num_binary_vars"]], "get_num_continuous_vars() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.get_num_continuous_vars"]], "get_num_integer_vars() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.get_num_integer_vars"]], "get_num_linear_constraints() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.get_num_linear_constraints"]], "get_num_quadratic_constraints() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.get_num_quadratic_constraints"]], "get_num_vars() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.get_num_vars"]], "get_quadratic_constraint() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.get_quadratic_constraint"]], "get_variable() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.get_variable"]], "integer_var() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.integer_var"]], "integer_var_dict() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.integer_var_dict"]], "integer_var_list() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.integer_var_list"]], "is_feasible() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.is_feasible"]], "linear_constraint() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.linear_constraint"]], "linear_constraints (quadraticprogram \u306e\u5c5e\u6027)": [[16, "qiskit_optimization.QuadraticProgram.linear_constraints"]], "linear_constraints_index (quadraticprogram \u306e\u5c5e\u6027)": [[16, "qiskit_optimization.QuadraticProgram.linear_constraints_index"]], "maximize() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.maximize"]], "minimize() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.minimize"]], "name (quadraticprogram \u306e\u5c5e\u6027)": [[16, "qiskit_optimization.QuadraticProgram.name"]], "objective (quadraticprogram \u306e\u5c5e\u6027)": [[16, "qiskit_optimization.QuadraticProgram.objective"]], "prettyprint() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.prettyprint"]], "quadratic_constraint() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.quadratic_constraint"]], "quadratic_constraints (quadraticprogram \u306e\u5c5e\u6027)": [[16, "qiskit_optimization.QuadraticProgram.quadratic_constraints"]], "quadratic_constraints_index (quadraticprogram \u306e\u5c5e\u6027)": [[16, "qiskit_optimization.QuadraticProgram.quadratic_constraints_index"]], "read_from_lp_file() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.read_from_lp_file"]], "remove_linear_constraint() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.remove_linear_constraint"]], "remove_quadratic_constraint() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.remove_quadratic_constraint"]], "status (quadraticprogram \u306e\u5c5e\u6027)": [[16, "qiskit_optimization.QuadraticProgram.status"]], "substitute_variables() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.substitute_variables"]], "to_ising() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.to_ising"]], "variables (quadraticprogram \u306e\u5c5e\u6027)": [[16, "qiskit_optimization.QuadraticProgram.variables"]], "variables_index (quadraticprogram \u306e\u5c5e\u6027)": [[16, "qiskit_optimization.QuadraticProgram.variables_index"]], "write_to_lp_file() (quadraticprogram \u306e\u30e1\u30bd\u30c3\u30c9)": [[16, "qiskit_optimization.QuadraticProgram.write_to_lp_file"]], "admmoptimizationresult (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult"]], "fval (admmoptimizationresult \u306e\u5c5e\u6027)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.fval"]], "get_correlations() (admmoptimizationresult \u306e\u30e1\u30bd\u30c3\u30c9)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.get_correlations"]], "prettyprint() (admmoptimizationresult \u306e\u30e1\u30bd\u30c3\u30c9)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.prettyprint"]], "raw_results (admmoptimizationresult \u306e\u5c5e\u6027)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.raw_results"]], "samples (admmoptimizationresult \u306e\u5c5e\u6027)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.samples"]], "state (admmoptimizationresult \u306e\u5c5e\u6027)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.state"]], "status (admmoptimizationresult \u306e\u5c5e\u6027)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.status"]], "variable_names (admmoptimizationresult \u306e\u5c5e\u6027)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.variable_names"]], "variables (admmoptimizationresult \u306e\u5c5e\u6027)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.variables"]], "variables_dict (admmoptimizationresult \u306e\u5c5e\u6027)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.variables_dict"]], "x (admmoptimizationresult \u306e\u5c5e\u6027)": [[17, "qiskit_optimization.algorithms.ADMMOptimizationResult.x"]], "admmoptimizer (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[18, "qiskit_optimization.algorithms.ADMMOptimizer"]], "get_compatibility_msg() (admmoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[18, "qiskit_optimization.algorithms.ADMMOptimizer.get_compatibility_msg"]], "is_compatible() (admmoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[18, "qiskit_optimization.algorithms.ADMMOptimizer.is_compatible"]], "parameters (admmoptimizer \u306e\u5c5e\u6027)": [[18, "qiskit_optimization.algorithms.ADMMOptimizer.parameters"]], "solve() (admmoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[18, "qiskit_optimization.algorithms.ADMMOptimizer.solve"]], "admmparameters (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[19, "qiskit_optimization.algorithms.ADMMParameters"]], "admmstate (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[20, "qiskit_optimization.algorithms.ADMMState"]], "baseaggregator (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[21, "qiskit_optimization.algorithms.BaseAggregator"]], "aggregate() (baseaggregator \u306e\u30e1\u30bd\u30c3\u30c9)": [[21, "qiskit_optimization.algorithms.BaseAggregator.aggregate"]], "cobylaoptimizer (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[22, "qiskit_optimization.algorithms.CobylaOptimizer"]], "clip (cobylaoptimizer \u306e\u5c5e\u6027)": [[22, "qiskit_optimization.algorithms.CobylaOptimizer.clip"]], "get_compatibility_msg() (cobylaoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[22, "qiskit_optimization.algorithms.CobylaOptimizer.get_compatibility_msg"]], "is_compatible() (cobylaoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[22, "qiskit_optimization.algorithms.CobylaOptimizer.is_compatible"]], "multi_start_solve() (cobylaoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[22, "qiskit_optimization.algorithms.CobylaOptimizer.multi_start_solve"]], "solve() (cobylaoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[22, "qiskit_optimization.algorithms.CobylaOptimizer.solve"]], "trials (cobylaoptimizer \u306e\u5c5e\u6027)": [[22, "qiskit_optimization.algorithms.CobylaOptimizer.trials"]], "cplexoptimizer (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[23, "qiskit_optimization.algorithms.CplexOptimizer"]], "cplex_parameters (cplexoptimizer \u306e\u5c5e\u6027)": [[23, "qiskit_optimization.algorithms.CplexOptimizer.cplex_parameters"]], "disp (cplexoptimizer \u306e\u5c5e\u6027)": [[23, "qiskit_optimization.algorithms.CplexOptimizer.disp"]], "get_compatibility_msg() (cplexoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[23, "qiskit_optimization.algorithms.CplexOptimizer.get_compatibility_msg"]], "is_compatible() (cplexoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[23, "qiskit_optimization.algorithms.CplexOptimizer.is_compatible"]], "is_cplex_installed() (cplexoptimizer \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[23, "qiskit_optimization.algorithms.CplexOptimizer.is_cplex_installed"]], "solve() (cplexoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[23, "qiskit_optimization.algorithms.CplexOptimizer.solve"]], "goemanswilliamsonoptimizationresult (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult"]], "fval (goemanswilliamsonoptimizationresult \u306e\u5c5e\u6027)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.fval"]], "get_correlations() (goemanswilliamsonoptimizationresult \u306e\u30e1\u30bd\u30c3\u30c9)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.get_correlations"]], "prettyprint() (goemanswilliamsonoptimizationresult \u306e\u30e1\u30bd\u30c3\u30c9)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.prettyprint"]], "raw_results (goemanswilliamsonoptimizationresult \u306e\u5c5e\u6027)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.raw_results"]], "samples (goemanswilliamsonoptimizationresult \u306e\u5c5e\u6027)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.samples"]], "sdp_solution (goemanswilliamsonoptimizationresult \u306e\u5c5e\u6027)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.sdp_solution"]], "status (goemanswilliamsonoptimizationresult \u306e\u5c5e\u6027)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.status"]], "variable_names (goemanswilliamsonoptimizationresult \u306e\u5c5e\u6027)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.variable_names"]], "variables (goemanswilliamsonoptimizationresult \u306e\u5c5e\u6027)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.variables"]], "variables_dict (goemanswilliamsonoptimizationresult \u306e\u5c5e\u6027)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.variables_dict"]], "x (goemanswilliamsonoptimizationresult \u306e\u5c5e\u6027)": [[24, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizationResult.x"]], "goemanswilliamsonoptimizer (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[25, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizer"]], "get_compatibility_msg() (goemanswilliamsonoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[25, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.get_compatibility_msg"]], "is_compatible() (goemanswilliamsonoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[25, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.is_compatible"]], "max_cut_value() (goemanswilliamsonoptimizer \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[25, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.max_cut_value"]], "solve() (goemanswilliamsonoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[25, "qiskit_optimization.algorithms.GoemansWilliamsonOptimizer.solve"]], "groveroptimizationresult (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult"]], "fval (groveroptimizationresult \u306e\u5c5e\u6027)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.fval"]], "get_correlations() (groveroptimizationresult \u306e\u30e1\u30bd\u30c3\u30c9)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.get_correlations"]], "intermediate_fval (groveroptimizationresult \u306e\u5c5e\u6027)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.intermediate_fval"]], "n_input_qubits (groveroptimizationresult \u306e\u5c5e\u6027)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.n_input_qubits"]], "n_output_qubits (groveroptimizationresult \u306e\u5c5e\u6027)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.n_output_qubits"]], "operation_counts (groveroptimizationresult \u306e\u5c5e\u6027)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.operation_counts"]], "prettyprint() (groveroptimizationresult \u306e\u30e1\u30bd\u30c3\u30c9)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.prettyprint"]], "raw_results (groveroptimizationresult \u306e\u5c5e\u6027)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.raw_results"]], "raw_samples (groveroptimizationresult \u306e\u5c5e\u6027)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.raw_samples"]], "samples (groveroptimizationresult \u306e\u5c5e\u6027)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.samples"]], "status (groveroptimizationresult \u306e\u5c5e\u6027)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.status"]], "threshold (groveroptimizationresult \u306e\u5c5e\u6027)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.threshold"]], "variable_names (groveroptimizationresult \u306e\u5c5e\u6027)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.variable_names"]], "variables (groveroptimizationresult \u306e\u5c5e\u6027)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.variables"]], "variables_dict (groveroptimizationresult \u306e\u5c5e\u6027)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.variables_dict"]], "x (groveroptimizationresult \u306e\u5c5e\u6027)": [[26, "qiskit_optimization.algorithms.GroverOptimizationResult.x"]], "groveroptimizer (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[27, "qiskit_optimization.algorithms.GroverOptimizer"]], "get_compatibility_msg() (groveroptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[27, "qiskit_optimization.algorithms.GroverOptimizer.get_compatibility_msg"]], "is_compatible() (groveroptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[27, "qiskit_optimization.algorithms.GroverOptimizer.is_compatible"]], "solve() (groveroptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[27, "qiskit_optimization.algorithms.GroverOptimizer.solve"]], "gurobioptimizer (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[28, "qiskit_optimization.algorithms.GurobiOptimizer"]], "disp (gurobioptimizer \u306e\u5c5e\u6027)": [[28, "qiskit_optimization.algorithms.GurobiOptimizer.disp"]], "get_compatibility_msg() (gurobioptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[28, "qiskit_optimization.algorithms.GurobiOptimizer.get_compatibility_msg"]], "is_compatible() (gurobioptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[28, "qiskit_optimization.algorithms.GurobiOptimizer.is_compatible"]], "is_gurobi_installed() (gurobioptimizer \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[28, "qiskit_optimization.algorithms.GurobiOptimizer.is_gurobi_installed"]], "solve() (gurobioptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[28, "qiskit_optimization.algorithms.GurobiOptimizer.solve"]], "all_iterations (intermediateresult \u306e\u5c5e\u6027)": [[29, "qiskit_optimization.algorithms.IntermediateResult.ALL_ITERATIONS"]], "intermediateresult (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[29, "qiskit_optimization.algorithms.IntermediateResult"]], "last_iteration (intermediateresult \u306e\u5c5e\u6027)": [[29, "qiskit_optimization.algorithms.IntermediateResult.LAST_ITERATION"]], "no_iterations (intermediateresult \u306e\u5c5e\u6027)": [[29, "qiskit_optimization.algorithms.IntermediateResult.NO_ITERATIONS"]], "meanaggregator (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[30, "qiskit_optimization.algorithms.MeanAggregator"]], "aggregate() (meanaggregator \u306e\u30e1\u30bd\u30c3\u30c9)": [[30, "qiskit_optimization.algorithms.MeanAggregator.aggregate"]], "minimumeigenoptimizationresult (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult"]], "fval (minimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.fval"]], "get_correlations() (minimumeigenoptimizationresult \u306e\u30e1\u30bd\u30c3\u30c9)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.get_correlations"]], "min_eigen_solver_result (minimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.min_eigen_solver_result"]], "prettyprint() (minimumeigenoptimizationresult \u306e\u30e1\u30bd\u30c3\u30c9)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.prettyprint"]], "raw_results (minimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.raw_results"]], "raw_samples (minimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.raw_samples"]], "samples (minimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.samples"]], "status (minimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.status"]], "variable_names (minimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.variable_names"]], "variables (minimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.variables"]], "variables_dict (minimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.variables_dict"]], "x (minimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[31, "qiskit_optimization.algorithms.MinimumEigenOptimizationResult.x"]], "minimumeigenoptimizer (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[32, "qiskit_optimization.algorithms.MinimumEigenOptimizer"]], "get_compatibility_msg() (minimumeigenoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[32, "qiskit_optimization.algorithms.MinimumEigenOptimizer.get_compatibility_msg"]], "is_compatible() (minimumeigenoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[32, "qiskit_optimization.algorithms.MinimumEigenOptimizer.is_compatible"]], "min_eigen_solver (minimumeigenoptimizer \u306e\u5c5e\u6027)": [[32, "qiskit_optimization.algorithms.MinimumEigenOptimizer.min_eigen_solver"]], "solve() (minimumeigenoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[32, "qiskit_optimization.algorithms.MinimumEigenOptimizer.solve"]], "multistartoptimizer (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[33, "qiskit_optimization.algorithms.MultiStartOptimizer"]], "clip (multistartoptimizer \u306e\u5c5e\u6027)": [[33, "qiskit_optimization.algorithms.MultiStartOptimizer.clip"]], "get_compatibility_msg() (multistartoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[33, "qiskit_optimization.algorithms.MultiStartOptimizer.get_compatibility_msg"]], "is_compatible() (multistartoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[33, "qiskit_optimization.algorithms.MultiStartOptimizer.is_compatible"]], "multi_start_solve() (multistartoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[33, "qiskit_optimization.algorithms.MultiStartOptimizer.multi_start_solve"]], "solve() (multistartoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[33, "qiskit_optimization.algorithms.MultiStartOptimizer.solve"]], "trials (multistartoptimizer \u306e\u5c5e\u6027)": [[33, "qiskit_optimization.algorithms.MultiStartOptimizer.trials"]], "optimizationalgorithm (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[34, "qiskit_optimization.algorithms.OptimizationAlgorithm"]], "get_compatibility_msg() (optimizationalgorithm \u306e\u30e1\u30bd\u30c3\u30c9)": [[34, "qiskit_optimization.algorithms.OptimizationAlgorithm.get_compatibility_msg"]], "is_compatible() (optimizationalgorithm \u306e\u30e1\u30bd\u30c3\u30c9)": [[34, "qiskit_optimization.algorithms.OptimizationAlgorithm.is_compatible"]], "solve() (optimizationalgorithm \u306e\u30e1\u30bd\u30c3\u30c9)": [[34, "qiskit_optimization.algorithms.OptimizationAlgorithm.solve"]], "optimizationresult (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[35, "qiskit_optimization.algorithms.OptimizationResult"]], "fval (optimizationresult \u306e\u5c5e\u6027)": [[35, "qiskit_optimization.algorithms.OptimizationResult.fval"]], "get_correlations() (optimizationresult \u306e\u30e1\u30bd\u30c3\u30c9)": [[35, "qiskit_optimization.algorithms.OptimizationResult.get_correlations"]], "prettyprint() (optimizationresult \u306e\u30e1\u30bd\u30c3\u30c9)": [[35, "qiskit_optimization.algorithms.OptimizationResult.prettyprint"]], "raw_results (optimizationresult \u306e\u5c5e\u6027)": [[35, "qiskit_optimization.algorithms.OptimizationResult.raw_results"]], "samples (optimizationresult \u306e\u5c5e\u6027)": [[35, "qiskit_optimization.algorithms.OptimizationResult.samples"]], "status (optimizationresult \u306e\u5c5e\u6027)": [[35, "qiskit_optimization.algorithms.OptimizationResult.status"]], "variable_names (optimizationresult \u306e\u5c5e\u6027)": [[35, "qiskit_optimization.algorithms.OptimizationResult.variable_names"]], "variables (optimizationresult \u306e\u5c5e\u6027)": [[35, "qiskit_optimization.algorithms.OptimizationResult.variables"]], "variables_dict (optimizationresult \u306e\u5c5e\u6027)": [[35, "qiskit_optimization.algorithms.OptimizationResult.variables_dict"]], "x (optimizationresult \u306e\u5c5e\u6027)": [[35, "qiskit_optimization.algorithms.OptimizationResult.x"]], "failure (optimizationresultstatus \u306e\u5c5e\u6027)": [[36, "qiskit_optimization.algorithms.OptimizationResultStatus.FAILURE"]], "infeasible (optimizationresultstatus \u306e\u5c5e\u6027)": [[36, "qiskit_optimization.algorithms.OptimizationResultStatus.INFEASIBLE"]], "optimizationresultstatus (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[36, "qiskit_optimization.algorithms.OptimizationResultStatus"]], "success (optimizationresultstatus \u306e\u5c5e\u6027)": [[36, "qiskit_optimization.algorithms.OptimizationResultStatus.SUCCESS"]], "recursiveminimumeigenoptimizationresult (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult"]], "fval (recursiveminimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.fval"]], "get_correlations() (recursiveminimumeigenoptimizationresult \u306e\u30e1\u30bd\u30c3\u30c9)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.get_correlations"]], "history (recursiveminimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.history"]], "prettyprint() (recursiveminimumeigenoptimizationresult \u306e\u30e1\u30bd\u30c3\u30c9)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.prettyprint"]], "raw_results (recursiveminimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.raw_results"]], "replacements (recursiveminimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.replacements"]], "samples (recursiveminimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.samples"]], "status (recursiveminimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.status"]], "variable_names (recursiveminimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.variable_names"]], "variables (recursiveminimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.variables"]], "variables_dict (recursiveminimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.variables_dict"]], "x (recursiveminimumeigenoptimizationresult \u306e\u5c5e\u6027)": [[37, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizationResult.x"]], "recursiveminimumeigenoptimizer (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[38, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer"]], "get_compatibility_msg() (recursiveminimumeigenoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[38, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.get_compatibility_msg"]], "is_compatible() (recursiveminimumeigenoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[38, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.is_compatible"]], "solve() (recursiveminimumeigenoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[38, "qiskit_optimization.algorithms.RecursiveMinimumEigenOptimizer.solve"]], "scipymilpoptimizer (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[39, "qiskit_optimization.algorithms.ScipyMilpOptimizer"]], "disp (scipymilpoptimizer \u306e\u5c5e\u6027)": [[39, "qiskit_optimization.algorithms.ScipyMilpOptimizer.disp"]], "get_compatibility_msg() (scipymilpoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[39, "qiskit_optimization.algorithms.ScipyMilpOptimizer.get_compatibility_msg"]], "is_compatible() (scipymilpoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[39, "qiskit_optimization.algorithms.ScipyMilpOptimizer.is_compatible"]], "solve() (scipymilpoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[39, "qiskit_optimization.algorithms.ScipyMilpOptimizer.solve"]], "slsqpoptimizationresult (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult"]], "fval (slsqpoptimizationresult \u306e\u5c5e\u6027)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.fval"]], "fx (slsqpoptimizationresult \u306e\u5c5e\u6027)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.fx"]], "get_correlations() (slsqpoptimizationresult \u306e\u30e1\u30bd\u30c3\u30c9)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.get_correlations"]], "imode (slsqpoptimizationresult \u306e\u5c5e\u6027)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.imode"]], "its (slsqpoptimizationresult \u306e\u5c5e\u6027)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.its"]], "prettyprint() (slsqpoptimizationresult \u306e\u30e1\u30bd\u30c3\u30c9)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.prettyprint"]], "raw_results (slsqpoptimizationresult \u306e\u5c5e\u6027)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.raw_results"]], "samples (slsqpoptimizationresult \u306e\u5c5e\u6027)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.samples"]], "smode (slsqpoptimizationresult \u306e\u5c5e\u6027)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.smode"]], "status (slsqpoptimizationresult \u306e\u5c5e\u6027)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.status"]], "variable_names (slsqpoptimizationresult \u306e\u5c5e\u6027)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.variable_names"]], "variables (slsqpoptimizationresult \u306e\u5c5e\u6027)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.variables"]], "variables_dict (slsqpoptimizationresult \u306e\u5c5e\u6027)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.variables_dict"]], "x (slsqpoptimizationresult \u306e\u5c5e\u6027)": [[40, "qiskit_optimization.algorithms.SlsqpOptimizationResult.x"]], "slsqpoptimizer (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[41, "qiskit_optimization.algorithms.SlsqpOptimizer"]], "clip (slsqpoptimizer \u306e\u5c5e\u6027)": [[41, "qiskit_optimization.algorithms.SlsqpOptimizer.clip"]], "get_compatibility_msg() (slsqpoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[41, "qiskit_optimization.algorithms.SlsqpOptimizer.get_compatibility_msg"]], "is_compatible() (slsqpoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[41, "qiskit_optimization.algorithms.SlsqpOptimizer.is_compatible"]], "multi_start_solve() (slsqpoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[41, "qiskit_optimization.algorithms.SlsqpOptimizer.multi_start_solve"]], "solve() (slsqpoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[41, "qiskit_optimization.algorithms.SlsqpOptimizer.solve"]], "trials (slsqpoptimizer \u306e\u5c5e\u6027)": [[41, "qiskit_optimization.algorithms.SlsqpOptimizer.trials"]], "solutionsample (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[42, "qiskit_optimization.algorithms.SolutionSample"]], "fval (solutionsample \u306e\u5c5e\u6027)": [[42, "qiskit_optimization.algorithms.SolutionSample.fval"]], "probability (solutionsample \u306e\u5c5e\u6027)": [[42, "qiskit_optimization.algorithms.SolutionSample.probability"]], "status (solutionsample \u306e\u5c5e\u6027)": [[42, "qiskit_optimization.algorithms.SolutionSample.status"]], "x (solutionsample \u306e\u5c5e\u6027)": [[42, "qiskit_optimization.algorithms.SolutionSample.x"]], "warmstartqaoafactory (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[43, "qiskit_optimization.algorithms.WarmStartQAOAFactory"]], "create_initial_state() (warmstartqaoafactory \u306e\u30e1\u30bd\u30c3\u30c9)": [[43, "qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_state"]], "create_initial_variables() (warmstartqaoafactory \u306e\u30e1\u30bd\u30c3\u30c9)": [[43, "qiskit_optimization.algorithms.WarmStartQAOAFactory.create_initial_variables"]], "create_mixer() (warmstartqaoafactory \u306e\u30e1\u30bd\u30c3\u30c9)": [[43, "qiskit_optimization.algorithms.WarmStartQAOAFactory.create_mixer"]], "warmstartqaoaoptimizer (qiskit_optimization.algorithms \u306e\u30af\u30e9\u30b9)": [[44, "qiskit_optimization.algorithms.WarmStartQAOAOptimizer"]], "get_compatibility_msg() (warmstartqaoaoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[44, "qiskit_optimization.algorithms.WarmStartQAOAOptimizer.get_compatibility_msg"]], "is_compatible() (warmstartqaoaoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[44, "qiskit_optimization.algorithms.WarmStartQAOAOptimizer.is_compatible"]], "min_eigen_solver (warmstartqaoaoptimizer \u306e\u5c5e\u6027)": [[44, "qiskit_optimization.algorithms.WarmStartQAOAOptimizer.min_eigen_solver"]], "solve() (warmstartqaoaoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[44, "qiskit_optimization.algorithms.WarmStartQAOAOptimizer.solve"]], "encodingcommutationverifier (qiskit_optimization.algorithms.qrao \u306e\u30af\u30e9\u30b9)": [[45, "qiskit_optimization.algorithms.qrao.EncodingCommutationVerifier"]], "magicrounding (qiskit_optimization.algorithms.qrao \u306e\u30af\u30e9\u30b9)": [[46, "qiskit_optimization.algorithms.qrao.MagicRounding"]], "basis_sampling (magicrounding \u306e\u5c5e\u6027)": [[46, "qiskit_optimization.algorithms.qrao.MagicRounding.basis_sampling"]], "round() (magicrounding \u306e\u30e1\u30bd\u30c3\u30c9)": [[46, "qiskit_optimization.algorithms.qrao.MagicRounding.round"]], "sampler (magicrounding \u306e\u5c5e\u6027)": [[46, "qiskit_optimization.algorithms.qrao.MagicRounding.sampler"]], "quantumrandomaccessencoding (qiskit_optimization.algorithms.qrao \u306e\u30af\u30e9\u30b9)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding"]], "compression_ratio (quantumrandomaccessencoding \u306e\u5c5e\u6027)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.compression_ratio"]], "encode() (quantumrandomaccessencoding \u306e\u30e1\u30bd\u30c3\u30c9)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.encode"]], "freeze() (quantumrandomaccessencoding \u306e\u30e1\u30bd\u30c3\u30c9)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.freeze"]], "frozen (quantumrandomaccessencoding \u306e\u5c5e\u6027)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.frozen"]], "max_vars_per_qubit (quantumrandomaccessencoding \u306e\u5c5e\u6027)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.max_vars_per_qubit"]], "minimum_recovery_probability (quantumrandomaccessencoding \u306e\u5c5e\u6027)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.minimum_recovery_probability"]], "num_qubits (quantumrandomaccessencoding \u306e\u5c5e\u6027)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.num_qubits"]], "num_vars (quantumrandomaccessencoding \u306e\u5c5e\u6027)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.num_vars"]], "offset (quantumrandomaccessencoding \u306e\u5c5e\u6027)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.offset"]], "problem (quantumrandomaccessencoding \u306e\u5c5e\u6027)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.problem"]], "q2vars (quantumrandomaccessencoding \u306e\u5c5e\u6027)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.q2vars"]], "qubit_op (quantumrandomaccessencoding \u306e\u5c5e\u6027)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.qubit_op"]], "state_preparation_circuit() (quantumrandomaccessencoding \u306e\u30e1\u30bd\u30c3\u30c9)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.state_preparation_circuit"]], "var2op (quantumrandomaccessencoding \u306e\u5c5e\u6027)": [[47, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessEncoding.var2op"]], "quantumrandomaccessoptimizationresult (qiskit_optimization.algorithms.qrao \u306e\u30af\u30e9\u30b9)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult"]], "encoding (quantumrandomaccessoptimizationresult \u306e\u5c5e\u6027)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.encoding"]], "fval (quantumrandomaccessoptimizationresult \u306e\u5c5e\u6027)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.fval"]], "get_correlations() (quantumrandomaccessoptimizationresult \u306e\u30e1\u30bd\u30c3\u30c9)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.get_correlations"]], "prettyprint() (quantumrandomaccessoptimizationresult \u306e\u30e1\u30bd\u30c3\u30c9)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.prettyprint"]], "raw_results (quantumrandomaccessoptimizationresult \u306e\u5c5e\u6027)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.raw_results"]], "relaxed_fval (quantumrandomaccessoptimizationresult \u306e\u5c5e\u6027)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.relaxed_fval"]], "relaxed_result (quantumrandomaccessoptimizationresult \u306e\u5c5e\u6027)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.relaxed_result"]], "rounding_result (quantumrandomaccessoptimizationresult \u306e\u5c5e\u6027)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.rounding_result"]], "samples (quantumrandomaccessoptimizationresult \u306e\u5c5e\u6027)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.samples"]], "status (quantumrandomaccessoptimizationresult \u306e\u5c5e\u6027)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.status"]], "variable_names (quantumrandomaccessoptimizationresult \u306e\u5c5e\u6027)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.variable_names"]], "variables (quantumrandomaccessoptimizationresult \u306e\u5c5e\u6027)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.variables"]], "variables_dict (quantumrandomaccessoptimizationresult \u306e\u5c5e\u6027)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.variables_dict"]], "x (quantumrandomaccessoptimizationresult \u306e\u5c5e\u6027)": [[48, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizationResult.x"]], "quantumrandomaccessoptimizer (qiskit_optimization.algorithms.qrao \u306e\u30af\u30e9\u30b9)": [[49, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer"]], "get_compatibility_msg() (quantumrandomaccessoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[49, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer.get_compatibility_msg"]], "is_compatible() (quantumrandomaccessoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[49, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer.is_compatible"]], "max_vars_per_qubit (quantumrandomaccessoptimizer \u306e\u5c5e\u6027)": [[49, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer.max_vars_per_qubit"]], "min_eigen_solver (quantumrandomaccessoptimizer \u306e\u5c5e\u6027)": [[49, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer.min_eigen_solver"]], "process_result() (quantumrandomaccessoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[49, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer.process_result"]], "rounding_scheme (quantumrandomaccessoptimizer \u306e\u5c5e\u6027)": [[49, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer.rounding_scheme"]], "solve() (quantumrandomaccessoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[49, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer.solve"]], "solve_relaxed() (quantumrandomaccessoptimizer \u306e\u30e1\u30bd\u30c3\u30c9)": [[49, "qiskit_optimization.algorithms.qrao.QuantumRandomAccessOptimizer.solve_relaxed"]], "roundingcontext (qiskit_optimization.algorithms.qrao \u306e\u30af\u30e9\u30b9)": [[50, "qiskit_optimization.algorithms.qrao.RoundingContext"]], "circuit (roundingcontext \u306e\u5c5e\u6027)": [[50, "qiskit_optimization.algorithms.qrao.RoundingContext.circuit"]], "encoding (roundingcontext \u306e\u5c5e\u6027)": [[50, "qiskit_optimization.algorithms.qrao.RoundingContext.encoding"]], "expectation_values (roundingcontext \u306e\u5c5e\u6027)": [[50, "qiskit_optimization.algorithms.qrao.RoundingContext.expectation_values"]], "roundingresult (qiskit_optimization.algorithms.qrao \u306e\u30af\u30e9\u30b9)": [[51, "qiskit_optimization.algorithms.qrao.RoundingResult"]], "bases (roundingresult \u306e\u5c5e\u6027)": [[51, "qiskit_optimization.algorithms.qrao.RoundingResult.bases"]], "basis_counts (roundingresult \u306e\u5c5e\u6027)": [[51, "qiskit_optimization.algorithms.qrao.RoundingResult.basis_counts"]], "basis_shots (roundingresult \u306e\u5c5e\u6027)": [[51, "qiskit_optimization.algorithms.qrao.RoundingResult.basis_shots"]], "expectation_values (roundingresult \u306e\u5c5e\u6027)": [[51, "qiskit_optimization.algorithms.qrao.RoundingResult.expectation_values"]], "samples (roundingresult \u306e\u5c5e\u6027)": [[51, "qiskit_optimization.algorithms.qrao.RoundingResult.samples"]], "roundingscheme (qiskit_optimization.algorithms.qrao \u306e\u30af\u30e9\u30b9)": [[52, "qiskit_optimization.algorithms.qrao.RoundingScheme"]], "round() (roundingscheme \u306e\u30e1\u30bd\u30c3\u30c9)": [[52, "qiskit_optimization.algorithms.qrao.RoundingScheme.round"]], "semideterministicrounding (qiskit_optimization.algorithms.qrao \u306e\u30af\u30e9\u30b9)": [[53, "qiskit_optimization.algorithms.qrao.SemideterministicRounding"]], "round() (semideterministicrounding \u306e\u30e1\u30bd\u30c3\u30c9)": [[53, "qiskit_optimization.algorithms.qrao.SemideterministicRounding.round"]], "binpacking (qiskit_optimization.applications \u306e\u30af\u30e9\u30b9)": [[54, "qiskit_optimization.applications.BinPacking"]], "get_figure() (binpacking \u306e\u30e1\u30bd\u30c3\u30c9)": [[54, "qiskit_optimization.applications.BinPacking.get_figure"]], "interpret() (binpacking \u306e\u30e1\u30bd\u30c3\u30c9)": [[54, "qiskit_optimization.applications.BinPacking.interpret"]], "sample_most_likely() (binpacking \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[54, "qiskit_optimization.applications.BinPacking.sample_most_likely"]], "to_quadratic_program() (binpacking \u306e\u30e1\u30bd\u30c3\u30c9)": [[54, "qiskit_optimization.applications.BinPacking.to_quadratic_program"]], "clique (qiskit_optimization.applications \u306e\u30af\u30e9\u30b9)": [[55, "qiskit_optimization.applications.Clique"]], "draw() (clique \u306e\u30e1\u30bd\u30c3\u30c9)": [[55, "qiskit_optimization.applications.Clique.draw"]], "graph (clique \u306e\u5c5e\u6027)": [[55, "qiskit_optimization.applications.Clique.graph"]], "interpret() (clique \u306e\u30e1\u30bd\u30c3\u30c9)": [[55, "qiskit_optimization.applications.Clique.interpret"]], "sample_most_likely() (clique \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[55, "qiskit_optimization.applications.Clique.sample_most_likely"]], "size (clique \u306e\u5c5e\u6027)": [[55, "qiskit_optimization.applications.Clique.size"]], "to_quadratic_program() (clique \u306e\u30e1\u30bd\u30c3\u30c9)": [[55, "qiskit_optimization.applications.Clique.to_quadratic_program"]], "exactcover (qiskit_optimization.applications \u306e\u30af\u30e9\u30b9)": [[56, "qiskit_optimization.applications.ExactCover"]], "interpret() (exactcover \u306e\u30e1\u30bd\u30c3\u30c9)": [[56, "qiskit_optimization.applications.ExactCover.interpret"]], "sample_most_likely() (exactcover \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[56, "qiskit_optimization.applications.ExactCover.sample_most_likely"]], "to_quadratic_program() (exactcover \u306e\u30e1\u30bd\u30c3\u30c9)": [[56, "qiskit_optimization.applications.ExactCover.to_quadratic_program"]], "graphoptimizationapplication (qiskit_optimization.applications \u306e\u30af\u30e9\u30b9)": [[57, "qiskit_optimization.applications.GraphOptimizationApplication"]], "draw() (graphoptimizationapplication \u306e\u30e1\u30bd\u30c3\u30c9)": [[57, "qiskit_optimization.applications.GraphOptimizationApplication.draw"]], "graph (graphoptimizationapplication \u306e\u5c5e\u6027)": [[57, "qiskit_optimization.applications.GraphOptimizationApplication.graph"]], "interpret() (graphoptimizationapplication \u306e\u30e1\u30bd\u30c3\u30c9)": [[57, "qiskit_optimization.applications.GraphOptimizationApplication.interpret"]], "sample_most_likely() (graphoptimizationapplication \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[57, "qiskit_optimization.applications.GraphOptimizationApplication.sample_most_likely"]], "to_quadratic_program() (graphoptimizationapplication \u306e\u30e1\u30bd\u30c3\u30c9)": [[57, "qiskit_optimization.applications.GraphOptimizationApplication.to_quadratic_program"]], "graphpartition (qiskit_optimization.applications \u306e\u30af\u30e9\u30b9)": [[58, "qiskit_optimization.applications.GraphPartition"]], "draw() (graphpartition \u306e\u30e1\u30bd\u30c3\u30c9)": [[58, "qiskit_optimization.applications.GraphPartition.draw"]], "graph (graphpartition \u306e\u5c5e\u6027)": [[58, "qiskit_optimization.applications.GraphPartition.graph"]], "interpret() (graphpartition \u306e\u30e1\u30bd\u30c3\u30c9)": [[58, "qiskit_optimization.applications.GraphPartition.interpret"]], "sample_most_likely() (graphpartition \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[58, "qiskit_optimization.applications.GraphPartition.sample_most_likely"]], "to_quadratic_program() (graphpartition \u306e\u30e1\u30bd\u30c3\u30c9)": [[58, "qiskit_optimization.applications.GraphPartition.to_quadratic_program"]], "knapsack (qiskit_optimization.applications \u306e\u30af\u30e9\u30b9)": [[59, "qiskit_optimization.applications.Knapsack"]], "interpret() (knapsack \u306e\u30e1\u30bd\u30c3\u30c9)": [[59, "qiskit_optimization.applications.Knapsack.interpret"]], "max_weight (knapsack \u306e\u5c5e\u6027)": [[59, "qiskit_optimization.applications.Knapsack.max_weight"]], "sample_most_likely() (knapsack \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[59, "qiskit_optimization.applications.Knapsack.sample_most_likely"]], "to_quadratic_program() (knapsack \u306e\u30e1\u30bd\u30c3\u30c9)": [[59, "qiskit_optimization.applications.Knapsack.to_quadratic_program"]], "maxcut (qiskit_optimization.applications \u306e\u30af\u30e9\u30b9)": [[60, "qiskit_optimization.applications.Maxcut"]], "draw() (maxcut \u306e\u30e1\u30bd\u30c3\u30c9)": [[60, "qiskit_optimization.applications.Maxcut.draw"]], "get_gset_result() (maxcut \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[60, "qiskit_optimization.applications.Maxcut.get_gset_result"]], "graph (maxcut \u306e\u5c5e\u6027)": [[60, "qiskit_optimization.applications.Maxcut.graph"]], "interpret() (maxcut \u306e\u30e1\u30bd\u30c3\u30c9)": [[60, "qiskit_optimization.applications.Maxcut.interpret"]], "parse_gset_format() (maxcut \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[60, "qiskit_optimization.applications.Maxcut.parse_gset_format"]], "sample_most_likely() (maxcut \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[60, "qiskit_optimization.applications.Maxcut.sample_most_likely"]], "to_quadratic_program() (maxcut \u306e\u30e1\u30bd\u30c3\u30c9)": [[60, "qiskit_optimization.applications.Maxcut.to_quadratic_program"]], "numberpartition (qiskit_optimization.applications \u306e\u30af\u30e9\u30b9)": [[61, "qiskit_optimization.applications.NumberPartition"]], "interpret() (numberpartition \u306e\u30e1\u30bd\u30c3\u30c9)": [[61, "qiskit_optimization.applications.NumberPartition.interpret"]], "sample_most_likely() (numberpartition \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[61, "qiskit_optimization.applications.NumberPartition.sample_most_likely"]], "to_quadratic_program() (numberpartition \u306e\u30e1\u30bd\u30c3\u30c9)": [[61, "qiskit_optimization.applications.NumberPartition.to_quadratic_program"]], "optimizationapplication (qiskit_optimization.applications \u306e\u30af\u30e9\u30b9)": [[62, "qiskit_optimization.applications.OptimizationApplication"]], "interpret() (optimizationapplication \u306e\u30e1\u30bd\u30c3\u30c9)": [[62, "qiskit_optimization.applications.OptimizationApplication.interpret"]], "sample_most_likely() (optimizationapplication \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[62, "qiskit_optimization.applications.OptimizationApplication.sample_most_likely"]], "to_quadratic_program() (optimizationapplication \u306e\u30e1\u30bd\u30c3\u30c9)": [[62, "qiskit_optimization.applications.OptimizationApplication.to_quadratic_program"]], "skmodel (qiskit_optimization.applications \u306e\u30af\u30e9\u30b9)": [[63, "qiskit_optimization.applications.SKModel"]], "disorder() (skmodel \u306e\u30e1\u30bd\u30c3\u30c9)": [[63, "qiskit_optimization.applications.SKModel.disorder"]], "graph (skmodel \u306e\u5c5e\u6027)": [[63, "qiskit_optimization.applications.SKModel.graph"]], "interpret() (skmodel \u306e\u30e1\u30bd\u30c3\u30c9)": [[63, "qiskit_optimization.applications.SKModel.interpret"]], "num_sites (skmodel \u306e\u5c5e\u6027)": [[63, "qiskit_optimization.applications.SKModel.num_sites"]], "sample_most_likely() (skmodel \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[63, "qiskit_optimization.applications.SKModel.sample_most_likely"]], "to_quadratic_program() (skmodel \u306e\u30e1\u30bd\u30c3\u30c9)": [[63, "qiskit_optimization.applications.SKModel.to_quadratic_program"]], "setpacking (qiskit_optimization.applications \u306e\u30af\u30e9\u30b9)": [[64, "qiskit_optimization.applications.SetPacking"]], "interpret() (setpacking \u306e\u30e1\u30bd\u30c3\u30c9)": [[64, "qiskit_optimization.applications.SetPacking.interpret"]], "sample_most_likely() (setpacking \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[64, "qiskit_optimization.applications.SetPacking.sample_most_likely"]], "to_quadratic_program() (setpacking \u306e\u30e1\u30bd\u30c3\u30c9)": [[64, "qiskit_optimization.applications.SetPacking.to_quadratic_program"]], "stableset (qiskit_optimization.applications \u306e\u30af\u30e9\u30b9)": [[65, "qiskit_optimization.applications.StableSet"]], "draw() (stableset \u306e\u30e1\u30bd\u30c3\u30c9)": [[65, "qiskit_optimization.applications.StableSet.draw"]], "graph (stableset \u306e\u5c5e\u6027)": [[65, "qiskit_optimization.applications.StableSet.graph"]], "interpret() (stableset \u306e\u30e1\u30bd\u30c3\u30c9)": [[65, "qiskit_optimization.applications.StableSet.interpret"]], "sample_most_likely() (stableset \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[65, "qiskit_optimization.applications.StableSet.sample_most_likely"]], "to_quadratic_program() (stableset \u306e\u30e1\u30bd\u30c3\u30c9)": [[65, "qiskit_optimization.applications.StableSet.to_quadratic_program"]], "tsp (qiskit_optimization.applications \u306e\u30af\u30e9\u30b9)": [[66, "qiskit_optimization.applications.Tsp"]], "create_random_instance() (tsp \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[66, "qiskit_optimization.applications.Tsp.create_random_instance"]], "draw() (tsp \u306e\u30e1\u30bd\u30c3\u30c9)": [[66, "qiskit_optimization.applications.Tsp.draw"]], "graph (tsp \u306e\u5c5e\u6027)": [[66, "qiskit_optimization.applications.Tsp.graph"]], "interpret() (tsp \u306e\u30e1\u30bd\u30c3\u30c9)": [[66, "qiskit_optimization.applications.Tsp.interpret"]], "parse_tsplib_format() (tsp \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[66, "qiskit_optimization.applications.Tsp.parse_tsplib_format"]], "sample_most_likely() (tsp \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[66, "qiskit_optimization.applications.Tsp.sample_most_likely"]], "to_quadratic_program() (tsp \u306e\u30e1\u30bd\u30c3\u30c9)": [[66, "qiskit_optimization.applications.Tsp.to_quadratic_program"]], "tsp_value() (tsp \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[66, "qiskit_optimization.applications.Tsp.tsp_value"]], "vehiclerouting (qiskit_optimization.applications \u306e\u30af\u30e9\u30b9)": [[67, "qiskit_optimization.applications.VehicleRouting"]], "create_random_instance() (vehiclerouting \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[67, "qiskit_optimization.applications.VehicleRouting.create_random_instance"]], "depot (vehiclerouting \u306e\u5c5e\u6027)": [[67, "qiskit_optimization.applications.VehicleRouting.depot"]], "draw() (vehiclerouting \u306e\u30e1\u30bd\u30c3\u30c9)": [[67, "qiskit_optimization.applications.VehicleRouting.draw"]], "graph (vehiclerouting \u306e\u5c5e\u6027)": [[67, "qiskit_optimization.applications.VehicleRouting.graph"]], "interpret() (vehiclerouting \u306e\u30e1\u30bd\u30c3\u30c9)": [[67, "qiskit_optimization.applications.VehicleRouting.interpret"]], "num_vehicles (vehiclerouting \u306e\u5c5e\u6027)": [[67, "qiskit_optimization.applications.VehicleRouting.num_vehicles"]], "sample_most_likely() (vehiclerouting \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[67, "qiskit_optimization.applications.VehicleRouting.sample_most_likely"]], "to_quadratic_program() (vehiclerouting \u306e\u30e1\u30bd\u30c3\u30c9)": [[67, "qiskit_optimization.applications.VehicleRouting.to_quadratic_program"]], "vertexcover (qiskit_optimization.applications \u306e\u30af\u30e9\u30b9)": [[68, "qiskit_optimization.applications.VertexCover"]], "draw() (vertexcover \u306e\u30e1\u30bd\u30c3\u30c9)": [[68, "qiskit_optimization.applications.VertexCover.draw"]], "graph (vertexcover \u306e\u5c5e\u6027)": [[68, "qiskit_optimization.applications.VertexCover.graph"]], "interpret() (vertexcover \u306e\u30e1\u30bd\u30c3\u30c9)": [[68, "qiskit_optimization.applications.VertexCover.interpret"]], "sample_most_likely() (vertexcover \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[68, "qiskit_optimization.applications.VertexCover.sample_most_likely"]], "to_quadratic_program() (vertexcover \u306e\u30e1\u30bd\u30c3\u30c9)": [[68, "qiskit_optimization.applications.VertexCover.to_quadratic_program"]], "inequalitytoequality (qiskit_optimization.converters \u306e\u30af\u30e9\u30b9)": [[69, "qiskit_optimization.converters.InequalityToEquality"]], "convert() (inequalitytoequality \u306e\u30e1\u30bd\u30c3\u30c9)": [[69, "qiskit_optimization.converters.InequalityToEquality.convert"]], "interpret() (inequalitytoequality \u306e\u30e1\u30bd\u30c3\u30c9)": [[69, "qiskit_optimization.converters.InequalityToEquality.interpret"]], "mode (inequalitytoequality \u306e\u5c5e\u6027)": [[69, "qiskit_optimization.converters.InequalityToEquality.mode"]], "integertobinary (qiskit_optimization.converters \u306e\u30af\u30e9\u30b9)": [[70, "qiskit_optimization.converters.IntegerToBinary"]], "convert() (integertobinary \u306e\u30e1\u30bd\u30c3\u30c9)": [[70, "qiskit_optimization.converters.IntegerToBinary.convert"]], "interpret() (integertobinary \u306e\u30e1\u30bd\u30c3\u30c9)": [[70, "qiskit_optimization.converters.IntegerToBinary.interpret"]], "linearequalitytopenalty (qiskit_optimization.converters \u306e\u30af\u30e9\u30b9)": [[71, "qiskit_optimization.converters.LinearEqualityToPenalty"]], "convert() (linearequalitytopenalty \u306e\u30e1\u30bd\u30c3\u30c9)": [[71, "qiskit_optimization.converters.LinearEqualityToPenalty.convert"]], "interpret() (linearequalitytopenalty \u306e\u30e1\u30bd\u30c3\u30c9)": [[71, "qiskit_optimization.converters.LinearEqualityToPenalty.interpret"]], "penalty (linearequalitytopenalty \u306e\u5c5e\u6027)": [[71, "qiskit_optimization.converters.LinearEqualityToPenalty.penalty"]], "linearinequalitytopenalty (qiskit_optimization.converters \u306e\u30af\u30e9\u30b9)": [[72, "qiskit_optimization.converters.LinearInequalityToPenalty"]], "convert() (linearinequalitytopenalty \u306e\u30e1\u30bd\u30c3\u30c9)": [[72, "qiskit_optimization.converters.LinearInequalityToPenalty.convert"]], "interpret() (linearinequalitytopenalty \u306e\u30e1\u30bd\u30c3\u30c9)": [[72, "qiskit_optimization.converters.LinearInequalityToPenalty.interpret"]], "penalty (linearinequalitytopenalty \u306e\u5c5e\u6027)": [[72, "qiskit_optimization.converters.LinearInequalityToPenalty.penalty"]], "maximizetominimize (qiskit_optimization.converters \u306e\u30af\u30e9\u30b9)": [[73, "qiskit_optimization.converters.MaximizeToMinimize"]], "convert() (maximizetominimize \u306e\u30e1\u30bd\u30c3\u30c9)": [[73, "qiskit_optimization.converters.MaximizeToMinimize.convert"]], "interpret() (maximizetominimize \u306e\u30e1\u30bd\u30c3\u30c9)": [[73, "qiskit_optimization.converters.MaximizeToMinimize.interpret"]], "minimizetomaximize (qiskit_optimization.converters \u306e\u30af\u30e9\u30b9)": [[74, "qiskit_optimization.converters.MinimizeToMaximize"]], "convert() (minimizetomaximize \u306e\u30e1\u30bd\u30c3\u30c9)": [[74, "qiskit_optimization.converters.MinimizeToMaximize.convert"]], "interpret() (minimizetomaximize \u306e\u30e1\u30bd\u30c3\u30c9)": [[74, "qiskit_optimization.converters.MinimizeToMaximize.interpret"]], "quadraticprogramconverter (qiskit_optimization.converters \u306e\u30af\u30e9\u30b9)": [[75, "qiskit_optimization.converters.QuadraticProgramConverter"]], "convert() (quadraticprogramconverter \u306e\u30e1\u30bd\u30c3\u30c9)": [[75, "qiskit_optimization.converters.QuadraticProgramConverter.convert"]], "interpret() (quadraticprogramconverter \u306e\u30e1\u30bd\u30c3\u30c9)": [[75, "qiskit_optimization.converters.QuadraticProgramConverter.interpret"]], "quadraticprogramtoqubo (qiskit_optimization.converters \u306e\u30af\u30e9\u30b9)": [[76, "qiskit_optimization.converters.QuadraticProgramToQubo"]], "convert() (quadraticprogramtoqubo \u306e\u30e1\u30bd\u30c3\u30c9)": [[76, "qiskit_optimization.converters.QuadraticProgramToQubo.convert"]], "get_compatibility_msg() (quadraticprogramtoqubo \u306e\u9759\u7684\u30e1\u30bd\u30c3\u30c9)": [[76, "qiskit_optimization.converters.QuadraticProgramToQubo.get_compatibility_msg"]], "interpret() (quadraticprogramtoqubo \u306e\u30e1\u30bd\u30c3\u30c9)": [[76, "qiskit_optimization.converters.QuadraticProgramToQubo.interpret"]], "is_compatible() (quadraticprogramtoqubo \u306e\u30e1\u30bd\u30c3\u30c9)": [[76, "qiskit_optimization.converters.QuadraticProgramToQubo.is_compatible"]], "penalty (quadraticprogramtoqubo \u306e\u5c5e\u6027)": [[76, "qiskit_optimization.converters.QuadraticProgramToQubo.penalty"]], "infinity (qiskit_optimization.infinity \u30e2\u30b8\u30e5\u30fc\u30eb)": [[77, "qiskit_optimization.infinity.INFINITY"]], "constraint (qiskit_optimization.problems \u306e\u30af\u30e9\u30b9)": [[78, "qiskit_optimization.problems.Constraint"]], "evaluate() (constraint \u306e\u30e1\u30bd\u30c3\u30c9)": [[78, "qiskit_optimization.problems.Constraint.evaluate"]], "name (constraint \u306e\u5c5e\u6027)": [[78, "qiskit_optimization.problems.Constraint.name"]], "quadratic_program (constraint \u306e\u5c5e\u6027)": [[78, "qiskit_optimization.problems.Constraint.quadratic_program"]], "rhs (constraint \u306e\u5c5e\u6027)": [[78, "qiskit_optimization.problems.Constraint.rhs"]], "sense (constraint \u306e\u5c5e\u6027)": [[78, "qiskit_optimization.problems.Constraint.sense"]], "linearconstraint (qiskit_optimization.problems \u306e\u30af\u30e9\u30b9)": [[79, "qiskit_optimization.problems.LinearConstraint"]], "evaluate() (linearconstraint \u306e\u30e1\u30bd\u30c3\u30c9)": [[79, "qiskit_optimization.problems.LinearConstraint.evaluate"]], "linear (linearconstraint \u306e\u5c5e\u6027)": [[79, "qiskit_optimization.problems.LinearConstraint.linear"]], "name (linearconstraint \u306e\u5c5e\u6027)": [[79, "qiskit_optimization.problems.LinearConstraint.name"]], "quadratic_program (linearconstraint \u306e\u5c5e\u6027)": [[79, "qiskit_optimization.problems.LinearConstraint.quadratic_program"]], "rhs (linearconstraint \u306e\u5c5e\u6027)": [[79, "qiskit_optimization.problems.LinearConstraint.rhs"]], "sense (linearconstraint \u306e\u5c5e\u6027)": [[79, "qiskit_optimization.problems.LinearConstraint.sense"]], "linearexpression (qiskit_optimization.problems \u306e\u30af\u30e9\u30b9)": [[80, "qiskit_optimization.problems.LinearExpression"]], "bounds (linearexpression \u306e\u5c5e\u6027)": [[80, "qiskit_optimization.problems.LinearExpression.bounds"]], "coefficients (linearexpression \u306e\u5c5e\u6027)": [[80, "qiskit_optimization.problems.LinearExpression.coefficients"]], "evaluate() (linearexpression \u306e\u30e1\u30bd\u30c3\u30c9)": [[80, "qiskit_optimization.problems.LinearExpression.evaluate"]], "evaluate_gradient() (linearexpression \u306e\u30e1\u30bd\u30c3\u30c9)": [[80, "qiskit_optimization.problems.LinearExpression.evaluate_gradient"]], "quadratic_program (linearexpression \u306e\u5c5e\u6027)": [[80, "qiskit_optimization.problems.LinearExpression.quadratic_program"]], "to_array() (linearexpression \u306e\u30e1\u30bd\u30c3\u30c9)": [[80, "qiskit_optimization.problems.LinearExpression.to_array"]], "to_dict() (linearexpression \u306e\u30e1\u30bd\u30c3\u30c9)": [[80, "qiskit_optimization.problems.LinearExpression.to_dict"]], "quadraticconstraint (qiskit_optimization.problems \u306e\u30af\u30e9\u30b9)": [[81, "qiskit_optimization.problems.QuadraticConstraint"]], "evaluate() (quadraticconstraint \u306e\u30e1\u30bd\u30c3\u30c9)": [[81, "qiskit_optimization.problems.QuadraticConstraint.evaluate"]], "linear (quadraticconstraint \u306e\u5c5e\u6027)": [[81, "qiskit_optimization.problems.QuadraticConstraint.linear"]], "name (quadraticconstraint \u306e\u5c5e\u6027)": [[81, "qiskit_optimization.problems.QuadraticConstraint.name"]], "quadratic (quadraticconstraint \u306e\u5c5e\u6027)": [[81, "qiskit_optimization.problems.QuadraticConstraint.quadratic"]], "quadratic_program (quadraticconstraint \u306e\u5c5e\u6027)": [[81, "qiskit_optimization.problems.QuadraticConstraint.quadratic_program"]], "rhs (quadraticconstraint \u306e\u5c5e\u6027)": [[81, "qiskit_optimization.problems.QuadraticConstraint.rhs"]], "sense (quadraticconstraint \u306e\u5c5e\u6027)": [[81, "qiskit_optimization.problems.QuadraticConstraint.sense"]], "quadraticexpression (qiskit_optimization.problems \u306e\u30af\u30e9\u30b9)": [[82, "qiskit_optimization.problems.QuadraticExpression"]], "bounds (quadraticexpression \u306e\u5c5e\u6027)": [[82, "qiskit_optimization.problems.QuadraticExpression.bounds"]], "coefficients (quadraticexpression \u306e\u5c5e\u6027)": [[82, "qiskit_optimization.problems.QuadraticExpression.coefficients"]], "evaluate() (quadraticexpression \u306e\u30e1\u30bd\u30c3\u30c9)": [[82, "qiskit_optimization.problems.QuadraticExpression.evaluate"]], "evaluate_gradient() (quadraticexpression \u306e\u30e1\u30bd\u30c3\u30c9)": [[82, "qiskit_optimization.problems.QuadraticExpression.evaluate_gradient"]], "quadratic_program (quadraticexpression \u306e\u5c5e\u6027)": [[82, "qiskit_optimization.problems.QuadraticExpression.quadratic_program"]], "to_array() (quadraticexpression \u306e\u30e1\u30bd\u30c3\u30c9)": [[82, "qiskit_optimization.problems.QuadraticExpression.to_array"]], "to_dict() (quadraticexpression \u306e\u30e1\u30bd\u30c3\u30c9)": [[82, "qiskit_optimization.problems.QuadraticExpression.to_dict"]], "quadraticobjective (qiskit_optimization.problems \u306e\u30af\u30e9\u30b9)": [[83, "qiskit_optimization.problems.QuadraticObjective"]], "constant (quadraticobjective \u306e\u5c5e\u6027)": [[83, "qiskit_optimization.problems.QuadraticObjective.constant"]], "evaluate() (quadraticobjective \u306e\u30e1\u30bd\u30c3\u30c9)": [[83, "qiskit_optimization.problems.QuadraticObjective.evaluate"]], "evaluate_gradient() (quadraticobjective \u306e\u30e1\u30bd\u30c3\u30c9)": [[83, "qiskit_optimization.problems.QuadraticObjective.evaluate_gradient"]], "linear (quadraticobjective \u306e\u5c5e\u6027)": [[83, "qiskit_optimization.problems.QuadraticObjective.linear"]], "quadratic (quadraticobjective \u306e\u5c5e\u6027)": [[83, "qiskit_optimization.problems.QuadraticObjective.quadratic"]], "quadratic_program (quadraticobjective \u306e\u5c5e\u6027)": [[83, "qiskit_optimization.problems.QuadraticObjective.quadratic_program"]], "sense (quadraticobjective \u306e\u5c5e\u6027)": [[83, "qiskit_optimization.problems.QuadraticObjective.sense"]], "quadraticprogramelement (qiskit_optimization.problems \u306e\u30af\u30e9\u30b9)": [[84, "qiskit_optimization.problems.QuadraticProgramElement"]], "quadratic_program (quadraticprogramelement \u306e\u5c5e\u6027)": [[84, "qiskit_optimization.problems.QuadraticProgramElement.quadratic_program"]], "variable (qiskit_optimization.problems \u306e\u30af\u30e9\u30b9)": [[85, "qiskit_optimization.problems.Variable"]], "as_tuple() (variable \u306e\u30e1\u30bd\u30c3\u30c9)": [[85, "qiskit_optimization.problems.Variable.as_tuple"]], "lowerbound (variable \u306e\u5c5e\u6027)": [[85, "qiskit_optimization.problems.Variable.lowerbound"]], "name (variable \u306e\u5c5e\u6027)": [[85, "qiskit_optimization.problems.Variable.name"]], "quadratic_program (variable \u306e\u5c5e\u6027)": [[85, "qiskit_optimization.problems.Variable.quadratic_program"]], "upperbound (variable \u306e\u5c5e\u6027)": [[85, "qiskit_optimization.problems.Variable.upperbound"]], "vartype (variable \u306e\u5c5e\u6027)": [[85, "qiskit_optimization.problems.Variable.vartype"]], "from_docplex_mp() (qiskit_optimization.translators \u30e2\u30b8\u30e5\u30fc\u30eb)": [[86, "qiskit_optimization.translators.from_docplex_mp"]], "from_gurobipy() (qiskit_optimization.translators \u30e2\u30b8\u30e5\u30fc\u30eb)": [[87, "qiskit_optimization.translators.from_gurobipy"]], "from_ising() (qiskit_optimization.translators \u30e2\u30b8\u30e5\u30fc\u30eb)": [[88, "qiskit_optimization.translators.from_ising"]], "to_docplex_mp() (qiskit_optimization.translators \u30e2\u30b8\u30e5\u30fc\u30eb)": [[89, "qiskit_optimization.translators.to_docplex_mp"]], "to_gurobipy() (qiskit_optimization.translators \u30e2\u30b8\u30e5\u30fc\u30eb)": [[90, "qiskit_optimization.translators.to_gurobipy"]], "to_ising() (qiskit_optimization.translators \u30e2\u30b8\u30e5\u30fc\u30eb)": [[91, "qiskit_optimization.translators.to_ising"]]}})